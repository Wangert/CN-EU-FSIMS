// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/coldchain"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPackageProductAndTransportPIDMap(db *gorm.DB, opts ...gen.DOOption) packageProductAndTransportPIDMap {
	_packageProductAndTransportPIDMap := packageProductAndTransportPIDMap{}

	_packageProductAndTransportPIDMap.packageProductAndTransportPIDMapDo.UseDB(db, opts...)
	_packageProductAndTransportPIDMap.packageProductAndTransportPIDMapDo.UseModel(&coldchain.PackageProductAndTransportPIDMap{})

	tableName := _packageProductAndTransportPIDMap.packageProductAndTransportPIDMapDo.TableName()
	_packageProductAndTransportPIDMap.ALL = field.NewAsterisk(tableName)
	_packageProductAndTransportPIDMap.PackageProductNumber = field.NewString(tableName, "package_product_number")
	_packageProductAndTransportPIDMap.TransportPID = field.NewString(tableName, "transport_p_id")

	_packageProductAndTransportPIDMap.fillFieldMap()

	return _packageProductAndTransportPIDMap
}

type packageProductAndTransportPIDMap struct {
	packageProductAndTransportPIDMapDo packageProductAndTransportPIDMapDo

	ALL                  field.Asterisk
	PackageProductNumber field.String
	TransportPID         field.String

	fieldMap map[string]field.Expr
}

func (p packageProductAndTransportPIDMap) Table(newTableName string) *packageProductAndTransportPIDMap {
	p.packageProductAndTransportPIDMapDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p packageProductAndTransportPIDMap) As(alias string) *packageProductAndTransportPIDMap {
	p.packageProductAndTransportPIDMapDo.DO = *(p.packageProductAndTransportPIDMapDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *packageProductAndTransportPIDMap) updateTableName(table string) *packageProductAndTransportPIDMap {
	p.ALL = field.NewAsterisk(table)
	p.PackageProductNumber = field.NewString(table, "package_product_number")
	p.TransportPID = field.NewString(table, "transport_p_id")

	p.fillFieldMap()

	return p
}

func (p *packageProductAndTransportPIDMap) WithContext(ctx context.Context) IPackageProductAndTransportPIDMapDo {
	return p.packageProductAndTransportPIDMapDo.WithContext(ctx)
}

func (p packageProductAndTransportPIDMap) TableName() string {
	return p.packageProductAndTransportPIDMapDo.TableName()
}

func (p packageProductAndTransportPIDMap) Alias() string {
	return p.packageProductAndTransportPIDMapDo.Alias()
}

func (p packageProductAndTransportPIDMap) Columns(cols ...field.Expr) gen.Columns {
	return p.packageProductAndTransportPIDMapDo.Columns(cols...)
}

func (p *packageProductAndTransportPIDMap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *packageProductAndTransportPIDMap) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 2)
	p.fieldMap["package_product_number"] = p.PackageProductNumber
	p.fieldMap["transport_p_id"] = p.TransportPID
}

func (p packageProductAndTransportPIDMap) clone(db *gorm.DB) packageProductAndTransportPIDMap {
	p.packageProductAndTransportPIDMapDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p packageProductAndTransportPIDMap) replaceDB(db *gorm.DB) packageProductAndTransportPIDMap {
	p.packageProductAndTransportPIDMapDo.ReplaceDB(db)
	return p
}

type packageProductAndTransportPIDMapDo struct{ gen.DO }

type IPackageProductAndTransportPIDMapDo interface {
	gen.SubQuery
	Debug() IPackageProductAndTransportPIDMapDo
	WithContext(ctx context.Context) IPackageProductAndTransportPIDMapDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPackageProductAndTransportPIDMapDo
	WriteDB() IPackageProductAndTransportPIDMapDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPackageProductAndTransportPIDMapDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPackageProductAndTransportPIDMapDo
	Not(conds ...gen.Condition) IPackageProductAndTransportPIDMapDo
	Or(conds ...gen.Condition) IPackageProductAndTransportPIDMapDo
	Select(conds ...field.Expr) IPackageProductAndTransportPIDMapDo
	Where(conds ...gen.Condition) IPackageProductAndTransportPIDMapDo
	Order(conds ...field.Expr) IPackageProductAndTransportPIDMapDo
	Distinct(cols ...field.Expr) IPackageProductAndTransportPIDMapDo
	Omit(cols ...field.Expr) IPackageProductAndTransportPIDMapDo
	Join(table schema.Tabler, on ...field.Expr) IPackageProductAndTransportPIDMapDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPackageProductAndTransportPIDMapDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPackageProductAndTransportPIDMapDo
	Group(cols ...field.Expr) IPackageProductAndTransportPIDMapDo
	Having(conds ...gen.Condition) IPackageProductAndTransportPIDMapDo
	Limit(limit int) IPackageProductAndTransportPIDMapDo
	Offset(offset int) IPackageProductAndTransportPIDMapDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPackageProductAndTransportPIDMapDo
	Unscoped() IPackageProductAndTransportPIDMapDo
	Create(values ...*coldchain.PackageProductAndTransportPIDMap) error
	CreateInBatches(values []*coldchain.PackageProductAndTransportPIDMap, batchSize int) error
	Save(values ...*coldchain.PackageProductAndTransportPIDMap) error
	First() (*coldchain.PackageProductAndTransportPIDMap, error)
	Take() (*coldchain.PackageProductAndTransportPIDMap, error)
	Last() (*coldchain.PackageProductAndTransportPIDMap, error)
	Find() ([]*coldchain.PackageProductAndTransportPIDMap, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*coldchain.PackageProductAndTransportPIDMap, err error)
	FindInBatches(result *[]*coldchain.PackageProductAndTransportPIDMap, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*coldchain.PackageProductAndTransportPIDMap) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPackageProductAndTransportPIDMapDo
	Assign(attrs ...field.AssignExpr) IPackageProductAndTransportPIDMapDo
	Joins(fields ...field.RelationField) IPackageProductAndTransportPIDMapDo
	Preload(fields ...field.RelationField) IPackageProductAndTransportPIDMapDo
	FirstOrInit() (*coldchain.PackageProductAndTransportPIDMap, error)
	FirstOrCreate() (*coldchain.PackageProductAndTransportPIDMap, error)
	FindByPage(offset int, limit int) (result []*coldchain.PackageProductAndTransportPIDMap, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPackageProductAndTransportPIDMapDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p packageProductAndTransportPIDMapDo) Debug() IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Debug())
}

func (p packageProductAndTransportPIDMapDo) WithContext(ctx context.Context) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p packageProductAndTransportPIDMapDo) ReadDB() IPackageProductAndTransportPIDMapDo {
	return p.Clauses(dbresolver.Read)
}

func (p packageProductAndTransportPIDMapDo) WriteDB() IPackageProductAndTransportPIDMapDo {
	return p.Clauses(dbresolver.Write)
}

func (p packageProductAndTransportPIDMapDo) Session(config *gorm.Session) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Session(config))
}

func (p packageProductAndTransportPIDMapDo) Clauses(conds ...clause.Expression) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p packageProductAndTransportPIDMapDo) Returning(value interface{}, columns ...string) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p packageProductAndTransportPIDMapDo) Not(conds ...gen.Condition) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p packageProductAndTransportPIDMapDo) Or(conds ...gen.Condition) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p packageProductAndTransportPIDMapDo) Select(conds ...field.Expr) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p packageProductAndTransportPIDMapDo) Where(conds ...gen.Condition) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p packageProductAndTransportPIDMapDo) Order(conds ...field.Expr) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p packageProductAndTransportPIDMapDo) Distinct(cols ...field.Expr) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p packageProductAndTransportPIDMapDo) Omit(cols ...field.Expr) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p packageProductAndTransportPIDMapDo) Join(table schema.Tabler, on ...field.Expr) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p packageProductAndTransportPIDMapDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p packageProductAndTransportPIDMapDo) RightJoin(table schema.Tabler, on ...field.Expr) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p packageProductAndTransportPIDMapDo) Group(cols ...field.Expr) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p packageProductAndTransportPIDMapDo) Having(conds ...gen.Condition) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p packageProductAndTransportPIDMapDo) Limit(limit int) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p packageProductAndTransportPIDMapDo) Offset(offset int) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p packageProductAndTransportPIDMapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p packageProductAndTransportPIDMapDo) Unscoped() IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Unscoped())
}

func (p packageProductAndTransportPIDMapDo) Create(values ...*coldchain.PackageProductAndTransportPIDMap) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p packageProductAndTransportPIDMapDo) CreateInBatches(values []*coldchain.PackageProductAndTransportPIDMap, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p packageProductAndTransportPIDMapDo) Save(values ...*coldchain.PackageProductAndTransportPIDMap) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p packageProductAndTransportPIDMapDo) First() (*coldchain.PackageProductAndTransportPIDMap, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.PackageProductAndTransportPIDMap), nil
	}
}

func (p packageProductAndTransportPIDMapDo) Take() (*coldchain.PackageProductAndTransportPIDMap, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.PackageProductAndTransportPIDMap), nil
	}
}

func (p packageProductAndTransportPIDMapDo) Last() (*coldchain.PackageProductAndTransportPIDMap, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.PackageProductAndTransportPIDMap), nil
	}
}

func (p packageProductAndTransportPIDMapDo) Find() ([]*coldchain.PackageProductAndTransportPIDMap, error) {
	result, err := p.DO.Find()
	return result.([]*coldchain.PackageProductAndTransportPIDMap), err
}

func (p packageProductAndTransportPIDMapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*coldchain.PackageProductAndTransportPIDMap, err error) {
	buf := make([]*coldchain.PackageProductAndTransportPIDMap, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p packageProductAndTransportPIDMapDo) FindInBatches(result *[]*coldchain.PackageProductAndTransportPIDMap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p packageProductAndTransportPIDMapDo) Attrs(attrs ...field.AssignExpr) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p packageProductAndTransportPIDMapDo) Assign(attrs ...field.AssignExpr) IPackageProductAndTransportPIDMapDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p packageProductAndTransportPIDMapDo) Joins(fields ...field.RelationField) IPackageProductAndTransportPIDMapDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p packageProductAndTransportPIDMapDo) Preload(fields ...field.RelationField) IPackageProductAndTransportPIDMapDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p packageProductAndTransportPIDMapDo) FirstOrInit() (*coldchain.PackageProductAndTransportPIDMap, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.PackageProductAndTransportPIDMap), nil
	}
}

func (p packageProductAndTransportPIDMapDo) FirstOrCreate() (*coldchain.PackageProductAndTransportPIDMap, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.PackageProductAndTransportPIDMap), nil
	}
}

func (p packageProductAndTransportPIDMapDo) FindByPage(offset int, limit int) (result []*coldchain.PackageProductAndTransportPIDMap, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p packageProductAndTransportPIDMapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p packageProductAndTransportPIDMapDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p packageProductAndTransportPIDMapDo) Delete(models ...*coldchain.PackageProductAndTransportPIDMap) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *packageProductAndTransportPIDMapDo) withDO(do gen.Dao) *packageProductAndTransportPIDMapDo {
	p.DO = *do.(*gen.DO)
	return p
}
