// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pack"
	"CN-EU-FSIMS/internal/app/models/warehouse"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPackageHouse(db *gorm.DB, opts ...gen.DOOption) packageHouse {
	_packageHouse := packageHouse{}

	_packageHouse.packageHouseDo.UseDB(db, opts...)
	_packageHouse.packageHouseDo.UseModel(&pack.PackageHouse{})

	tableName := _packageHouse.packageHouseDo.TableName()
	_packageHouse.ALL = field.NewAsterisk(tableName)
	_packageHouse.ID = field.NewUint(tableName, "id")
	_packageHouse.CreatedAt = field.NewTime(tableName, "created_at")
	_packageHouse.UpdatedAt = field.NewTime(tableName, "updated_at")
	_packageHouse.DeletedAt = field.NewField(tableName, "deleted_at")
	_packageHouse.HouseNumber = field.NewString(tableName, "house_number")
	_packageHouse.Name = field.NewString(tableName, "name")
	_packageHouse.Address = field.NewString(tableName, "address")
	_packageHouse.State = field.NewUint(tableName, "state")
	_packageHouse.LegalPerson = field.NewString(tableName, "legal_person")
	_packageHouse.PWRecord = packageHouseHasOnePWRecord{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PWRecord", "warehouse.PackWareHouse"),
	}

	_packageHouse.fillFieldMap()

	return _packageHouse
}

type packageHouse struct {
	packageHouseDo packageHouseDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	HouseNumber field.String
	Name        field.String
	Address     field.String
	State       field.Uint
	LegalPerson field.String
	PWRecord    packageHouseHasOnePWRecord

	fieldMap map[string]field.Expr
}

func (p packageHouse) Table(newTableName string) *packageHouse {
	p.packageHouseDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p packageHouse) As(alias string) *packageHouse {
	p.packageHouseDo.DO = *(p.packageHouseDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *packageHouse) updateTableName(table string) *packageHouse {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.HouseNumber = field.NewString(table, "house_number")
	p.Name = field.NewString(table, "name")
	p.Address = field.NewString(table, "address")
	p.State = field.NewUint(table, "state")
	p.LegalPerson = field.NewString(table, "legal_person")

	p.fillFieldMap()

	return p
}

func (p *packageHouse) WithContext(ctx context.Context) IPackageHouseDo {
	return p.packageHouseDo.WithContext(ctx)
}

func (p packageHouse) TableName() string { return p.packageHouseDo.TableName() }

func (p packageHouse) Alias() string { return p.packageHouseDo.Alias() }

func (p packageHouse) Columns(cols ...field.Expr) gen.Columns {
	return p.packageHouseDo.Columns(cols...)
}

func (p *packageHouse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *packageHouse) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["house_number"] = p.HouseNumber
	p.fieldMap["name"] = p.Name
	p.fieldMap["address"] = p.Address
	p.fieldMap["state"] = p.State
	p.fieldMap["legal_person"] = p.LegalPerson

}

func (p packageHouse) clone(db *gorm.DB) packageHouse {
	p.packageHouseDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p packageHouse) replaceDB(db *gorm.DB) packageHouse {
	p.packageHouseDo.ReplaceDB(db)
	return p
}

type packageHouseHasOnePWRecord struct {
	db *gorm.DB

	field.RelationField
}

func (a packageHouseHasOnePWRecord) Where(conds ...field.Expr) *packageHouseHasOnePWRecord {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a packageHouseHasOnePWRecord) WithContext(ctx context.Context) *packageHouseHasOnePWRecord {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a packageHouseHasOnePWRecord) Session(session *gorm.Session) *packageHouseHasOnePWRecord {
	a.db = a.db.Session(session)
	return &a
}

func (a packageHouseHasOnePWRecord) Model(m *pack.PackageHouse) *packageHouseHasOnePWRecordTx {
	return &packageHouseHasOnePWRecordTx{a.db.Model(m).Association(a.Name())}
}

type packageHouseHasOnePWRecordTx struct{ tx *gorm.Association }

func (a packageHouseHasOnePWRecordTx) Find() (result *warehouse.PackWareHouse, err error) {
	return result, a.tx.Find(&result)
}

func (a packageHouseHasOnePWRecordTx) Append(values ...*warehouse.PackWareHouse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a packageHouseHasOnePWRecordTx) Replace(values ...*warehouse.PackWareHouse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a packageHouseHasOnePWRecordTx) Delete(values ...*warehouse.PackWareHouse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a packageHouseHasOnePWRecordTx) Clear() error {
	return a.tx.Clear()
}

func (a packageHouseHasOnePWRecordTx) Count() int64 {
	return a.tx.Count()
}

type packageHouseDo struct{ gen.DO }

type IPackageHouseDo interface {
	gen.SubQuery
	Debug() IPackageHouseDo
	WithContext(ctx context.Context) IPackageHouseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPackageHouseDo
	WriteDB() IPackageHouseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPackageHouseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPackageHouseDo
	Not(conds ...gen.Condition) IPackageHouseDo
	Or(conds ...gen.Condition) IPackageHouseDo
	Select(conds ...field.Expr) IPackageHouseDo
	Where(conds ...gen.Condition) IPackageHouseDo
	Order(conds ...field.Expr) IPackageHouseDo
	Distinct(cols ...field.Expr) IPackageHouseDo
	Omit(cols ...field.Expr) IPackageHouseDo
	Join(table schema.Tabler, on ...field.Expr) IPackageHouseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPackageHouseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPackageHouseDo
	Group(cols ...field.Expr) IPackageHouseDo
	Having(conds ...gen.Condition) IPackageHouseDo
	Limit(limit int) IPackageHouseDo
	Offset(offset int) IPackageHouseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPackageHouseDo
	Unscoped() IPackageHouseDo
	Create(values ...*pack.PackageHouse) error
	CreateInBatches(values []*pack.PackageHouse, batchSize int) error
	Save(values ...*pack.PackageHouse) error
	First() (*pack.PackageHouse, error)
	Take() (*pack.PackageHouse, error)
	Last() (*pack.PackageHouse, error)
	Find() ([]*pack.PackageHouse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pack.PackageHouse, err error)
	FindInBatches(result *[]*pack.PackageHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pack.PackageHouse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPackageHouseDo
	Assign(attrs ...field.AssignExpr) IPackageHouseDo
	Joins(fields ...field.RelationField) IPackageHouseDo
	Preload(fields ...field.RelationField) IPackageHouseDo
	FirstOrInit() (*pack.PackageHouse, error)
	FirstOrCreate() (*pack.PackageHouse, error)
	FindByPage(offset int, limit int) (result []*pack.PackageHouse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPackageHouseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p packageHouseDo) Debug() IPackageHouseDo {
	return p.withDO(p.DO.Debug())
}

func (p packageHouseDo) WithContext(ctx context.Context) IPackageHouseDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p packageHouseDo) ReadDB() IPackageHouseDo {
	return p.Clauses(dbresolver.Read)
}

func (p packageHouseDo) WriteDB() IPackageHouseDo {
	return p.Clauses(dbresolver.Write)
}

func (p packageHouseDo) Session(config *gorm.Session) IPackageHouseDo {
	return p.withDO(p.DO.Session(config))
}

func (p packageHouseDo) Clauses(conds ...clause.Expression) IPackageHouseDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p packageHouseDo) Returning(value interface{}, columns ...string) IPackageHouseDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p packageHouseDo) Not(conds ...gen.Condition) IPackageHouseDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p packageHouseDo) Or(conds ...gen.Condition) IPackageHouseDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p packageHouseDo) Select(conds ...field.Expr) IPackageHouseDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p packageHouseDo) Where(conds ...gen.Condition) IPackageHouseDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p packageHouseDo) Order(conds ...field.Expr) IPackageHouseDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p packageHouseDo) Distinct(cols ...field.Expr) IPackageHouseDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p packageHouseDo) Omit(cols ...field.Expr) IPackageHouseDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p packageHouseDo) Join(table schema.Tabler, on ...field.Expr) IPackageHouseDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p packageHouseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPackageHouseDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p packageHouseDo) RightJoin(table schema.Tabler, on ...field.Expr) IPackageHouseDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p packageHouseDo) Group(cols ...field.Expr) IPackageHouseDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p packageHouseDo) Having(conds ...gen.Condition) IPackageHouseDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p packageHouseDo) Limit(limit int) IPackageHouseDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p packageHouseDo) Offset(offset int) IPackageHouseDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p packageHouseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPackageHouseDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p packageHouseDo) Unscoped() IPackageHouseDo {
	return p.withDO(p.DO.Unscoped())
}

func (p packageHouseDo) Create(values ...*pack.PackageHouse) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p packageHouseDo) CreateInBatches(values []*pack.PackageHouse, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p packageHouseDo) Save(values ...*pack.PackageHouse) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p packageHouseDo) First() (*pack.PackageHouse, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pack.PackageHouse), nil
	}
}

func (p packageHouseDo) Take() (*pack.PackageHouse, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pack.PackageHouse), nil
	}
}

func (p packageHouseDo) Last() (*pack.PackageHouse, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pack.PackageHouse), nil
	}
}

func (p packageHouseDo) Find() ([]*pack.PackageHouse, error) {
	result, err := p.DO.Find()
	return result.([]*pack.PackageHouse), err
}

func (p packageHouseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pack.PackageHouse, err error) {
	buf := make([]*pack.PackageHouse, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p packageHouseDo) FindInBatches(result *[]*pack.PackageHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p packageHouseDo) Attrs(attrs ...field.AssignExpr) IPackageHouseDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p packageHouseDo) Assign(attrs ...field.AssignExpr) IPackageHouseDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p packageHouseDo) Joins(fields ...field.RelationField) IPackageHouseDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p packageHouseDo) Preload(fields ...field.RelationField) IPackageHouseDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p packageHouseDo) FirstOrInit() (*pack.PackageHouse, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pack.PackageHouse), nil
	}
}

func (p packageHouseDo) FirstOrCreate() (*pack.PackageHouse, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pack.PackageHouse), nil
	}
}

func (p packageHouseDo) FindByPage(offset int, limit int) (result []*pack.PackageHouse, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p packageHouseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p packageHouseDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p packageHouseDo) Delete(models ...*pack.PackageHouse) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *packageHouseDo) withDO(do gen.Dao) *packageHouseDo {
	p.DO = *do.(*gen.DO)
	return p
}
