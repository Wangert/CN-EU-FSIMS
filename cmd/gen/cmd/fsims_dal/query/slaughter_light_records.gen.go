// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSlaughterLightRecord(db *gorm.DB, opts ...gen.DOOption) slaughterLightRecord {
	_slaughterLightRecord := slaughterLightRecord{}

	_slaughterLightRecord.slaughterLightRecordDo.UseDB(db, opts...)
	_slaughterLightRecord.slaughterLightRecordDo.UseModel(&slaughter.SlaughterLightRecord{})

	tableName := _slaughterLightRecord.slaughterLightRecordDo.TableName()
	_slaughterLightRecord.ALL = field.NewAsterisk(tableName)
	_slaughterLightRecord.ID = field.NewUint(tableName, "id")
	_slaughterLightRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_slaughterLightRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slaughterLightRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_slaughterLightRecord.HouseNumber = field.NewString(tableName, "house_number")
	_slaughterLightRecord.TimeRecordAt = field.NewTime(tableName, "time_record_at")
	_slaughterLightRecord.SlaEnvLigRec1 = field.NewFloat32(tableName, "sla_env_lig_rec1")
	_slaughterLightRecord.SlaEnvLigRec2 = field.NewFloat32(tableName, "sla_env_lig_rec2")
	_slaughterLightRecord.SlaEnvLigRec3 = field.NewFloat32(tableName, "sla_env_lig_rec3")
	_slaughterLightRecord.SlaEnvLigRec4 = field.NewFloat32(tableName, "sla_env_lig_rec4")

	_slaughterLightRecord.fillFieldMap()

	return _slaughterLightRecord
}

type slaughterLightRecord struct {
	slaughterLightRecordDo slaughterLightRecordDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	HouseNumber   field.String
	TimeRecordAt  field.Time
	SlaEnvLigRec1 field.Float32
	SlaEnvLigRec2 field.Float32
	SlaEnvLigRec3 field.Float32
	SlaEnvLigRec4 field.Float32

	fieldMap map[string]field.Expr
}

func (s slaughterLightRecord) Table(newTableName string) *slaughterLightRecord {
	s.slaughterLightRecordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slaughterLightRecord) As(alias string) *slaughterLightRecord {
	s.slaughterLightRecordDo.DO = *(s.slaughterLightRecordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slaughterLightRecord) updateTableName(table string) *slaughterLightRecord {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.HouseNumber = field.NewString(table, "house_number")
	s.TimeRecordAt = field.NewTime(table, "time_record_at")
	s.SlaEnvLigRec1 = field.NewFloat32(table, "sla_env_lig_rec1")
	s.SlaEnvLigRec2 = field.NewFloat32(table, "sla_env_lig_rec2")
	s.SlaEnvLigRec3 = field.NewFloat32(table, "sla_env_lig_rec3")
	s.SlaEnvLigRec4 = field.NewFloat32(table, "sla_env_lig_rec4")

	s.fillFieldMap()

	return s
}

func (s *slaughterLightRecord) WithContext(ctx context.Context) ISlaughterLightRecordDo {
	return s.slaughterLightRecordDo.WithContext(ctx)
}

func (s slaughterLightRecord) TableName() string { return s.slaughterLightRecordDo.TableName() }

func (s slaughterLightRecord) Alias() string { return s.slaughterLightRecordDo.Alias() }

func (s slaughterLightRecord) Columns(cols ...field.Expr) gen.Columns {
	return s.slaughterLightRecordDo.Columns(cols...)
}

func (s *slaughterLightRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slaughterLightRecord) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["house_number"] = s.HouseNumber
	s.fieldMap["time_record_at"] = s.TimeRecordAt
	s.fieldMap["sla_env_lig_rec1"] = s.SlaEnvLigRec1
	s.fieldMap["sla_env_lig_rec2"] = s.SlaEnvLigRec2
	s.fieldMap["sla_env_lig_rec3"] = s.SlaEnvLigRec3
	s.fieldMap["sla_env_lig_rec4"] = s.SlaEnvLigRec4
}

func (s slaughterLightRecord) clone(db *gorm.DB) slaughterLightRecord {
	s.slaughterLightRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slaughterLightRecord) replaceDB(db *gorm.DB) slaughterLightRecord {
	s.slaughterLightRecordDo.ReplaceDB(db)
	return s
}

type slaughterLightRecordDo struct{ gen.DO }

type ISlaughterLightRecordDo interface {
	gen.SubQuery
	Debug() ISlaughterLightRecordDo
	WithContext(ctx context.Context) ISlaughterLightRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlaughterLightRecordDo
	WriteDB() ISlaughterLightRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlaughterLightRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlaughterLightRecordDo
	Not(conds ...gen.Condition) ISlaughterLightRecordDo
	Or(conds ...gen.Condition) ISlaughterLightRecordDo
	Select(conds ...field.Expr) ISlaughterLightRecordDo
	Where(conds ...gen.Condition) ISlaughterLightRecordDo
	Order(conds ...field.Expr) ISlaughterLightRecordDo
	Distinct(cols ...field.Expr) ISlaughterLightRecordDo
	Omit(cols ...field.Expr) ISlaughterLightRecordDo
	Join(table schema.Tabler, on ...field.Expr) ISlaughterLightRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterLightRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterLightRecordDo
	Group(cols ...field.Expr) ISlaughterLightRecordDo
	Having(conds ...gen.Condition) ISlaughterLightRecordDo
	Limit(limit int) ISlaughterLightRecordDo
	Offset(offset int) ISlaughterLightRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterLightRecordDo
	Unscoped() ISlaughterLightRecordDo
	Create(values ...*slaughter.SlaughterLightRecord) error
	CreateInBatches(values []*slaughter.SlaughterLightRecord, batchSize int) error
	Save(values ...*slaughter.SlaughterLightRecord) error
	First() (*slaughter.SlaughterLightRecord, error)
	Take() (*slaughter.SlaughterLightRecord, error)
	Last() (*slaughter.SlaughterLightRecord, error)
	Find() ([]*slaughter.SlaughterLightRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.SlaughterLightRecord, err error)
	FindInBatches(result *[]*slaughter.SlaughterLightRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.SlaughterLightRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlaughterLightRecordDo
	Assign(attrs ...field.AssignExpr) ISlaughterLightRecordDo
	Joins(fields ...field.RelationField) ISlaughterLightRecordDo
	Preload(fields ...field.RelationField) ISlaughterLightRecordDo
	FirstOrInit() (*slaughter.SlaughterLightRecord, error)
	FirstOrCreate() (*slaughter.SlaughterLightRecord, error)
	FindByPage(offset int, limit int) (result []*slaughter.SlaughterLightRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlaughterLightRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slaughterLightRecordDo) Debug() ISlaughterLightRecordDo {
	return s.withDO(s.DO.Debug())
}

func (s slaughterLightRecordDo) WithContext(ctx context.Context) ISlaughterLightRecordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slaughterLightRecordDo) ReadDB() ISlaughterLightRecordDo {
	return s.Clauses(dbresolver.Read)
}

func (s slaughterLightRecordDo) WriteDB() ISlaughterLightRecordDo {
	return s.Clauses(dbresolver.Write)
}

func (s slaughterLightRecordDo) Session(config *gorm.Session) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Session(config))
}

func (s slaughterLightRecordDo) Clauses(conds ...clause.Expression) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slaughterLightRecordDo) Returning(value interface{}, columns ...string) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slaughterLightRecordDo) Not(conds ...gen.Condition) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slaughterLightRecordDo) Or(conds ...gen.Condition) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slaughterLightRecordDo) Select(conds ...field.Expr) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slaughterLightRecordDo) Where(conds ...gen.Condition) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slaughterLightRecordDo) Order(conds ...field.Expr) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slaughterLightRecordDo) Distinct(cols ...field.Expr) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slaughterLightRecordDo) Omit(cols ...field.Expr) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slaughterLightRecordDo) Join(table schema.Tabler, on ...field.Expr) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slaughterLightRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterLightRecordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slaughterLightRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterLightRecordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slaughterLightRecordDo) Group(cols ...field.Expr) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slaughterLightRecordDo) Having(conds ...gen.Condition) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slaughterLightRecordDo) Limit(limit int) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slaughterLightRecordDo) Offset(offset int) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slaughterLightRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slaughterLightRecordDo) Unscoped() ISlaughterLightRecordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slaughterLightRecordDo) Create(values ...*slaughter.SlaughterLightRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slaughterLightRecordDo) CreateInBatches(values []*slaughter.SlaughterLightRecord, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slaughterLightRecordDo) Save(values ...*slaughter.SlaughterLightRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slaughterLightRecordDo) First() (*slaughter.SlaughterLightRecord, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterLightRecord), nil
	}
}

func (s slaughterLightRecordDo) Take() (*slaughter.SlaughterLightRecord, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterLightRecord), nil
	}
}

func (s slaughterLightRecordDo) Last() (*slaughter.SlaughterLightRecord, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterLightRecord), nil
	}
}

func (s slaughterLightRecordDo) Find() ([]*slaughter.SlaughterLightRecord, error) {
	result, err := s.DO.Find()
	return result.([]*slaughter.SlaughterLightRecord), err
}

func (s slaughterLightRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.SlaughterLightRecord, err error) {
	buf := make([]*slaughter.SlaughterLightRecord, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slaughterLightRecordDo) FindInBatches(result *[]*slaughter.SlaughterLightRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slaughterLightRecordDo) Attrs(attrs ...field.AssignExpr) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slaughterLightRecordDo) Assign(attrs ...field.AssignExpr) ISlaughterLightRecordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slaughterLightRecordDo) Joins(fields ...field.RelationField) ISlaughterLightRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slaughterLightRecordDo) Preload(fields ...field.RelationField) ISlaughterLightRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slaughterLightRecordDo) FirstOrInit() (*slaughter.SlaughterLightRecord, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterLightRecord), nil
	}
}

func (s slaughterLightRecordDo) FirstOrCreate() (*slaughter.SlaughterLightRecord, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterLightRecord), nil
	}
}

func (s slaughterLightRecordDo) FindByPage(offset int, limit int) (result []*slaughter.SlaughterLightRecord, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slaughterLightRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slaughterLightRecordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slaughterLightRecordDo) Delete(models ...*slaughter.SlaughterLightRecord) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slaughterLightRecordDo) withDO(do gen.Dao) *slaughterLightRecordDo {
	s.DO = *do.(*gen.DO)
	return s
}
