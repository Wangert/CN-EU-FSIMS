// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/product"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMallGood(db *gorm.DB, opts ...gen.DOOption) mallGood {
	_mallGood := mallGood{}

	_mallGood.mallGoodDo.UseDB(db, opts...)
	_mallGood.mallGoodDo.UseModel(&product.MallGood{})

	tableName := _mallGood.mallGoodDo.TableName()
	_mallGood.ALL = field.NewAsterisk(tableName)
	_mallGood.ID = field.NewUint(tableName, "id")
	_mallGood.CreatedAt = field.NewTime(tableName, "created_at")
	_mallGood.UpdatedAt = field.NewTime(tableName, "updated_at")
	_mallGood.DeletedAt = field.NewField(tableName, "deleted_at")
	_mallGood.Number = field.NewString(tableName, "number")
	_mallGood.Type = field.NewInt(tableName, "type")
	_mallGood.TypeName = field.NewString(tableName, "type_name")
	_mallGood.PackMethod = field.NewInt(tableName, "pack_method")
	_mallGood.PackMethodName = field.NewString(tableName, "pack_method_name")
	_mallGood.ProductionDate = field.NewTime(tableName, "production_date")
	_mallGood.ShelfLife = field.NewString(tableName, "shelf_life")
	_mallGood.Weight = field.NewFloat64(tableName, "weight")
	_mallGood.State = field.NewInt(tableName, "state")
	_mallGood.MallNumber = field.NewString(tableName, "mall_number")
	_mallGood.FinalPID = field.NewString(tableName, "final_p_id")
	_mallGood.Checkcode = field.NewString(tableName, "checkcode")
	_mallGood.BuyerIDCard = field.NewString(tableName, "buyer_id_card")

	_mallGood.fillFieldMap()

	return _mallGood
}

type mallGood struct {
	mallGoodDo mallGoodDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	Number         field.String
	Type           field.Int
	TypeName       field.String
	PackMethod     field.Int
	PackMethodName field.String
	ProductionDate field.Time
	ShelfLife      field.String
	Weight         field.Float64
	State          field.Int
	MallNumber     field.String
	FinalPID       field.String
	Checkcode      field.String
	BuyerIDCard    field.String

	fieldMap map[string]field.Expr
}

func (m mallGood) Table(newTableName string) *mallGood {
	m.mallGoodDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mallGood) As(alias string) *mallGood {
	m.mallGoodDo.DO = *(m.mallGoodDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mallGood) updateTableName(table string) *mallGood {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.Number = field.NewString(table, "number")
	m.Type = field.NewInt(table, "type")
	m.TypeName = field.NewString(table, "type_name")
	m.PackMethod = field.NewInt(table, "pack_method")
	m.PackMethodName = field.NewString(table, "pack_method_name")
	m.ProductionDate = field.NewTime(table, "production_date")
	m.ShelfLife = field.NewString(table, "shelf_life")
	m.Weight = field.NewFloat64(table, "weight")
	m.State = field.NewInt(table, "state")
	m.MallNumber = field.NewString(table, "mall_number")
	m.FinalPID = field.NewString(table, "final_p_id")
	m.Checkcode = field.NewString(table, "checkcode")
	m.BuyerIDCard = field.NewString(table, "buyer_id_card")

	m.fillFieldMap()

	return m
}

func (m *mallGood) WithContext(ctx context.Context) IMallGoodDo { return m.mallGoodDo.WithContext(ctx) }

func (m mallGood) TableName() string { return m.mallGoodDo.TableName() }

func (m mallGood) Alias() string { return m.mallGoodDo.Alias() }

func (m mallGood) Columns(cols ...field.Expr) gen.Columns { return m.mallGoodDo.Columns(cols...) }

func (m *mallGood) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mallGood) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 17)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["number"] = m.Number
	m.fieldMap["type"] = m.Type
	m.fieldMap["type_name"] = m.TypeName
	m.fieldMap["pack_method"] = m.PackMethod
	m.fieldMap["pack_method_name"] = m.PackMethodName
	m.fieldMap["production_date"] = m.ProductionDate
	m.fieldMap["shelf_life"] = m.ShelfLife
	m.fieldMap["weight"] = m.Weight
	m.fieldMap["state"] = m.State
	m.fieldMap["mall_number"] = m.MallNumber
	m.fieldMap["final_p_id"] = m.FinalPID
	m.fieldMap["checkcode"] = m.Checkcode
	m.fieldMap["buyer_id_card"] = m.BuyerIDCard
}

func (m mallGood) clone(db *gorm.DB) mallGood {
	m.mallGoodDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mallGood) replaceDB(db *gorm.DB) mallGood {
	m.mallGoodDo.ReplaceDB(db)
	return m
}

type mallGoodDo struct{ gen.DO }

type IMallGoodDo interface {
	gen.SubQuery
	Debug() IMallGoodDo
	WithContext(ctx context.Context) IMallGoodDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMallGoodDo
	WriteDB() IMallGoodDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMallGoodDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMallGoodDo
	Not(conds ...gen.Condition) IMallGoodDo
	Or(conds ...gen.Condition) IMallGoodDo
	Select(conds ...field.Expr) IMallGoodDo
	Where(conds ...gen.Condition) IMallGoodDo
	Order(conds ...field.Expr) IMallGoodDo
	Distinct(cols ...field.Expr) IMallGoodDo
	Omit(cols ...field.Expr) IMallGoodDo
	Join(table schema.Tabler, on ...field.Expr) IMallGoodDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMallGoodDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMallGoodDo
	Group(cols ...field.Expr) IMallGoodDo
	Having(conds ...gen.Condition) IMallGoodDo
	Limit(limit int) IMallGoodDo
	Offset(offset int) IMallGoodDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMallGoodDo
	Unscoped() IMallGoodDo
	Create(values ...*product.MallGood) error
	CreateInBatches(values []*product.MallGood, batchSize int) error
	Save(values ...*product.MallGood) error
	First() (*product.MallGood, error)
	Take() (*product.MallGood, error)
	Last() (*product.MallGood, error)
	Find() ([]*product.MallGood, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*product.MallGood, err error)
	FindInBatches(result *[]*product.MallGood, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*product.MallGood) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMallGoodDo
	Assign(attrs ...field.AssignExpr) IMallGoodDo
	Joins(fields ...field.RelationField) IMallGoodDo
	Preload(fields ...field.RelationField) IMallGoodDo
	FirstOrInit() (*product.MallGood, error)
	FirstOrCreate() (*product.MallGood, error)
	FindByPage(offset int, limit int) (result []*product.MallGood, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMallGoodDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mallGoodDo) Debug() IMallGoodDo {
	return m.withDO(m.DO.Debug())
}

func (m mallGoodDo) WithContext(ctx context.Context) IMallGoodDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mallGoodDo) ReadDB() IMallGoodDo {
	return m.Clauses(dbresolver.Read)
}

func (m mallGoodDo) WriteDB() IMallGoodDo {
	return m.Clauses(dbresolver.Write)
}

func (m mallGoodDo) Session(config *gorm.Session) IMallGoodDo {
	return m.withDO(m.DO.Session(config))
}

func (m mallGoodDo) Clauses(conds ...clause.Expression) IMallGoodDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mallGoodDo) Returning(value interface{}, columns ...string) IMallGoodDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mallGoodDo) Not(conds ...gen.Condition) IMallGoodDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mallGoodDo) Or(conds ...gen.Condition) IMallGoodDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mallGoodDo) Select(conds ...field.Expr) IMallGoodDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mallGoodDo) Where(conds ...gen.Condition) IMallGoodDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mallGoodDo) Order(conds ...field.Expr) IMallGoodDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mallGoodDo) Distinct(cols ...field.Expr) IMallGoodDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mallGoodDo) Omit(cols ...field.Expr) IMallGoodDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mallGoodDo) Join(table schema.Tabler, on ...field.Expr) IMallGoodDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mallGoodDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMallGoodDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mallGoodDo) RightJoin(table schema.Tabler, on ...field.Expr) IMallGoodDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mallGoodDo) Group(cols ...field.Expr) IMallGoodDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mallGoodDo) Having(conds ...gen.Condition) IMallGoodDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mallGoodDo) Limit(limit int) IMallGoodDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mallGoodDo) Offset(offset int) IMallGoodDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mallGoodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMallGoodDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mallGoodDo) Unscoped() IMallGoodDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mallGoodDo) Create(values ...*product.MallGood) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mallGoodDo) CreateInBatches(values []*product.MallGood, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mallGoodDo) Save(values ...*product.MallGood) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mallGoodDo) First() (*product.MallGood, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*product.MallGood), nil
	}
}

func (m mallGoodDo) Take() (*product.MallGood, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*product.MallGood), nil
	}
}

func (m mallGoodDo) Last() (*product.MallGood, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*product.MallGood), nil
	}
}

func (m mallGoodDo) Find() ([]*product.MallGood, error) {
	result, err := m.DO.Find()
	return result.([]*product.MallGood), err
}

func (m mallGoodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*product.MallGood, err error) {
	buf := make([]*product.MallGood, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mallGoodDo) FindInBatches(result *[]*product.MallGood, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mallGoodDo) Attrs(attrs ...field.AssignExpr) IMallGoodDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mallGoodDo) Assign(attrs ...field.AssignExpr) IMallGoodDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mallGoodDo) Joins(fields ...field.RelationField) IMallGoodDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mallGoodDo) Preload(fields ...field.RelationField) IMallGoodDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mallGoodDo) FirstOrInit() (*product.MallGood, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*product.MallGood), nil
	}
}

func (m mallGoodDo) FirstOrCreate() (*product.MallGood, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*product.MallGood), nil
	}
}

func (m mallGoodDo) FindByPage(offset int, limit int) (result []*product.MallGood, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mallGoodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mallGoodDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mallGoodDo) Delete(models ...*product.MallGood) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mallGoodDo) withDO(do gen.Dao) *mallGoodDo {
	m.DO = *do.(*gen.DO)
	return m
}
