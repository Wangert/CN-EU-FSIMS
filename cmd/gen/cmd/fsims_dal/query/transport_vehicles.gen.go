// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/coldchain"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTransportVehicle(db *gorm.DB, opts ...gen.DOOption) transportVehicle {
	_transportVehicle := transportVehicle{}

	_transportVehicle.transportVehicleDo.UseDB(db, opts...)
	_transportVehicle.transportVehicleDo.UseModel(&coldchain.TransportVehicle{})

	tableName := _transportVehicle.transportVehicleDo.TableName()
	_transportVehicle.ALL = field.NewAsterisk(tableName)
	_transportVehicle.ID = field.NewUint(tableName, "id")
	_transportVehicle.CreatedAt = field.NewTime(tableName, "created_at")
	_transportVehicle.UpdatedAt = field.NewTime(tableName, "updated_at")
	_transportVehicle.DeletedAt = field.NewField(tableName, "deleted_at")
	_transportVehicle.TVNumber = field.NewString(tableName, "tv_number")
	_transportVehicle.LicenseNumber = field.NewString(tableName, "license_number")
	_transportVehicle.Driver = field.NewString(tableName, "driver")
	_transportVehicle.DriverPhone = field.NewString(tableName, "driver_phone")
	_transportVehicle.State = field.NewUint(tableName, "state")

	_transportVehicle.fillFieldMap()

	return _transportVehicle
}

type transportVehicle struct {
	transportVehicleDo transportVehicleDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	TVNumber      field.String
	LicenseNumber field.String
	Driver        field.String
	DriverPhone   field.String
	State         field.Uint

	fieldMap map[string]field.Expr
}

func (t transportVehicle) Table(newTableName string) *transportVehicle {
	t.transportVehicleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transportVehicle) As(alias string) *transportVehicle {
	t.transportVehicleDo.DO = *(t.transportVehicleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transportVehicle) updateTableName(table string) *transportVehicle {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.TVNumber = field.NewString(table, "tv_number")
	t.LicenseNumber = field.NewString(table, "license_number")
	t.Driver = field.NewString(table, "driver")
	t.DriverPhone = field.NewString(table, "driver_phone")
	t.State = field.NewUint(table, "state")

	t.fillFieldMap()

	return t
}

func (t *transportVehicle) WithContext(ctx context.Context) ITransportVehicleDo {
	return t.transportVehicleDo.WithContext(ctx)
}

func (t transportVehicle) TableName() string { return t.transportVehicleDo.TableName() }

func (t transportVehicle) Alias() string { return t.transportVehicleDo.Alias() }

func (t transportVehicle) Columns(cols ...field.Expr) gen.Columns {
	return t.transportVehicleDo.Columns(cols...)
}

func (t *transportVehicle) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transportVehicle) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["tv_number"] = t.TVNumber
	t.fieldMap["license_number"] = t.LicenseNumber
	t.fieldMap["driver"] = t.Driver
	t.fieldMap["driver_phone"] = t.DriverPhone
	t.fieldMap["state"] = t.State
}

func (t transportVehicle) clone(db *gorm.DB) transportVehicle {
	t.transportVehicleDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transportVehicle) replaceDB(db *gorm.DB) transportVehicle {
	t.transportVehicleDo.ReplaceDB(db)
	return t
}

type transportVehicleDo struct{ gen.DO }

type ITransportVehicleDo interface {
	gen.SubQuery
	Debug() ITransportVehicleDo
	WithContext(ctx context.Context) ITransportVehicleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransportVehicleDo
	WriteDB() ITransportVehicleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransportVehicleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransportVehicleDo
	Not(conds ...gen.Condition) ITransportVehicleDo
	Or(conds ...gen.Condition) ITransportVehicleDo
	Select(conds ...field.Expr) ITransportVehicleDo
	Where(conds ...gen.Condition) ITransportVehicleDo
	Order(conds ...field.Expr) ITransportVehicleDo
	Distinct(cols ...field.Expr) ITransportVehicleDo
	Omit(cols ...field.Expr) ITransportVehicleDo
	Join(table schema.Tabler, on ...field.Expr) ITransportVehicleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransportVehicleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransportVehicleDo
	Group(cols ...field.Expr) ITransportVehicleDo
	Having(conds ...gen.Condition) ITransportVehicleDo
	Limit(limit int) ITransportVehicleDo
	Offset(offset int) ITransportVehicleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransportVehicleDo
	Unscoped() ITransportVehicleDo
	Create(values ...*coldchain.TransportVehicle) error
	CreateInBatches(values []*coldchain.TransportVehicle, batchSize int) error
	Save(values ...*coldchain.TransportVehicle) error
	First() (*coldchain.TransportVehicle, error)
	Take() (*coldchain.TransportVehicle, error)
	Last() (*coldchain.TransportVehicle, error)
	Find() ([]*coldchain.TransportVehicle, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*coldchain.TransportVehicle, err error)
	FindInBatches(result *[]*coldchain.TransportVehicle, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*coldchain.TransportVehicle) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransportVehicleDo
	Assign(attrs ...field.AssignExpr) ITransportVehicleDo
	Joins(fields ...field.RelationField) ITransportVehicleDo
	Preload(fields ...field.RelationField) ITransportVehicleDo
	FirstOrInit() (*coldchain.TransportVehicle, error)
	FirstOrCreate() (*coldchain.TransportVehicle, error)
	FindByPage(offset int, limit int) (result []*coldchain.TransportVehicle, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransportVehicleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transportVehicleDo) Debug() ITransportVehicleDo {
	return t.withDO(t.DO.Debug())
}

func (t transportVehicleDo) WithContext(ctx context.Context) ITransportVehicleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transportVehicleDo) ReadDB() ITransportVehicleDo {
	return t.Clauses(dbresolver.Read)
}

func (t transportVehicleDo) WriteDB() ITransportVehicleDo {
	return t.Clauses(dbresolver.Write)
}

func (t transportVehicleDo) Session(config *gorm.Session) ITransportVehicleDo {
	return t.withDO(t.DO.Session(config))
}

func (t transportVehicleDo) Clauses(conds ...clause.Expression) ITransportVehicleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transportVehicleDo) Returning(value interface{}, columns ...string) ITransportVehicleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transportVehicleDo) Not(conds ...gen.Condition) ITransportVehicleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transportVehicleDo) Or(conds ...gen.Condition) ITransportVehicleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transportVehicleDo) Select(conds ...field.Expr) ITransportVehicleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transportVehicleDo) Where(conds ...gen.Condition) ITransportVehicleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transportVehicleDo) Order(conds ...field.Expr) ITransportVehicleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transportVehicleDo) Distinct(cols ...field.Expr) ITransportVehicleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transportVehicleDo) Omit(cols ...field.Expr) ITransportVehicleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transportVehicleDo) Join(table schema.Tabler, on ...field.Expr) ITransportVehicleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transportVehicleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransportVehicleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transportVehicleDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransportVehicleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transportVehicleDo) Group(cols ...field.Expr) ITransportVehicleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transportVehicleDo) Having(conds ...gen.Condition) ITransportVehicleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transportVehicleDo) Limit(limit int) ITransportVehicleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transportVehicleDo) Offset(offset int) ITransportVehicleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transportVehicleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransportVehicleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transportVehicleDo) Unscoped() ITransportVehicleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transportVehicleDo) Create(values ...*coldchain.TransportVehicle) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transportVehicleDo) CreateInBatches(values []*coldchain.TransportVehicle, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transportVehicleDo) Save(values ...*coldchain.TransportVehicle) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transportVehicleDo) First() (*coldchain.TransportVehicle, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.TransportVehicle), nil
	}
}

func (t transportVehicleDo) Take() (*coldchain.TransportVehicle, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.TransportVehicle), nil
	}
}

func (t transportVehicleDo) Last() (*coldchain.TransportVehicle, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.TransportVehicle), nil
	}
}

func (t transportVehicleDo) Find() ([]*coldchain.TransportVehicle, error) {
	result, err := t.DO.Find()
	return result.([]*coldchain.TransportVehicle), err
}

func (t transportVehicleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*coldchain.TransportVehicle, err error) {
	buf := make([]*coldchain.TransportVehicle, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transportVehicleDo) FindInBatches(result *[]*coldchain.TransportVehicle, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transportVehicleDo) Attrs(attrs ...field.AssignExpr) ITransportVehicleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transportVehicleDo) Assign(attrs ...field.AssignExpr) ITransportVehicleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transportVehicleDo) Joins(fields ...field.RelationField) ITransportVehicleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transportVehicleDo) Preload(fields ...field.RelationField) ITransportVehicleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transportVehicleDo) FirstOrInit() (*coldchain.TransportVehicle, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.TransportVehicle), nil
	}
}

func (t transportVehicleDo) FirstOrCreate() (*coldchain.TransportVehicle, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.TransportVehicle), nil
	}
}

func (t transportVehicleDo) FindByPage(offset int, limit int) (result []*coldchain.TransportVehicle, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transportVehicleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transportVehicleDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transportVehicleDo) Delete(models ...*coldchain.TransportVehicle) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transportVehicleDo) withDO(do gen.Dao) *transportVehicleDo {
	t.DO = *do.(*gen.DO)
	return t
}
