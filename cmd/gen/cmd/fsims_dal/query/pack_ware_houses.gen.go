// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/warehouse"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPackWareHouse(db *gorm.DB, opts ...gen.DOOption) packWareHouse {
	_packWareHouse := packWareHouse{}

	_packWareHouse.packWareHouseDo.UseDB(db, opts...)
	_packWareHouse.packWareHouseDo.UseModel(&warehouse.PackWareHouse{})

	tableName := _packWareHouse.packWareHouseDo.TableName()
	_packWareHouse.ALL = field.NewAsterisk(tableName)
	_packWareHouse.ID = field.NewUint(tableName, "id")
	_packWareHouse.CreatedAt = field.NewTime(tableName, "created_at")
	_packWareHouse.UpdatedAt = field.NewTime(tableName, "updated_at")
	_packWareHouse.DeletedAt = field.NewField(tableName, "deleted_at")
	_packWareHouse.ProductNumber = field.NewString(tableName, "product_number")
	_packWareHouse.ProductPID = field.NewString(tableName, "product_p_id")
	_packWareHouse.ProductType = field.NewString(tableName, "product_type")
	_packWareHouse.State = field.NewUint(tableName, "state")
	_packWareHouse.InOperator = field.NewString(tableName, "in_operator")
	_packWareHouse.InTimestamp = field.NewTime(tableName, "in_timestamp")
	_packWareHouse.OutTimestamp = field.NewTime(tableName, "out_timestamp")
	_packWareHouse.HouseNumber = field.NewString(tableName, "house_number")

	_packWareHouse.fillFieldMap()

	return _packWareHouse
}

type packWareHouse struct {
	packWareHouseDo packWareHouseDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ProductNumber field.String
	ProductPID    field.String
	ProductType   field.String
	State         field.Uint
	InOperator    field.String
	InTimestamp   field.Time
	OutTimestamp  field.Time
	HouseNumber   field.String

	fieldMap map[string]field.Expr
}

func (p packWareHouse) Table(newTableName string) *packWareHouse {
	p.packWareHouseDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p packWareHouse) As(alias string) *packWareHouse {
	p.packWareHouseDo.DO = *(p.packWareHouseDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *packWareHouse) updateTableName(table string) *packWareHouse {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ProductNumber = field.NewString(table, "product_number")
	p.ProductPID = field.NewString(table, "product_p_id")
	p.ProductType = field.NewString(table, "product_type")
	p.State = field.NewUint(table, "state")
	p.InOperator = field.NewString(table, "in_operator")
	p.InTimestamp = field.NewTime(table, "in_timestamp")
	p.OutTimestamp = field.NewTime(table, "out_timestamp")
	p.HouseNumber = field.NewString(table, "house_number")

	p.fillFieldMap()

	return p
}

func (p *packWareHouse) WithContext(ctx context.Context) IPackWareHouseDo {
	return p.packWareHouseDo.WithContext(ctx)
}

func (p packWareHouse) TableName() string { return p.packWareHouseDo.TableName() }

func (p packWareHouse) Alias() string { return p.packWareHouseDo.Alias() }

func (p packWareHouse) Columns(cols ...field.Expr) gen.Columns {
	return p.packWareHouseDo.Columns(cols...)
}

func (p *packWareHouse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *packWareHouse) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["product_number"] = p.ProductNumber
	p.fieldMap["product_p_id"] = p.ProductPID
	p.fieldMap["product_type"] = p.ProductType
	p.fieldMap["state"] = p.State
	p.fieldMap["in_operator"] = p.InOperator
	p.fieldMap["in_timestamp"] = p.InTimestamp
	p.fieldMap["out_timestamp"] = p.OutTimestamp
	p.fieldMap["house_number"] = p.HouseNumber
}

func (p packWareHouse) clone(db *gorm.DB) packWareHouse {
	p.packWareHouseDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p packWareHouse) replaceDB(db *gorm.DB) packWareHouse {
	p.packWareHouseDo.ReplaceDB(db)
	return p
}

type packWareHouseDo struct{ gen.DO }

type IPackWareHouseDo interface {
	gen.SubQuery
	Debug() IPackWareHouseDo
	WithContext(ctx context.Context) IPackWareHouseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPackWareHouseDo
	WriteDB() IPackWareHouseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPackWareHouseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPackWareHouseDo
	Not(conds ...gen.Condition) IPackWareHouseDo
	Or(conds ...gen.Condition) IPackWareHouseDo
	Select(conds ...field.Expr) IPackWareHouseDo
	Where(conds ...gen.Condition) IPackWareHouseDo
	Order(conds ...field.Expr) IPackWareHouseDo
	Distinct(cols ...field.Expr) IPackWareHouseDo
	Omit(cols ...field.Expr) IPackWareHouseDo
	Join(table schema.Tabler, on ...field.Expr) IPackWareHouseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPackWareHouseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPackWareHouseDo
	Group(cols ...field.Expr) IPackWareHouseDo
	Having(conds ...gen.Condition) IPackWareHouseDo
	Limit(limit int) IPackWareHouseDo
	Offset(offset int) IPackWareHouseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPackWareHouseDo
	Unscoped() IPackWareHouseDo
	Create(values ...*warehouse.PackWareHouse) error
	CreateInBatches(values []*warehouse.PackWareHouse, batchSize int) error
	Save(values ...*warehouse.PackWareHouse) error
	First() (*warehouse.PackWareHouse, error)
	Take() (*warehouse.PackWareHouse, error)
	Last() (*warehouse.PackWareHouse, error)
	Find() ([]*warehouse.PackWareHouse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.PackWareHouse, err error)
	FindInBatches(result *[]*warehouse.PackWareHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*warehouse.PackWareHouse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPackWareHouseDo
	Assign(attrs ...field.AssignExpr) IPackWareHouseDo
	Joins(fields ...field.RelationField) IPackWareHouseDo
	Preload(fields ...field.RelationField) IPackWareHouseDo
	FirstOrInit() (*warehouse.PackWareHouse, error)
	FirstOrCreate() (*warehouse.PackWareHouse, error)
	FindByPage(offset int, limit int) (result []*warehouse.PackWareHouse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPackWareHouseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p packWareHouseDo) Debug() IPackWareHouseDo {
	return p.withDO(p.DO.Debug())
}

func (p packWareHouseDo) WithContext(ctx context.Context) IPackWareHouseDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p packWareHouseDo) ReadDB() IPackWareHouseDo {
	return p.Clauses(dbresolver.Read)
}

func (p packWareHouseDo) WriteDB() IPackWareHouseDo {
	return p.Clauses(dbresolver.Write)
}

func (p packWareHouseDo) Session(config *gorm.Session) IPackWareHouseDo {
	return p.withDO(p.DO.Session(config))
}

func (p packWareHouseDo) Clauses(conds ...clause.Expression) IPackWareHouseDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p packWareHouseDo) Returning(value interface{}, columns ...string) IPackWareHouseDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p packWareHouseDo) Not(conds ...gen.Condition) IPackWareHouseDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p packWareHouseDo) Or(conds ...gen.Condition) IPackWareHouseDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p packWareHouseDo) Select(conds ...field.Expr) IPackWareHouseDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p packWareHouseDo) Where(conds ...gen.Condition) IPackWareHouseDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p packWareHouseDo) Order(conds ...field.Expr) IPackWareHouseDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p packWareHouseDo) Distinct(cols ...field.Expr) IPackWareHouseDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p packWareHouseDo) Omit(cols ...field.Expr) IPackWareHouseDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p packWareHouseDo) Join(table schema.Tabler, on ...field.Expr) IPackWareHouseDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p packWareHouseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPackWareHouseDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p packWareHouseDo) RightJoin(table schema.Tabler, on ...field.Expr) IPackWareHouseDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p packWareHouseDo) Group(cols ...field.Expr) IPackWareHouseDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p packWareHouseDo) Having(conds ...gen.Condition) IPackWareHouseDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p packWareHouseDo) Limit(limit int) IPackWareHouseDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p packWareHouseDo) Offset(offset int) IPackWareHouseDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p packWareHouseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPackWareHouseDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p packWareHouseDo) Unscoped() IPackWareHouseDo {
	return p.withDO(p.DO.Unscoped())
}

func (p packWareHouseDo) Create(values ...*warehouse.PackWareHouse) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p packWareHouseDo) CreateInBatches(values []*warehouse.PackWareHouse, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p packWareHouseDo) Save(values ...*warehouse.PackWareHouse) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p packWareHouseDo) First() (*warehouse.PackWareHouse, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PackWareHouse), nil
	}
}

func (p packWareHouseDo) Take() (*warehouse.PackWareHouse, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PackWareHouse), nil
	}
}

func (p packWareHouseDo) Last() (*warehouse.PackWareHouse, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PackWareHouse), nil
	}
}

func (p packWareHouseDo) Find() ([]*warehouse.PackWareHouse, error) {
	result, err := p.DO.Find()
	return result.([]*warehouse.PackWareHouse), err
}

func (p packWareHouseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.PackWareHouse, err error) {
	buf := make([]*warehouse.PackWareHouse, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p packWareHouseDo) FindInBatches(result *[]*warehouse.PackWareHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p packWareHouseDo) Attrs(attrs ...field.AssignExpr) IPackWareHouseDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p packWareHouseDo) Assign(attrs ...field.AssignExpr) IPackWareHouseDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p packWareHouseDo) Joins(fields ...field.RelationField) IPackWareHouseDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p packWareHouseDo) Preload(fields ...field.RelationField) IPackWareHouseDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p packWareHouseDo) FirstOrInit() (*warehouse.PackWareHouse, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PackWareHouse), nil
	}
}

func (p packWareHouseDo) FirstOrCreate() (*warehouse.PackWareHouse, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PackWareHouse), nil
	}
}

func (p packWareHouseDo) FindByPage(offset int, limit int) (result []*warehouse.PackWareHouse, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p packWareHouseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p packWareHouseDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p packWareHouseDo) Delete(models ...*warehouse.PackWareHouse) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *packWareHouseDo) withDO(do gen.Dao) *packWareHouseDo {
	p.DO = *do.(*gen.DO)
	return p
}
