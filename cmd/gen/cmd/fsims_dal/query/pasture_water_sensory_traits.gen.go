// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureWaterSensoryTraits(db *gorm.DB, opts ...gen.DOOption) pastureWaterSensoryTraits {
	_pastureWaterSensoryTraits := pastureWaterSensoryTraits{}

	_pastureWaterSensoryTraits.pastureWaterSensoryTraitsDo.UseDB(db, opts...)
	_pastureWaterSensoryTraits.pastureWaterSensoryTraitsDo.UseModel(&pasture.PastureWaterSensoryTraits{})

	tableName := _pastureWaterSensoryTraits.pastureWaterSensoryTraitsDo.TableName()
	_pastureWaterSensoryTraits.ALL = field.NewAsterisk(tableName)
	_pastureWaterSensoryTraits.ID = field.NewUint(tableName, "id")
	_pastureWaterSensoryTraits.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureWaterSensoryTraits.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureWaterSensoryTraits.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureWaterSensoryTraits.Color = field.NewUint(tableName, "color")
	_pastureWaterSensoryTraits.Turbidity = field.NewUint(tableName, "turbidity")
	_pastureWaterSensoryTraits.Smell = field.NewString(tableName, "smell")
	_pastureWaterSensoryTraits.PH = field.NewUint(tableName, "ph")
	_pastureWaterSensoryTraits.Hardness = field.NewUint(tableName, "hardness")
	_pastureWaterSensoryTraits.DissolvedSolid = field.NewUint(tableName, "dissolved_solid")
	_pastureWaterSensoryTraits.PastureWaterID = field.NewUint(tableName, "pasture_water_id")

	_pastureWaterSensoryTraits.fillFieldMap()

	return _pastureWaterSensoryTraits
}

type pastureWaterSensoryTraits struct {
	pastureWaterSensoryTraitsDo pastureWaterSensoryTraitsDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	Color          field.Uint
	Turbidity      field.Uint
	Smell          field.String
	PH             field.Uint
	Hardness       field.Uint
	DissolvedSolid field.Uint
	PastureWaterID field.Uint

	fieldMap map[string]field.Expr
}

func (p pastureWaterSensoryTraits) Table(newTableName string) *pastureWaterSensoryTraits {
	p.pastureWaterSensoryTraitsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureWaterSensoryTraits) As(alias string) *pastureWaterSensoryTraits {
	p.pastureWaterSensoryTraitsDo.DO = *(p.pastureWaterSensoryTraitsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureWaterSensoryTraits) updateTableName(table string) *pastureWaterSensoryTraits {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Color = field.NewUint(table, "color")
	p.Turbidity = field.NewUint(table, "turbidity")
	p.Smell = field.NewString(table, "smell")
	p.PH = field.NewUint(table, "ph")
	p.Hardness = field.NewUint(table, "hardness")
	p.DissolvedSolid = field.NewUint(table, "dissolved_solid")
	p.PastureWaterID = field.NewUint(table, "pasture_water_id")

	p.fillFieldMap()

	return p
}

func (p *pastureWaterSensoryTraits) WithContext(ctx context.Context) IPastureWaterSensoryTraitsDo {
	return p.pastureWaterSensoryTraitsDo.WithContext(ctx)
}

func (p pastureWaterSensoryTraits) TableName() string {
	return p.pastureWaterSensoryTraitsDo.TableName()
}

func (p pastureWaterSensoryTraits) Alias() string { return p.pastureWaterSensoryTraitsDo.Alias() }

func (p pastureWaterSensoryTraits) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureWaterSensoryTraitsDo.Columns(cols...)
}

func (p *pastureWaterSensoryTraits) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureWaterSensoryTraits) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["color"] = p.Color
	p.fieldMap["turbidity"] = p.Turbidity
	p.fieldMap["smell"] = p.Smell
	p.fieldMap["ph"] = p.PH
	p.fieldMap["hardness"] = p.Hardness
	p.fieldMap["dissolved_solid"] = p.DissolvedSolid
	p.fieldMap["pasture_water_id"] = p.PastureWaterID
}

func (p pastureWaterSensoryTraits) clone(db *gorm.DB) pastureWaterSensoryTraits {
	p.pastureWaterSensoryTraitsDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureWaterSensoryTraits) replaceDB(db *gorm.DB) pastureWaterSensoryTraits {
	p.pastureWaterSensoryTraitsDo.ReplaceDB(db)
	return p
}

type pastureWaterSensoryTraitsDo struct{ gen.DO }

type IPastureWaterSensoryTraitsDo interface {
	gen.SubQuery
	Debug() IPastureWaterSensoryTraitsDo
	WithContext(ctx context.Context) IPastureWaterSensoryTraitsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureWaterSensoryTraitsDo
	WriteDB() IPastureWaterSensoryTraitsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureWaterSensoryTraitsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureWaterSensoryTraitsDo
	Not(conds ...gen.Condition) IPastureWaterSensoryTraitsDo
	Or(conds ...gen.Condition) IPastureWaterSensoryTraitsDo
	Select(conds ...field.Expr) IPastureWaterSensoryTraitsDo
	Where(conds ...gen.Condition) IPastureWaterSensoryTraitsDo
	Order(conds ...field.Expr) IPastureWaterSensoryTraitsDo
	Distinct(cols ...field.Expr) IPastureWaterSensoryTraitsDo
	Omit(cols ...field.Expr) IPastureWaterSensoryTraitsDo
	Join(table schema.Tabler, on ...field.Expr) IPastureWaterSensoryTraitsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterSensoryTraitsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterSensoryTraitsDo
	Group(cols ...field.Expr) IPastureWaterSensoryTraitsDo
	Having(conds ...gen.Condition) IPastureWaterSensoryTraitsDo
	Limit(limit int) IPastureWaterSensoryTraitsDo
	Offset(offset int) IPastureWaterSensoryTraitsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterSensoryTraitsDo
	Unscoped() IPastureWaterSensoryTraitsDo
	Create(values ...*pasture.PastureWaterSensoryTraits) error
	CreateInBatches(values []*pasture.PastureWaterSensoryTraits, batchSize int) error
	Save(values ...*pasture.PastureWaterSensoryTraits) error
	First() (*pasture.PastureWaterSensoryTraits, error)
	Take() (*pasture.PastureWaterSensoryTraits, error)
	Last() (*pasture.PastureWaterSensoryTraits, error)
	Find() ([]*pasture.PastureWaterSensoryTraits, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWaterSensoryTraits, err error)
	FindInBatches(result *[]*pasture.PastureWaterSensoryTraits, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureWaterSensoryTraits) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureWaterSensoryTraitsDo
	Assign(attrs ...field.AssignExpr) IPastureWaterSensoryTraitsDo
	Joins(fields ...field.RelationField) IPastureWaterSensoryTraitsDo
	Preload(fields ...field.RelationField) IPastureWaterSensoryTraitsDo
	FirstOrInit() (*pasture.PastureWaterSensoryTraits, error)
	FirstOrCreate() (*pasture.PastureWaterSensoryTraits, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureWaterSensoryTraits, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureWaterSensoryTraitsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureWaterSensoryTraitsDo) Debug() IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureWaterSensoryTraitsDo) WithContext(ctx context.Context) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureWaterSensoryTraitsDo) ReadDB() IPastureWaterSensoryTraitsDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureWaterSensoryTraitsDo) WriteDB() IPastureWaterSensoryTraitsDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureWaterSensoryTraitsDo) Session(config *gorm.Session) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureWaterSensoryTraitsDo) Clauses(conds ...clause.Expression) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureWaterSensoryTraitsDo) Returning(value interface{}, columns ...string) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureWaterSensoryTraitsDo) Not(conds ...gen.Condition) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureWaterSensoryTraitsDo) Or(conds ...gen.Condition) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureWaterSensoryTraitsDo) Select(conds ...field.Expr) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureWaterSensoryTraitsDo) Where(conds ...gen.Condition) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureWaterSensoryTraitsDo) Order(conds ...field.Expr) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureWaterSensoryTraitsDo) Distinct(cols ...field.Expr) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureWaterSensoryTraitsDo) Omit(cols ...field.Expr) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureWaterSensoryTraitsDo) Join(table schema.Tabler, on ...field.Expr) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureWaterSensoryTraitsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureWaterSensoryTraitsDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureWaterSensoryTraitsDo) Group(cols ...field.Expr) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureWaterSensoryTraitsDo) Having(conds ...gen.Condition) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureWaterSensoryTraitsDo) Limit(limit int) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureWaterSensoryTraitsDo) Offset(offset int) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureWaterSensoryTraitsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureWaterSensoryTraitsDo) Unscoped() IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureWaterSensoryTraitsDo) Create(values ...*pasture.PastureWaterSensoryTraits) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureWaterSensoryTraitsDo) CreateInBatches(values []*pasture.PastureWaterSensoryTraits, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureWaterSensoryTraitsDo) Save(values ...*pasture.PastureWaterSensoryTraits) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureWaterSensoryTraitsDo) First() (*pasture.PastureWaterSensoryTraits, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterSensoryTraits), nil
	}
}

func (p pastureWaterSensoryTraitsDo) Take() (*pasture.PastureWaterSensoryTraits, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterSensoryTraits), nil
	}
}

func (p pastureWaterSensoryTraitsDo) Last() (*pasture.PastureWaterSensoryTraits, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterSensoryTraits), nil
	}
}

func (p pastureWaterSensoryTraitsDo) Find() ([]*pasture.PastureWaterSensoryTraits, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureWaterSensoryTraits), err
}

func (p pastureWaterSensoryTraitsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWaterSensoryTraits, err error) {
	buf := make([]*pasture.PastureWaterSensoryTraits, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureWaterSensoryTraitsDo) FindInBatches(result *[]*pasture.PastureWaterSensoryTraits, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureWaterSensoryTraitsDo) Attrs(attrs ...field.AssignExpr) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureWaterSensoryTraitsDo) Assign(attrs ...field.AssignExpr) IPastureWaterSensoryTraitsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureWaterSensoryTraitsDo) Joins(fields ...field.RelationField) IPastureWaterSensoryTraitsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureWaterSensoryTraitsDo) Preload(fields ...field.RelationField) IPastureWaterSensoryTraitsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureWaterSensoryTraitsDo) FirstOrInit() (*pasture.PastureWaterSensoryTraits, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterSensoryTraits), nil
	}
}

func (p pastureWaterSensoryTraitsDo) FirstOrCreate() (*pasture.PastureWaterSensoryTraits, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterSensoryTraits), nil
	}
}

func (p pastureWaterSensoryTraitsDo) FindByPage(offset int, limit int) (result []*pasture.PastureWaterSensoryTraits, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureWaterSensoryTraitsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureWaterSensoryTraitsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureWaterSensoryTraitsDo) Delete(models ...*pasture.PastureWaterSensoryTraits) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureWaterSensoryTraitsDo) withDO(do gen.Dao) *pastureWaterSensoryTraitsDo {
	p.DO = *do.(*gen.DO)
	return p
}
