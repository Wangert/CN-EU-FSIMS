// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureTruckDisinfectionRecord(db *gorm.DB, opts ...gen.DOOption) pastureTruckDisinfectionRecord {
	_pastureTruckDisinfectionRecord := pastureTruckDisinfectionRecord{}

	_pastureTruckDisinfectionRecord.pastureTruckDisinfectionRecordDo.UseDB(db, opts...)
	_pastureTruckDisinfectionRecord.pastureTruckDisinfectionRecordDo.UseModel(&pasture.PastureTruckDisinfectionRecord{})

	tableName := _pastureTruckDisinfectionRecord.pastureTruckDisinfectionRecordDo.TableName()
	_pastureTruckDisinfectionRecord.ALL = field.NewAsterisk(tableName)
	_pastureTruckDisinfectionRecord.ID = field.NewUint(tableName, "id")
	_pastureTruckDisinfectionRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureTruckDisinfectionRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureTruckDisinfectionRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureTruckDisinfectionRecord.Method = field.NewString(tableName, "method")
	_pastureTruckDisinfectionRecord.Concentration = field.NewUint(tableName, "concentration")
	_pastureTruckDisinfectionRecord.Duration = field.NewUint64(tableName, "duration")

	_pastureTruckDisinfectionRecord.fillFieldMap()

	return _pastureTruckDisinfectionRecord
}

type pastureTruckDisinfectionRecord struct {
	pastureTruckDisinfectionRecordDo pastureTruckDisinfectionRecordDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Method        field.String
	Concentration field.Uint
	Duration      field.Uint64

	fieldMap map[string]field.Expr
}

func (p pastureTruckDisinfectionRecord) Table(newTableName string) *pastureTruckDisinfectionRecord {
	p.pastureTruckDisinfectionRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureTruckDisinfectionRecord) As(alias string) *pastureTruckDisinfectionRecord {
	p.pastureTruckDisinfectionRecordDo.DO = *(p.pastureTruckDisinfectionRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureTruckDisinfectionRecord) updateTableName(table string) *pastureTruckDisinfectionRecord {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Method = field.NewString(table, "method")
	p.Concentration = field.NewUint(table, "concentration")
	p.Duration = field.NewUint64(table, "duration")

	p.fillFieldMap()

	return p
}

func (p *pastureTruckDisinfectionRecord) WithContext(ctx context.Context) IPastureTruckDisinfectionRecordDo {
	return p.pastureTruckDisinfectionRecordDo.WithContext(ctx)
}

func (p pastureTruckDisinfectionRecord) TableName() string {
	return p.pastureTruckDisinfectionRecordDo.TableName()
}

func (p pastureTruckDisinfectionRecord) Alias() string {
	return p.pastureTruckDisinfectionRecordDo.Alias()
}

func (p pastureTruckDisinfectionRecord) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureTruckDisinfectionRecordDo.Columns(cols...)
}

func (p *pastureTruckDisinfectionRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureTruckDisinfectionRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["method"] = p.Method
	p.fieldMap["concentration"] = p.Concentration
	p.fieldMap["duration"] = p.Duration
}

func (p pastureTruckDisinfectionRecord) clone(db *gorm.DB) pastureTruckDisinfectionRecord {
	p.pastureTruckDisinfectionRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureTruckDisinfectionRecord) replaceDB(db *gorm.DB) pastureTruckDisinfectionRecord {
	p.pastureTruckDisinfectionRecordDo.ReplaceDB(db)
	return p
}

type pastureTruckDisinfectionRecordDo struct{ gen.DO }

type IPastureTruckDisinfectionRecordDo interface {
	gen.SubQuery
	Debug() IPastureTruckDisinfectionRecordDo
	WithContext(ctx context.Context) IPastureTruckDisinfectionRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureTruckDisinfectionRecordDo
	WriteDB() IPastureTruckDisinfectionRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureTruckDisinfectionRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureTruckDisinfectionRecordDo
	Not(conds ...gen.Condition) IPastureTruckDisinfectionRecordDo
	Or(conds ...gen.Condition) IPastureTruckDisinfectionRecordDo
	Select(conds ...field.Expr) IPastureTruckDisinfectionRecordDo
	Where(conds ...gen.Condition) IPastureTruckDisinfectionRecordDo
	Order(conds ...field.Expr) IPastureTruckDisinfectionRecordDo
	Distinct(cols ...field.Expr) IPastureTruckDisinfectionRecordDo
	Omit(cols ...field.Expr) IPastureTruckDisinfectionRecordDo
	Join(table schema.Tabler, on ...field.Expr) IPastureTruckDisinfectionRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureTruckDisinfectionRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureTruckDisinfectionRecordDo
	Group(cols ...field.Expr) IPastureTruckDisinfectionRecordDo
	Having(conds ...gen.Condition) IPastureTruckDisinfectionRecordDo
	Limit(limit int) IPastureTruckDisinfectionRecordDo
	Offset(offset int) IPastureTruckDisinfectionRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureTruckDisinfectionRecordDo
	Unscoped() IPastureTruckDisinfectionRecordDo
	Create(values ...*pasture.PastureTruckDisinfectionRecord) error
	CreateInBatches(values []*pasture.PastureTruckDisinfectionRecord, batchSize int) error
	Save(values ...*pasture.PastureTruckDisinfectionRecord) error
	First() (*pasture.PastureTruckDisinfectionRecord, error)
	Take() (*pasture.PastureTruckDisinfectionRecord, error)
	Last() (*pasture.PastureTruckDisinfectionRecord, error)
	Find() ([]*pasture.PastureTruckDisinfectionRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureTruckDisinfectionRecord, err error)
	FindInBatches(result *[]*pasture.PastureTruckDisinfectionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureTruckDisinfectionRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureTruckDisinfectionRecordDo
	Assign(attrs ...field.AssignExpr) IPastureTruckDisinfectionRecordDo
	Joins(fields ...field.RelationField) IPastureTruckDisinfectionRecordDo
	Preload(fields ...field.RelationField) IPastureTruckDisinfectionRecordDo
	FirstOrInit() (*pasture.PastureTruckDisinfectionRecord, error)
	FirstOrCreate() (*pasture.PastureTruckDisinfectionRecord, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureTruckDisinfectionRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureTruckDisinfectionRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureTruckDisinfectionRecordDo) Debug() IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureTruckDisinfectionRecordDo) WithContext(ctx context.Context) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureTruckDisinfectionRecordDo) ReadDB() IPastureTruckDisinfectionRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureTruckDisinfectionRecordDo) WriteDB() IPastureTruckDisinfectionRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureTruckDisinfectionRecordDo) Session(config *gorm.Session) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureTruckDisinfectionRecordDo) Clauses(conds ...clause.Expression) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureTruckDisinfectionRecordDo) Returning(value interface{}, columns ...string) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureTruckDisinfectionRecordDo) Not(conds ...gen.Condition) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureTruckDisinfectionRecordDo) Or(conds ...gen.Condition) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureTruckDisinfectionRecordDo) Select(conds ...field.Expr) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureTruckDisinfectionRecordDo) Where(conds ...gen.Condition) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureTruckDisinfectionRecordDo) Order(conds ...field.Expr) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureTruckDisinfectionRecordDo) Distinct(cols ...field.Expr) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureTruckDisinfectionRecordDo) Omit(cols ...field.Expr) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureTruckDisinfectionRecordDo) Join(table schema.Tabler, on ...field.Expr) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureTruckDisinfectionRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureTruckDisinfectionRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureTruckDisinfectionRecordDo) Group(cols ...field.Expr) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureTruckDisinfectionRecordDo) Having(conds ...gen.Condition) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureTruckDisinfectionRecordDo) Limit(limit int) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureTruckDisinfectionRecordDo) Offset(offset int) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureTruckDisinfectionRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureTruckDisinfectionRecordDo) Unscoped() IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureTruckDisinfectionRecordDo) Create(values ...*pasture.PastureTruckDisinfectionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureTruckDisinfectionRecordDo) CreateInBatches(values []*pasture.PastureTruckDisinfectionRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureTruckDisinfectionRecordDo) Save(values ...*pasture.PastureTruckDisinfectionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureTruckDisinfectionRecordDo) First() (*pasture.PastureTruckDisinfectionRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureTruckDisinfectionRecord), nil
	}
}

func (p pastureTruckDisinfectionRecordDo) Take() (*pasture.PastureTruckDisinfectionRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureTruckDisinfectionRecord), nil
	}
}

func (p pastureTruckDisinfectionRecordDo) Last() (*pasture.PastureTruckDisinfectionRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureTruckDisinfectionRecord), nil
	}
}

func (p pastureTruckDisinfectionRecordDo) Find() ([]*pasture.PastureTruckDisinfectionRecord, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureTruckDisinfectionRecord), err
}

func (p pastureTruckDisinfectionRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureTruckDisinfectionRecord, err error) {
	buf := make([]*pasture.PastureTruckDisinfectionRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureTruckDisinfectionRecordDo) FindInBatches(result *[]*pasture.PastureTruckDisinfectionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureTruckDisinfectionRecordDo) Attrs(attrs ...field.AssignExpr) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureTruckDisinfectionRecordDo) Assign(attrs ...field.AssignExpr) IPastureTruckDisinfectionRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureTruckDisinfectionRecordDo) Joins(fields ...field.RelationField) IPastureTruckDisinfectionRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureTruckDisinfectionRecordDo) Preload(fields ...field.RelationField) IPastureTruckDisinfectionRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureTruckDisinfectionRecordDo) FirstOrInit() (*pasture.PastureTruckDisinfectionRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureTruckDisinfectionRecord), nil
	}
}

func (p pastureTruckDisinfectionRecordDo) FirstOrCreate() (*pasture.PastureTruckDisinfectionRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureTruckDisinfectionRecord), nil
	}
}

func (p pastureTruckDisinfectionRecordDo) FindByPage(offset int, limit int) (result []*pasture.PastureTruckDisinfectionRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureTruckDisinfectionRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureTruckDisinfectionRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureTruckDisinfectionRecordDo) Delete(models ...*pasture.PastureTruckDisinfectionRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureTruckDisinfectionRecordDo) withDO(do gen.Dao) *pastureTruckDisinfectionRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
