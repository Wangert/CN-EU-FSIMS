// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/warehouse"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSlaughterWareHouse(db *gorm.DB, opts ...gen.DOOption) slaughterWareHouse {
	_slaughterWareHouse := slaughterWareHouse{}

	_slaughterWareHouse.slaughterWareHouseDo.UseDB(db, opts...)
	_slaughterWareHouse.slaughterWareHouseDo.UseModel(&warehouse.SlaughterWareHouse{})

	tableName := _slaughterWareHouse.slaughterWareHouseDo.TableName()
	_slaughterWareHouse.ALL = field.NewAsterisk(tableName)
	_slaughterWareHouse.ID = field.NewUint(tableName, "id")
	_slaughterWareHouse.CreatedAt = field.NewTime(tableName, "created_at")
	_slaughterWareHouse.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slaughterWareHouse.DeletedAt = field.NewField(tableName, "deleted_at")
	_slaughterWareHouse.ProductNumber = field.NewString(tableName, "product_number")
	_slaughterWareHouse.ProductPID = field.NewString(tableName, "product_p_id")
	_slaughterWareHouse.ProductType = field.NewString(tableName, "product_type")
	_slaughterWareHouse.State = field.NewUint(tableName, "state")
	_slaughterWareHouse.InOperator = field.NewString(tableName, "in_operator")
	_slaughterWareHouse.OutOperator = field.NewString(tableName, "out_operator")
	_slaughterWareHouse.Destination = field.NewString(tableName, "destination")
	_slaughterWareHouse.InTimestamp = field.NewTime(tableName, "in_timestamp")
	_slaughterWareHouse.OutTimestamp = field.NewTime(tableName, "out_timestamp")

	_slaughterWareHouse.fillFieldMap()

	return _slaughterWareHouse
}

type slaughterWareHouse struct {
	slaughterWareHouseDo slaughterWareHouseDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ProductNumber field.String
	ProductPID    field.String
	ProductType   field.String
	State         field.Uint
	InOperator    field.String
	OutOperator   field.String
	Destination   field.String
	InTimestamp   field.Time
	OutTimestamp  field.Time

	fieldMap map[string]field.Expr
}

func (s slaughterWareHouse) Table(newTableName string) *slaughterWareHouse {
	s.slaughterWareHouseDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slaughterWareHouse) As(alias string) *slaughterWareHouse {
	s.slaughterWareHouseDo.DO = *(s.slaughterWareHouseDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slaughterWareHouse) updateTableName(table string) *slaughterWareHouse {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.ProductNumber = field.NewString(table, "product_number")
	s.ProductPID = field.NewString(table, "product_p_id")
	s.ProductType = field.NewString(table, "product_type")
	s.State = field.NewUint(table, "state")
	s.InOperator = field.NewString(table, "in_operator")
	s.OutOperator = field.NewString(table, "out_operator")
	s.Destination = field.NewString(table, "destination")
	s.InTimestamp = field.NewTime(table, "in_timestamp")
	s.OutTimestamp = field.NewTime(table, "out_timestamp")

	s.fillFieldMap()

	return s
}

func (s *slaughterWareHouse) WithContext(ctx context.Context) ISlaughterWareHouseDo {
	return s.slaughterWareHouseDo.WithContext(ctx)
}

func (s slaughterWareHouse) TableName() string { return s.slaughterWareHouseDo.TableName() }

func (s slaughterWareHouse) Alias() string { return s.slaughterWareHouseDo.Alias() }

func (s slaughterWareHouse) Columns(cols ...field.Expr) gen.Columns {
	return s.slaughterWareHouseDo.Columns(cols...)
}

func (s *slaughterWareHouse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slaughterWareHouse) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["product_number"] = s.ProductNumber
	s.fieldMap["product_p_id"] = s.ProductPID
	s.fieldMap["product_type"] = s.ProductType
	s.fieldMap["state"] = s.State
	s.fieldMap["in_operator"] = s.InOperator
	s.fieldMap["out_operator"] = s.OutOperator
	s.fieldMap["destination"] = s.Destination
	s.fieldMap["in_timestamp"] = s.InTimestamp
	s.fieldMap["out_timestamp"] = s.OutTimestamp
}

func (s slaughterWareHouse) clone(db *gorm.DB) slaughterWareHouse {
	s.slaughterWareHouseDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slaughterWareHouse) replaceDB(db *gorm.DB) slaughterWareHouse {
	s.slaughterWareHouseDo.ReplaceDB(db)
	return s
}

type slaughterWareHouseDo struct{ gen.DO }

type ISlaughterWareHouseDo interface {
	gen.SubQuery
	Debug() ISlaughterWareHouseDo
	WithContext(ctx context.Context) ISlaughterWareHouseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlaughterWareHouseDo
	WriteDB() ISlaughterWareHouseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlaughterWareHouseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlaughterWareHouseDo
	Not(conds ...gen.Condition) ISlaughterWareHouseDo
	Or(conds ...gen.Condition) ISlaughterWareHouseDo
	Select(conds ...field.Expr) ISlaughterWareHouseDo
	Where(conds ...gen.Condition) ISlaughterWareHouseDo
	Order(conds ...field.Expr) ISlaughterWareHouseDo
	Distinct(cols ...field.Expr) ISlaughterWareHouseDo
	Omit(cols ...field.Expr) ISlaughterWareHouseDo
	Join(table schema.Tabler, on ...field.Expr) ISlaughterWareHouseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterWareHouseDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterWareHouseDo
	Group(cols ...field.Expr) ISlaughterWareHouseDo
	Having(conds ...gen.Condition) ISlaughterWareHouseDo
	Limit(limit int) ISlaughterWareHouseDo
	Offset(offset int) ISlaughterWareHouseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterWareHouseDo
	Unscoped() ISlaughterWareHouseDo
	Create(values ...*warehouse.SlaughterWareHouse) error
	CreateInBatches(values []*warehouse.SlaughterWareHouse, batchSize int) error
	Save(values ...*warehouse.SlaughterWareHouse) error
	First() (*warehouse.SlaughterWareHouse, error)
	Take() (*warehouse.SlaughterWareHouse, error)
	Last() (*warehouse.SlaughterWareHouse, error)
	Find() ([]*warehouse.SlaughterWareHouse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.SlaughterWareHouse, err error)
	FindInBatches(result *[]*warehouse.SlaughterWareHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*warehouse.SlaughterWareHouse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlaughterWareHouseDo
	Assign(attrs ...field.AssignExpr) ISlaughterWareHouseDo
	Joins(fields ...field.RelationField) ISlaughterWareHouseDo
	Preload(fields ...field.RelationField) ISlaughterWareHouseDo
	FirstOrInit() (*warehouse.SlaughterWareHouse, error)
	FirstOrCreate() (*warehouse.SlaughterWareHouse, error)
	FindByPage(offset int, limit int) (result []*warehouse.SlaughterWareHouse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlaughterWareHouseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slaughterWareHouseDo) Debug() ISlaughterWareHouseDo {
	return s.withDO(s.DO.Debug())
}

func (s slaughterWareHouseDo) WithContext(ctx context.Context) ISlaughterWareHouseDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slaughterWareHouseDo) ReadDB() ISlaughterWareHouseDo {
	return s.Clauses(dbresolver.Read)
}

func (s slaughterWareHouseDo) WriteDB() ISlaughterWareHouseDo {
	return s.Clauses(dbresolver.Write)
}

func (s slaughterWareHouseDo) Session(config *gorm.Session) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Session(config))
}

func (s slaughterWareHouseDo) Clauses(conds ...clause.Expression) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slaughterWareHouseDo) Returning(value interface{}, columns ...string) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slaughterWareHouseDo) Not(conds ...gen.Condition) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slaughterWareHouseDo) Or(conds ...gen.Condition) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slaughterWareHouseDo) Select(conds ...field.Expr) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slaughterWareHouseDo) Where(conds ...gen.Condition) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slaughterWareHouseDo) Order(conds ...field.Expr) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slaughterWareHouseDo) Distinct(cols ...field.Expr) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slaughterWareHouseDo) Omit(cols ...field.Expr) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slaughterWareHouseDo) Join(table schema.Tabler, on ...field.Expr) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slaughterWareHouseDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterWareHouseDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slaughterWareHouseDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterWareHouseDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slaughterWareHouseDo) Group(cols ...field.Expr) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slaughterWareHouseDo) Having(conds ...gen.Condition) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slaughterWareHouseDo) Limit(limit int) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slaughterWareHouseDo) Offset(offset int) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slaughterWareHouseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slaughterWareHouseDo) Unscoped() ISlaughterWareHouseDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slaughterWareHouseDo) Create(values ...*warehouse.SlaughterWareHouse) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slaughterWareHouseDo) CreateInBatches(values []*warehouse.SlaughterWareHouse, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slaughterWareHouseDo) Save(values ...*warehouse.SlaughterWareHouse) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slaughterWareHouseDo) First() (*warehouse.SlaughterWareHouse, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterWareHouse), nil
	}
}

func (s slaughterWareHouseDo) Take() (*warehouse.SlaughterWareHouse, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterWareHouse), nil
	}
}

func (s slaughterWareHouseDo) Last() (*warehouse.SlaughterWareHouse, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterWareHouse), nil
	}
}

func (s slaughterWareHouseDo) Find() ([]*warehouse.SlaughterWareHouse, error) {
	result, err := s.DO.Find()
	return result.([]*warehouse.SlaughterWareHouse), err
}

func (s slaughterWareHouseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.SlaughterWareHouse, err error) {
	buf := make([]*warehouse.SlaughterWareHouse, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slaughterWareHouseDo) FindInBatches(result *[]*warehouse.SlaughterWareHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slaughterWareHouseDo) Attrs(attrs ...field.AssignExpr) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slaughterWareHouseDo) Assign(attrs ...field.AssignExpr) ISlaughterWareHouseDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slaughterWareHouseDo) Joins(fields ...field.RelationField) ISlaughterWareHouseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slaughterWareHouseDo) Preload(fields ...field.RelationField) ISlaughterWareHouseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slaughterWareHouseDo) FirstOrInit() (*warehouse.SlaughterWareHouse, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterWareHouse), nil
	}
}

func (s slaughterWareHouseDo) FirstOrCreate() (*warehouse.SlaughterWareHouse, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterWareHouse), nil
	}
}

func (s slaughterWareHouseDo) FindByPage(offset int, limit int) (result []*warehouse.SlaughterWareHouse, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slaughterWareHouseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slaughterWareHouseDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slaughterWareHouseDo) Delete(models ...*warehouse.SlaughterWareHouse) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slaughterWareHouseDo) withDO(do gen.Dao) *slaughterWareHouseDo {
	s.DO = *do.(*gen.DO)
	return s
}
