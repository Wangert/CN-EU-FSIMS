// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureFodder(db *gorm.DB, opts ...gen.DOOption) pastureFodder {
	_pastureFodder := pastureFodder{}

	_pastureFodder.pastureFodderDo.UseDB(db, opts...)
	_pastureFodder.pastureFodderDo.UseModel(&pasture.PastureFodder{})

	tableName := _pastureFodder.pastureFodderDo.TableName()
	_pastureFodder.ALL = field.NewAsterisk(tableName)
	_pastureFodder.ID = field.NewUint(tableName, "id")
	_pastureFodder.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureFodder.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureFodder.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureFodder.PasPID = field.NewString(tableName, "pas_p_id")
	_pastureFodder.PhysicalHazard = pastureFodderHasOnePhysicalHazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PhysicalHazard", "pasture.PastureFodderPhysicalHazard"),
	}

	_pastureFodder.Biohazard = pastureFodderHasOneBiohazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Biohazard", "pasture.PastureFodderBiohazard"),
	}

	_pastureFodder.fillFieldMap()

	return _pastureFodder
}

type pastureFodder struct {
	pastureFodderDo pastureFodderDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	PasPID         field.String
	PhysicalHazard pastureFodderHasOnePhysicalHazard

	Biohazard pastureFodderHasOneBiohazard

	fieldMap map[string]field.Expr
}

func (p pastureFodder) Table(newTableName string) *pastureFodder {
	p.pastureFodderDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureFodder) As(alias string) *pastureFodder {
	p.pastureFodderDo.DO = *(p.pastureFodderDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureFodder) updateTableName(table string) *pastureFodder {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PasPID = field.NewString(table, "pas_p_id")

	p.fillFieldMap()

	return p
}

func (p *pastureFodder) WithContext(ctx context.Context) IPastureFodderDo {
	return p.pastureFodderDo.WithContext(ctx)
}

func (p pastureFodder) TableName() string { return p.pastureFodderDo.TableName() }

func (p pastureFodder) Alias() string { return p.pastureFodderDo.Alias() }

func (p pastureFodder) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureFodderDo.Columns(cols...)
}

func (p *pastureFodder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureFodder) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["pas_p_id"] = p.PasPID

}

func (p pastureFodder) clone(db *gorm.DB) pastureFodder {
	p.pastureFodderDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureFodder) replaceDB(db *gorm.DB) pastureFodder {
	p.pastureFodderDo.ReplaceDB(db)
	return p
}

type pastureFodderHasOnePhysicalHazard struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFodderHasOnePhysicalHazard) Where(conds ...field.Expr) *pastureFodderHasOnePhysicalHazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFodderHasOnePhysicalHazard) WithContext(ctx context.Context) *pastureFodderHasOnePhysicalHazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFodderHasOnePhysicalHazard) Session(session *gorm.Session) *pastureFodderHasOnePhysicalHazard {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFodderHasOnePhysicalHazard) Model(m *pasture.PastureFodder) *pastureFodderHasOnePhysicalHazardTx {
	return &pastureFodderHasOnePhysicalHazardTx{a.db.Model(m).Association(a.Name())}
}

type pastureFodderHasOnePhysicalHazardTx struct{ tx *gorm.Association }

func (a pastureFodderHasOnePhysicalHazardTx) Find() (result *pasture.PastureFodderPhysicalHazard, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFodderHasOnePhysicalHazardTx) Append(values ...*pasture.PastureFodderPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFodderHasOnePhysicalHazardTx) Replace(values ...*pasture.PastureFodderPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFodderHasOnePhysicalHazardTx) Delete(values ...*pasture.PastureFodderPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFodderHasOnePhysicalHazardTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFodderHasOnePhysicalHazardTx) Count() int64 {
	return a.tx.Count()
}

type pastureFodderHasOneBiohazard struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFodderHasOneBiohazard) Where(conds ...field.Expr) *pastureFodderHasOneBiohazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFodderHasOneBiohazard) WithContext(ctx context.Context) *pastureFodderHasOneBiohazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFodderHasOneBiohazard) Session(session *gorm.Session) *pastureFodderHasOneBiohazard {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFodderHasOneBiohazard) Model(m *pasture.PastureFodder) *pastureFodderHasOneBiohazardTx {
	return &pastureFodderHasOneBiohazardTx{a.db.Model(m).Association(a.Name())}
}

type pastureFodderHasOneBiohazardTx struct{ tx *gorm.Association }

func (a pastureFodderHasOneBiohazardTx) Find() (result *pasture.PastureFodderBiohazard, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFodderHasOneBiohazardTx) Append(values ...*pasture.PastureFodderBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFodderHasOneBiohazardTx) Replace(values ...*pasture.PastureFodderBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFodderHasOneBiohazardTx) Delete(values ...*pasture.PastureFodderBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFodderHasOneBiohazardTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFodderHasOneBiohazardTx) Count() int64 {
	return a.tx.Count()
}

type pastureFodderDo struct{ gen.DO }

type IPastureFodderDo interface {
	gen.SubQuery
	Debug() IPastureFodderDo
	WithContext(ctx context.Context) IPastureFodderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureFodderDo
	WriteDB() IPastureFodderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureFodderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureFodderDo
	Not(conds ...gen.Condition) IPastureFodderDo
	Or(conds ...gen.Condition) IPastureFodderDo
	Select(conds ...field.Expr) IPastureFodderDo
	Where(conds ...gen.Condition) IPastureFodderDo
	Order(conds ...field.Expr) IPastureFodderDo
	Distinct(cols ...field.Expr) IPastureFodderDo
	Omit(cols ...field.Expr) IPastureFodderDo
	Join(table schema.Tabler, on ...field.Expr) IPastureFodderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFodderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureFodderDo
	Group(cols ...field.Expr) IPastureFodderDo
	Having(conds ...gen.Condition) IPastureFodderDo
	Limit(limit int) IPastureFodderDo
	Offset(offset int) IPastureFodderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFodderDo
	Unscoped() IPastureFodderDo
	Create(values ...*pasture.PastureFodder) error
	CreateInBatches(values []*pasture.PastureFodder, batchSize int) error
	Save(values ...*pasture.PastureFodder) error
	First() (*pasture.PastureFodder, error)
	Take() (*pasture.PastureFodder, error)
	Last() (*pasture.PastureFodder, error)
	Find() ([]*pasture.PastureFodder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFodder, err error)
	FindInBatches(result *[]*pasture.PastureFodder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureFodder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureFodderDo
	Assign(attrs ...field.AssignExpr) IPastureFodderDo
	Joins(fields ...field.RelationField) IPastureFodderDo
	Preload(fields ...field.RelationField) IPastureFodderDo
	FirstOrInit() (*pasture.PastureFodder, error)
	FirstOrCreate() (*pasture.PastureFodder, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureFodder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureFodderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureFodderDo) Debug() IPastureFodderDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureFodderDo) WithContext(ctx context.Context) IPastureFodderDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureFodderDo) ReadDB() IPastureFodderDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureFodderDo) WriteDB() IPastureFodderDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureFodderDo) Session(config *gorm.Session) IPastureFodderDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureFodderDo) Clauses(conds ...clause.Expression) IPastureFodderDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureFodderDo) Returning(value interface{}, columns ...string) IPastureFodderDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureFodderDo) Not(conds ...gen.Condition) IPastureFodderDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureFodderDo) Or(conds ...gen.Condition) IPastureFodderDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureFodderDo) Select(conds ...field.Expr) IPastureFodderDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureFodderDo) Where(conds ...gen.Condition) IPastureFodderDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureFodderDo) Order(conds ...field.Expr) IPastureFodderDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureFodderDo) Distinct(cols ...field.Expr) IPastureFodderDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureFodderDo) Omit(cols ...field.Expr) IPastureFodderDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureFodderDo) Join(table schema.Tabler, on ...field.Expr) IPastureFodderDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureFodderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFodderDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureFodderDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureFodderDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureFodderDo) Group(cols ...field.Expr) IPastureFodderDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureFodderDo) Having(conds ...gen.Condition) IPastureFodderDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureFodderDo) Limit(limit int) IPastureFodderDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureFodderDo) Offset(offset int) IPastureFodderDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureFodderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFodderDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureFodderDo) Unscoped() IPastureFodderDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureFodderDo) Create(values ...*pasture.PastureFodder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureFodderDo) CreateInBatches(values []*pasture.PastureFodder, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureFodderDo) Save(values ...*pasture.PastureFodder) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureFodderDo) First() (*pasture.PastureFodder, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodder), nil
	}
}

func (p pastureFodderDo) Take() (*pasture.PastureFodder, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodder), nil
	}
}

func (p pastureFodderDo) Last() (*pasture.PastureFodder, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodder), nil
	}
}

func (p pastureFodderDo) Find() ([]*pasture.PastureFodder, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureFodder), err
}

func (p pastureFodderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFodder, err error) {
	buf := make([]*pasture.PastureFodder, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureFodderDo) FindInBatches(result *[]*pasture.PastureFodder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureFodderDo) Attrs(attrs ...field.AssignExpr) IPastureFodderDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureFodderDo) Assign(attrs ...field.AssignExpr) IPastureFodderDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureFodderDo) Joins(fields ...field.RelationField) IPastureFodderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureFodderDo) Preload(fields ...field.RelationField) IPastureFodderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureFodderDo) FirstOrInit() (*pasture.PastureFodder, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodder), nil
	}
}

func (p pastureFodderDo) FirstOrCreate() (*pasture.PastureFodder, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodder), nil
	}
}

func (p pastureFodderDo) FindByPage(offset int, limit int) (result []*pasture.PastureFodder, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureFodderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureFodderDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureFodderDo) Delete(models ...*pasture.PastureFodder) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureFodderDo) withDO(do gen.Dao) *pastureFodderDo {
	p.DO = *do.(*gen.DO)
	return p
}
