// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/fatten"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFattenWaterChemicalHazard(db *gorm.DB, opts ...gen.DOOption) fattenWaterChemicalHazard {
	_fattenWaterChemicalHazard := fattenWaterChemicalHazard{}

	_fattenWaterChemicalHazard.fattenWaterChemicalHazardDo.UseDB(db, opts...)
	_fattenWaterChemicalHazard.fattenWaterChemicalHazardDo.UseModel(&fatten.FattenWaterChemicalHazard{})

	tableName := _fattenWaterChemicalHazard.fattenWaterChemicalHazardDo.TableName()
	_fattenWaterChemicalHazard.ALL = field.NewAsterisk(tableName)
	_fattenWaterChemicalHazard.ID = field.NewUint(tableName, "id")
	_fattenWaterChemicalHazard.CreatedAt = field.NewTime(tableName, "created_at")
	_fattenWaterChemicalHazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fattenWaterChemicalHazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_fattenWaterChemicalHazard.Fluoride = field.NewFloat32(tableName, "fluoride")
	_fattenWaterChemicalHazard.Cyanide = field.NewFloat32(tableName, "cyanide")
	_fattenWaterChemicalHazard.Chloride = field.NewFloat32(tableName, "chloride")
	_fattenWaterChemicalHazard.Nitrate = field.NewFloat32(tableName, "nitrate")
	_fattenWaterChemicalHazard.Sulfate = field.NewFloat32(tableName, "sulfate")
	_fattenWaterChemicalHazard.Sixsixsix = field.NewFloat32(tableName, "sixsixsix")
	_fattenWaterChemicalHazard.DDT = field.NewFloat32(tableName, "ddt")
	_fattenWaterChemicalHazard.AmmoniaNitrogen = field.NewFloat32(tableName, "ammonia_nitrogen")
	_fattenWaterChemicalHazard.FattenWaterID = field.NewUint(tableName, "fatten_water_id")

	_fattenWaterChemicalHazard.fillFieldMap()

	return _fattenWaterChemicalHazard
}

type fattenWaterChemicalHazard struct {
	fattenWaterChemicalHazardDo fattenWaterChemicalHazardDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	Fluoride        field.Float32
	Cyanide         field.Float32
	Chloride        field.Float32
	Nitrate         field.Float32
	Sulfate         field.Float32
	Sixsixsix       field.Float32
	DDT             field.Float32
	AmmoniaNitrogen field.Float32
	FattenWaterID   field.Uint

	fieldMap map[string]field.Expr
}

func (f fattenWaterChemicalHazard) Table(newTableName string) *fattenWaterChemicalHazard {
	f.fattenWaterChemicalHazardDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fattenWaterChemicalHazard) As(alias string) *fattenWaterChemicalHazard {
	f.fattenWaterChemicalHazardDo.DO = *(f.fattenWaterChemicalHazardDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fattenWaterChemicalHazard) updateTableName(table string) *fattenWaterChemicalHazard {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.Fluoride = field.NewFloat32(table, "fluoride")
	f.Cyanide = field.NewFloat32(table, "cyanide")
	f.Chloride = field.NewFloat32(table, "chloride")
	f.Nitrate = field.NewFloat32(table, "nitrate")
	f.Sulfate = field.NewFloat32(table, "sulfate")
	f.Sixsixsix = field.NewFloat32(table, "sixsixsix")
	f.DDT = field.NewFloat32(table, "ddt")
	f.AmmoniaNitrogen = field.NewFloat32(table, "ammonia_nitrogen")
	f.FattenWaterID = field.NewUint(table, "fatten_water_id")

	f.fillFieldMap()

	return f
}

func (f *fattenWaterChemicalHazard) WithContext(ctx context.Context) IFattenWaterChemicalHazardDo {
	return f.fattenWaterChemicalHazardDo.WithContext(ctx)
}

func (f fattenWaterChemicalHazard) TableName() string {
	return f.fattenWaterChemicalHazardDo.TableName()
}

func (f fattenWaterChemicalHazard) Alias() string { return f.fattenWaterChemicalHazardDo.Alias() }

func (f fattenWaterChemicalHazard) Columns(cols ...field.Expr) gen.Columns {
	return f.fattenWaterChemicalHazardDo.Columns(cols...)
}

func (f *fattenWaterChemicalHazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fattenWaterChemicalHazard) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 13)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["fluoride"] = f.Fluoride
	f.fieldMap["cyanide"] = f.Cyanide
	f.fieldMap["chloride"] = f.Chloride
	f.fieldMap["nitrate"] = f.Nitrate
	f.fieldMap["sulfate"] = f.Sulfate
	f.fieldMap["sixsixsix"] = f.Sixsixsix
	f.fieldMap["ddt"] = f.DDT
	f.fieldMap["ammonia_nitrogen"] = f.AmmoniaNitrogen
	f.fieldMap["fatten_water_id"] = f.FattenWaterID
}

func (f fattenWaterChemicalHazard) clone(db *gorm.DB) fattenWaterChemicalHazard {
	f.fattenWaterChemicalHazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fattenWaterChemicalHazard) replaceDB(db *gorm.DB) fattenWaterChemicalHazard {
	f.fattenWaterChemicalHazardDo.ReplaceDB(db)
	return f
}

type fattenWaterChemicalHazardDo struct{ gen.DO }

type IFattenWaterChemicalHazardDo interface {
	gen.SubQuery
	Debug() IFattenWaterChemicalHazardDo
	WithContext(ctx context.Context) IFattenWaterChemicalHazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFattenWaterChemicalHazardDo
	WriteDB() IFattenWaterChemicalHazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFattenWaterChemicalHazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFattenWaterChemicalHazardDo
	Not(conds ...gen.Condition) IFattenWaterChemicalHazardDo
	Or(conds ...gen.Condition) IFattenWaterChemicalHazardDo
	Select(conds ...field.Expr) IFattenWaterChemicalHazardDo
	Where(conds ...gen.Condition) IFattenWaterChemicalHazardDo
	Order(conds ...field.Expr) IFattenWaterChemicalHazardDo
	Distinct(cols ...field.Expr) IFattenWaterChemicalHazardDo
	Omit(cols ...field.Expr) IFattenWaterChemicalHazardDo
	Join(table schema.Tabler, on ...field.Expr) IFattenWaterChemicalHazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFattenWaterChemicalHazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFattenWaterChemicalHazardDo
	Group(cols ...field.Expr) IFattenWaterChemicalHazardDo
	Having(conds ...gen.Condition) IFattenWaterChemicalHazardDo
	Limit(limit int) IFattenWaterChemicalHazardDo
	Offset(offset int) IFattenWaterChemicalHazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenWaterChemicalHazardDo
	Unscoped() IFattenWaterChemicalHazardDo
	Create(values ...*fatten.FattenWaterChemicalHazard) error
	CreateInBatches(values []*fatten.FattenWaterChemicalHazard, batchSize int) error
	Save(values ...*fatten.FattenWaterChemicalHazard) error
	First() (*fatten.FattenWaterChemicalHazard, error)
	Take() (*fatten.FattenWaterChemicalHazard, error)
	Last() (*fatten.FattenWaterChemicalHazard, error)
	Find() ([]*fatten.FattenWaterChemicalHazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenWaterChemicalHazard, err error)
	FindInBatches(result *[]*fatten.FattenWaterChemicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*fatten.FattenWaterChemicalHazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFattenWaterChemicalHazardDo
	Assign(attrs ...field.AssignExpr) IFattenWaterChemicalHazardDo
	Joins(fields ...field.RelationField) IFattenWaterChemicalHazardDo
	Preload(fields ...field.RelationField) IFattenWaterChemicalHazardDo
	FirstOrInit() (*fatten.FattenWaterChemicalHazard, error)
	FirstOrCreate() (*fatten.FattenWaterChemicalHazard, error)
	FindByPage(offset int, limit int) (result []*fatten.FattenWaterChemicalHazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFattenWaterChemicalHazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fattenWaterChemicalHazardDo) Debug() IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Debug())
}

func (f fattenWaterChemicalHazardDo) WithContext(ctx context.Context) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fattenWaterChemicalHazardDo) ReadDB() IFattenWaterChemicalHazardDo {
	return f.Clauses(dbresolver.Read)
}

func (f fattenWaterChemicalHazardDo) WriteDB() IFattenWaterChemicalHazardDo {
	return f.Clauses(dbresolver.Write)
}

func (f fattenWaterChemicalHazardDo) Session(config *gorm.Session) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Session(config))
}

func (f fattenWaterChemicalHazardDo) Clauses(conds ...clause.Expression) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fattenWaterChemicalHazardDo) Returning(value interface{}, columns ...string) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fattenWaterChemicalHazardDo) Not(conds ...gen.Condition) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fattenWaterChemicalHazardDo) Or(conds ...gen.Condition) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fattenWaterChemicalHazardDo) Select(conds ...field.Expr) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fattenWaterChemicalHazardDo) Where(conds ...gen.Condition) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fattenWaterChemicalHazardDo) Order(conds ...field.Expr) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fattenWaterChemicalHazardDo) Distinct(cols ...field.Expr) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fattenWaterChemicalHazardDo) Omit(cols ...field.Expr) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fattenWaterChemicalHazardDo) Join(table schema.Tabler, on ...field.Expr) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fattenWaterChemicalHazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fattenWaterChemicalHazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fattenWaterChemicalHazardDo) Group(cols ...field.Expr) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fattenWaterChemicalHazardDo) Having(conds ...gen.Condition) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fattenWaterChemicalHazardDo) Limit(limit int) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fattenWaterChemicalHazardDo) Offset(offset int) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fattenWaterChemicalHazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fattenWaterChemicalHazardDo) Unscoped() IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fattenWaterChemicalHazardDo) Create(values ...*fatten.FattenWaterChemicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fattenWaterChemicalHazardDo) CreateInBatches(values []*fatten.FattenWaterChemicalHazard, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fattenWaterChemicalHazardDo) Save(values ...*fatten.FattenWaterChemicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fattenWaterChemicalHazardDo) First() (*fatten.FattenWaterChemicalHazard, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterChemicalHazard), nil
	}
}

func (f fattenWaterChemicalHazardDo) Take() (*fatten.FattenWaterChemicalHazard, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterChemicalHazard), nil
	}
}

func (f fattenWaterChemicalHazardDo) Last() (*fatten.FattenWaterChemicalHazard, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterChemicalHazard), nil
	}
}

func (f fattenWaterChemicalHazardDo) Find() ([]*fatten.FattenWaterChemicalHazard, error) {
	result, err := f.DO.Find()
	return result.([]*fatten.FattenWaterChemicalHazard), err
}

func (f fattenWaterChemicalHazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenWaterChemicalHazard, err error) {
	buf := make([]*fatten.FattenWaterChemicalHazard, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fattenWaterChemicalHazardDo) FindInBatches(result *[]*fatten.FattenWaterChemicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fattenWaterChemicalHazardDo) Attrs(attrs ...field.AssignExpr) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fattenWaterChemicalHazardDo) Assign(attrs ...field.AssignExpr) IFattenWaterChemicalHazardDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fattenWaterChemicalHazardDo) Joins(fields ...field.RelationField) IFattenWaterChemicalHazardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fattenWaterChemicalHazardDo) Preload(fields ...field.RelationField) IFattenWaterChemicalHazardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fattenWaterChemicalHazardDo) FirstOrInit() (*fatten.FattenWaterChemicalHazard, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterChemicalHazard), nil
	}
}

func (f fattenWaterChemicalHazardDo) FirstOrCreate() (*fatten.FattenWaterChemicalHazard, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterChemicalHazard), nil
	}
}

func (f fattenWaterChemicalHazardDo) FindByPage(offset int, limit int) (result []*fatten.FattenWaterChemicalHazard, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fattenWaterChemicalHazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fattenWaterChemicalHazardDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fattenWaterChemicalHazardDo) Delete(models ...*fatten.FattenWaterChemicalHazard) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fattenWaterChemicalHazardDo) withDO(do gen.Dao) *fattenWaterChemicalHazardDo {
	f.DO = *do.(*gen.DO)
	return f
}
