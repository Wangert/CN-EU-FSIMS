// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureWater(db *gorm.DB, opts ...gen.DOOption) pastureWater {
	_pastureWater := pastureWater{}

	_pastureWater.pastureWaterDo.UseDB(db, opts...)
	_pastureWater.pastureWaterDo.UseModel(&pasture.PastureWater{})

	tableName := _pastureWater.pastureWaterDo.TableName()
	_pastureWater.ALL = field.NewAsterisk(tableName)
	_pastureWater.ID = field.NewUint(tableName, "id")
	_pastureWater.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureWater.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureWater.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureWater.PasPID = field.NewString(tableName, "pas_p_id")
	_pastureWater.PhysicalHazard = pastureWaterHasOnePhysicalHazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PhysicalHazard", "pasture.PastureWaterPhysicalHazard"),
	}

	_pastureWater.ChemicalHazard = pastureWaterHasOneChemicalHazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ChemicalHazard", "pasture.PastureWaterChemicalHazard"),
	}

	_pastureWater.Biohazard = pastureWaterHasOneBiohazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Biohazard", "pasture.PastureWaterBiohazard"),
	}

	_pastureWater.SensoryTraits = pastureWaterHasOneSensoryTraits{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SensoryTraits", "pasture.PastureWaterSensoryTraits"),
	}

	_pastureWater.fillFieldMap()

	return _pastureWater
}

type pastureWater struct {
	pastureWaterDo pastureWaterDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	PasPID         field.String
	PhysicalHazard pastureWaterHasOnePhysicalHazard

	ChemicalHazard pastureWaterHasOneChemicalHazard

	Biohazard pastureWaterHasOneBiohazard

	SensoryTraits pastureWaterHasOneSensoryTraits

	fieldMap map[string]field.Expr
}

func (p pastureWater) Table(newTableName string) *pastureWater {
	p.pastureWaterDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureWater) As(alias string) *pastureWater {
	p.pastureWaterDo.DO = *(p.pastureWaterDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureWater) updateTableName(table string) *pastureWater {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PasPID = field.NewString(table, "pas_p_id")

	p.fillFieldMap()

	return p
}

func (p *pastureWater) WithContext(ctx context.Context) IPastureWaterDo {
	return p.pastureWaterDo.WithContext(ctx)
}

func (p pastureWater) TableName() string { return p.pastureWaterDo.TableName() }

func (p pastureWater) Alias() string { return p.pastureWaterDo.Alias() }

func (p pastureWater) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureWaterDo.Columns(cols...)
}

func (p *pastureWater) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureWater) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["pas_p_id"] = p.PasPID

}

func (p pastureWater) clone(db *gorm.DB) pastureWater {
	p.pastureWaterDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureWater) replaceDB(db *gorm.DB) pastureWater {
	p.pastureWaterDo.ReplaceDB(db)
	return p
}

type pastureWaterHasOnePhysicalHazard struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureWaterHasOnePhysicalHazard) Where(conds ...field.Expr) *pastureWaterHasOnePhysicalHazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureWaterHasOnePhysicalHazard) WithContext(ctx context.Context) *pastureWaterHasOnePhysicalHazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureWaterHasOnePhysicalHazard) Session(session *gorm.Session) *pastureWaterHasOnePhysicalHazard {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureWaterHasOnePhysicalHazard) Model(m *pasture.PastureWater) *pastureWaterHasOnePhysicalHazardTx {
	return &pastureWaterHasOnePhysicalHazardTx{a.db.Model(m).Association(a.Name())}
}

type pastureWaterHasOnePhysicalHazardTx struct{ tx *gorm.Association }

func (a pastureWaterHasOnePhysicalHazardTx) Find() (result *pasture.PastureWaterPhysicalHazard, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureWaterHasOnePhysicalHazardTx) Append(values ...*pasture.PastureWaterPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureWaterHasOnePhysicalHazardTx) Replace(values ...*pasture.PastureWaterPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureWaterHasOnePhysicalHazardTx) Delete(values ...*pasture.PastureWaterPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureWaterHasOnePhysicalHazardTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureWaterHasOnePhysicalHazardTx) Count() int64 {
	return a.tx.Count()
}

type pastureWaterHasOneChemicalHazard struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureWaterHasOneChemicalHazard) Where(conds ...field.Expr) *pastureWaterHasOneChemicalHazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureWaterHasOneChemicalHazard) WithContext(ctx context.Context) *pastureWaterHasOneChemicalHazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureWaterHasOneChemicalHazard) Session(session *gorm.Session) *pastureWaterHasOneChemicalHazard {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureWaterHasOneChemicalHazard) Model(m *pasture.PastureWater) *pastureWaterHasOneChemicalHazardTx {
	return &pastureWaterHasOneChemicalHazardTx{a.db.Model(m).Association(a.Name())}
}

type pastureWaterHasOneChemicalHazardTx struct{ tx *gorm.Association }

func (a pastureWaterHasOneChemicalHazardTx) Find() (result *pasture.PastureWaterChemicalHazard, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureWaterHasOneChemicalHazardTx) Append(values ...*pasture.PastureWaterChemicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureWaterHasOneChemicalHazardTx) Replace(values ...*pasture.PastureWaterChemicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureWaterHasOneChemicalHazardTx) Delete(values ...*pasture.PastureWaterChemicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureWaterHasOneChemicalHazardTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureWaterHasOneChemicalHazardTx) Count() int64 {
	return a.tx.Count()
}

type pastureWaterHasOneBiohazard struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureWaterHasOneBiohazard) Where(conds ...field.Expr) *pastureWaterHasOneBiohazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureWaterHasOneBiohazard) WithContext(ctx context.Context) *pastureWaterHasOneBiohazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureWaterHasOneBiohazard) Session(session *gorm.Session) *pastureWaterHasOneBiohazard {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureWaterHasOneBiohazard) Model(m *pasture.PastureWater) *pastureWaterHasOneBiohazardTx {
	return &pastureWaterHasOneBiohazardTx{a.db.Model(m).Association(a.Name())}
}

type pastureWaterHasOneBiohazardTx struct{ tx *gorm.Association }

func (a pastureWaterHasOneBiohazardTx) Find() (result *pasture.PastureWaterBiohazard, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureWaterHasOneBiohazardTx) Append(values ...*pasture.PastureWaterBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureWaterHasOneBiohazardTx) Replace(values ...*pasture.PastureWaterBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureWaterHasOneBiohazardTx) Delete(values ...*pasture.PastureWaterBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureWaterHasOneBiohazardTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureWaterHasOneBiohazardTx) Count() int64 {
	return a.tx.Count()
}

type pastureWaterHasOneSensoryTraits struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureWaterHasOneSensoryTraits) Where(conds ...field.Expr) *pastureWaterHasOneSensoryTraits {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureWaterHasOneSensoryTraits) WithContext(ctx context.Context) *pastureWaterHasOneSensoryTraits {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureWaterHasOneSensoryTraits) Session(session *gorm.Session) *pastureWaterHasOneSensoryTraits {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureWaterHasOneSensoryTraits) Model(m *pasture.PastureWater) *pastureWaterHasOneSensoryTraitsTx {
	return &pastureWaterHasOneSensoryTraitsTx{a.db.Model(m).Association(a.Name())}
}

type pastureWaterHasOneSensoryTraitsTx struct{ tx *gorm.Association }

func (a pastureWaterHasOneSensoryTraitsTx) Find() (result *pasture.PastureWaterSensoryTraits, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureWaterHasOneSensoryTraitsTx) Append(values ...*pasture.PastureWaterSensoryTraits) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureWaterHasOneSensoryTraitsTx) Replace(values ...*pasture.PastureWaterSensoryTraits) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureWaterHasOneSensoryTraitsTx) Delete(values ...*pasture.PastureWaterSensoryTraits) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureWaterHasOneSensoryTraitsTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureWaterHasOneSensoryTraitsTx) Count() int64 {
	return a.tx.Count()
}

type pastureWaterDo struct{ gen.DO }

type IPastureWaterDo interface {
	gen.SubQuery
	Debug() IPastureWaterDo
	WithContext(ctx context.Context) IPastureWaterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureWaterDo
	WriteDB() IPastureWaterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureWaterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureWaterDo
	Not(conds ...gen.Condition) IPastureWaterDo
	Or(conds ...gen.Condition) IPastureWaterDo
	Select(conds ...field.Expr) IPastureWaterDo
	Where(conds ...gen.Condition) IPastureWaterDo
	Order(conds ...field.Expr) IPastureWaterDo
	Distinct(cols ...field.Expr) IPastureWaterDo
	Omit(cols ...field.Expr) IPastureWaterDo
	Join(table schema.Tabler, on ...field.Expr) IPastureWaterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterDo
	Group(cols ...field.Expr) IPastureWaterDo
	Having(conds ...gen.Condition) IPastureWaterDo
	Limit(limit int) IPastureWaterDo
	Offset(offset int) IPastureWaterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterDo
	Unscoped() IPastureWaterDo
	Create(values ...*pasture.PastureWater) error
	CreateInBatches(values []*pasture.PastureWater, batchSize int) error
	Save(values ...*pasture.PastureWater) error
	First() (*pasture.PastureWater, error)
	Take() (*pasture.PastureWater, error)
	Last() (*pasture.PastureWater, error)
	Find() ([]*pasture.PastureWater, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWater, err error)
	FindInBatches(result *[]*pasture.PastureWater, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureWater) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureWaterDo
	Assign(attrs ...field.AssignExpr) IPastureWaterDo
	Joins(fields ...field.RelationField) IPastureWaterDo
	Preload(fields ...field.RelationField) IPastureWaterDo
	FirstOrInit() (*pasture.PastureWater, error)
	FirstOrCreate() (*pasture.PastureWater, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureWater, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureWaterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureWaterDo) Debug() IPastureWaterDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureWaterDo) WithContext(ctx context.Context) IPastureWaterDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureWaterDo) ReadDB() IPastureWaterDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureWaterDo) WriteDB() IPastureWaterDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureWaterDo) Session(config *gorm.Session) IPastureWaterDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureWaterDo) Clauses(conds ...clause.Expression) IPastureWaterDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureWaterDo) Returning(value interface{}, columns ...string) IPastureWaterDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureWaterDo) Not(conds ...gen.Condition) IPastureWaterDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureWaterDo) Or(conds ...gen.Condition) IPastureWaterDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureWaterDo) Select(conds ...field.Expr) IPastureWaterDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureWaterDo) Where(conds ...gen.Condition) IPastureWaterDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureWaterDo) Order(conds ...field.Expr) IPastureWaterDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureWaterDo) Distinct(cols ...field.Expr) IPastureWaterDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureWaterDo) Omit(cols ...field.Expr) IPastureWaterDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureWaterDo) Join(table schema.Tabler, on ...field.Expr) IPastureWaterDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureWaterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureWaterDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureWaterDo) Group(cols ...field.Expr) IPastureWaterDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureWaterDo) Having(conds ...gen.Condition) IPastureWaterDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureWaterDo) Limit(limit int) IPastureWaterDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureWaterDo) Offset(offset int) IPastureWaterDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureWaterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureWaterDo) Unscoped() IPastureWaterDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureWaterDo) Create(values ...*pasture.PastureWater) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureWaterDo) CreateInBatches(values []*pasture.PastureWater, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureWaterDo) Save(values ...*pasture.PastureWater) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureWaterDo) First() (*pasture.PastureWater, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWater), nil
	}
}

func (p pastureWaterDo) Take() (*pasture.PastureWater, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWater), nil
	}
}

func (p pastureWaterDo) Last() (*pasture.PastureWater, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWater), nil
	}
}

func (p pastureWaterDo) Find() ([]*pasture.PastureWater, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureWater), err
}

func (p pastureWaterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWater, err error) {
	buf := make([]*pasture.PastureWater, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureWaterDo) FindInBatches(result *[]*pasture.PastureWater, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureWaterDo) Attrs(attrs ...field.AssignExpr) IPastureWaterDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureWaterDo) Assign(attrs ...field.AssignExpr) IPastureWaterDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureWaterDo) Joins(fields ...field.RelationField) IPastureWaterDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureWaterDo) Preload(fields ...field.RelationField) IPastureWaterDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureWaterDo) FirstOrInit() (*pasture.PastureWater, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWater), nil
	}
}

func (p pastureWaterDo) FirstOrCreate() (*pasture.PastureWater, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWater), nil
	}
}

func (p pastureWaterDo) FindByPage(offset int, limit int) (result []*pasture.PastureWater, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureWaterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureWaterDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureWaterDo) Delete(models ...*pasture.PastureWater) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureWaterDo) withDO(do gen.Dao) *pastureWaterDo {
	p.DO = *do.(*gen.DO)
	return p
}
