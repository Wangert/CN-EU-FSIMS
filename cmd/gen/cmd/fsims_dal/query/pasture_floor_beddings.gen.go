// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureFloorBedding(db *gorm.DB, opts ...gen.DOOption) pastureFloorBedding {
	_pastureFloorBedding := pastureFloorBedding{}

	_pastureFloorBedding.pastureFloorBeddingDo.UseDB(db, opts...)
	_pastureFloorBedding.pastureFloorBeddingDo.UseModel(&pasture.PastureFloorBedding{})

	tableName := _pastureFloorBedding.pastureFloorBeddingDo.TableName()
	_pastureFloorBedding.ALL = field.NewAsterisk(tableName)
	_pastureFloorBedding.ID = field.NewUint(tableName, "id")
	_pastureFloorBedding.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureFloorBedding.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureFloorBedding.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureFloorBedding.PasPID = field.NewString(tableName, "pas_p_id")
	_pastureFloorBedding.PhysicalHazard = pastureFloorBeddingHasOnePhysicalHazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PhysicalHazard", "pasture.PastureFloorBeddingPhysicalHazard"),
	}

	_pastureFloorBedding.Biohazard = pastureFloorBeddingHasOneBiohazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Biohazard", "pasture.PastureFloorBeddingBiohazard"),
	}

	_pastureFloorBedding.fillFieldMap()

	return _pastureFloorBedding
}

type pastureFloorBedding struct {
	pastureFloorBeddingDo pastureFloorBeddingDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	PasPID         field.String
	PhysicalHazard pastureFloorBeddingHasOnePhysicalHazard

	Biohazard pastureFloorBeddingHasOneBiohazard

	fieldMap map[string]field.Expr
}

func (p pastureFloorBedding) Table(newTableName string) *pastureFloorBedding {
	p.pastureFloorBeddingDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureFloorBedding) As(alias string) *pastureFloorBedding {
	p.pastureFloorBeddingDo.DO = *(p.pastureFloorBeddingDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureFloorBedding) updateTableName(table string) *pastureFloorBedding {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PasPID = field.NewString(table, "pas_p_id")

	p.fillFieldMap()

	return p
}

func (p *pastureFloorBedding) WithContext(ctx context.Context) IPastureFloorBeddingDo {
	return p.pastureFloorBeddingDo.WithContext(ctx)
}

func (p pastureFloorBedding) TableName() string { return p.pastureFloorBeddingDo.TableName() }

func (p pastureFloorBedding) Alias() string { return p.pastureFloorBeddingDo.Alias() }

func (p pastureFloorBedding) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureFloorBeddingDo.Columns(cols...)
}

func (p *pastureFloorBedding) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureFloorBedding) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["pas_p_id"] = p.PasPID

}

func (p pastureFloorBedding) clone(db *gorm.DB) pastureFloorBedding {
	p.pastureFloorBeddingDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureFloorBedding) replaceDB(db *gorm.DB) pastureFloorBedding {
	p.pastureFloorBeddingDo.ReplaceDB(db)
	return p
}

type pastureFloorBeddingHasOnePhysicalHazard struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFloorBeddingHasOnePhysicalHazard) Where(conds ...field.Expr) *pastureFloorBeddingHasOnePhysicalHazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFloorBeddingHasOnePhysicalHazard) WithContext(ctx context.Context) *pastureFloorBeddingHasOnePhysicalHazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFloorBeddingHasOnePhysicalHazard) Session(session *gorm.Session) *pastureFloorBeddingHasOnePhysicalHazard {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFloorBeddingHasOnePhysicalHazard) Model(m *pasture.PastureFloorBedding) *pastureFloorBeddingHasOnePhysicalHazardTx {
	return &pastureFloorBeddingHasOnePhysicalHazardTx{a.db.Model(m).Association(a.Name())}
}

type pastureFloorBeddingHasOnePhysicalHazardTx struct{ tx *gorm.Association }

func (a pastureFloorBeddingHasOnePhysicalHazardTx) Find() (result *pasture.PastureFloorBeddingPhysicalHazard, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFloorBeddingHasOnePhysicalHazardTx) Append(values ...*pasture.PastureFloorBeddingPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFloorBeddingHasOnePhysicalHazardTx) Replace(values ...*pasture.PastureFloorBeddingPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFloorBeddingHasOnePhysicalHazardTx) Delete(values ...*pasture.PastureFloorBeddingPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFloorBeddingHasOnePhysicalHazardTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFloorBeddingHasOnePhysicalHazardTx) Count() int64 {
	return a.tx.Count()
}

type pastureFloorBeddingHasOneBiohazard struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFloorBeddingHasOneBiohazard) Where(conds ...field.Expr) *pastureFloorBeddingHasOneBiohazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFloorBeddingHasOneBiohazard) WithContext(ctx context.Context) *pastureFloorBeddingHasOneBiohazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFloorBeddingHasOneBiohazard) Session(session *gorm.Session) *pastureFloorBeddingHasOneBiohazard {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFloorBeddingHasOneBiohazard) Model(m *pasture.PastureFloorBedding) *pastureFloorBeddingHasOneBiohazardTx {
	return &pastureFloorBeddingHasOneBiohazardTx{a.db.Model(m).Association(a.Name())}
}

type pastureFloorBeddingHasOneBiohazardTx struct{ tx *gorm.Association }

func (a pastureFloorBeddingHasOneBiohazardTx) Find() (result *pasture.PastureFloorBeddingBiohazard, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFloorBeddingHasOneBiohazardTx) Append(values ...*pasture.PastureFloorBeddingBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFloorBeddingHasOneBiohazardTx) Replace(values ...*pasture.PastureFloorBeddingBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFloorBeddingHasOneBiohazardTx) Delete(values ...*pasture.PastureFloorBeddingBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFloorBeddingHasOneBiohazardTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFloorBeddingHasOneBiohazardTx) Count() int64 {
	return a.tx.Count()
}

type pastureFloorBeddingDo struct{ gen.DO }

type IPastureFloorBeddingDo interface {
	gen.SubQuery
	Debug() IPastureFloorBeddingDo
	WithContext(ctx context.Context) IPastureFloorBeddingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureFloorBeddingDo
	WriteDB() IPastureFloorBeddingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureFloorBeddingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureFloorBeddingDo
	Not(conds ...gen.Condition) IPastureFloorBeddingDo
	Or(conds ...gen.Condition) IPastureFloorBeddingDo
	Select(conds ...field.Expr) IPastureFloorBeddingDo
	Where(conds ...gen.Condition) IPastureFloorBeddingDo
	Order(conds ...field.Expr) IPastureFloorBeddingDo
	Distinct(cols ...field.Expr) IPastureFloorBeddingDo
	Omit(cols ...field.Expr) IPastureFloorBeddingDo
	Join(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingDo
	Group(cols ...field.Expr) IPastureFloorBeddingDo
	Having(conds ...gen.Condition) IPastureFloorBeddingDo
	Limit(limit int) IPastureFloorBeddingDo
	Offset(offset int) IPastureFloorBeddingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFloorBeddingDo
	Unscoped() IPastureFloorBeddingDo
	Create(values ...*pasture.PastureFloorBedding) error
	CreateInBatches(values []*pasture.PastureFloorBedding, batchSize int) error
	Save(values ...*pasture.PastureFloorBedding) error
	First() (*pasture.PastureFloorBedding, error)
	Take() (*pasture.PastureFloorBedding, error)
	Last() (*pasture.PastureFloorBedding, error)
	Find() ([]*pasture.PastureFloorBedding, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFloorBedding, err error)
	FindInBatches(result *[]*pasture.PastureFloorBedding, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureFloorBedding) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureFloorBeddingDo
	Assign(attrs ...field.AssignExpr) IPastureFloorBeddingDo
	Joins(fields ...field.RelationField) IPastureFloorBeddingDo
	Preload(fields ...field.RelationField) IPastureFloorBeddingDo
	FirstOrInit() (*pasture.PastureFloorBedding, error)
	FirstOrCreate() (*pasture.PastureFloorBedding, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureFloorBedding, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureFloorBeddingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureFloorBeddingDo) Debug() IPastureFloorBeddingDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureFloorBeddingDo) WithContext(ctx context.Context) IPastureFloorBeddingDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureFloorBeddingDo) ReadDB() IPastureFloorBeddingDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureFloorBeddingDo) WriteDB() IPastureFloorBeddingDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureFloorBeddingDo) Session(config *gorm.Session) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureFloorBeddingDo) Clauses(conds ...clause.Expression) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureFloorBeddingDo) Returning(value interface{}, columns ...string) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureFloorBeddingDo) Not(conds ...gen.Condition) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureFloorBeddingDo) Or(conds ...gen.Condition) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureFloorBeddingDo) Select(conds ...field.Expr) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureFloorBeddingDo) Where(conds ...gen.Condition) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureFloorBeddingDo) Order(conds ...field.Expr) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureFloorBeddingDo) Distinct(cols ...field.Expr) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureFloorBeddingDo) Omit(cols ...field.Expr) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureFloorBeddingDo) Join(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureFloorBeddingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureFloorBeddingDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureFloorBeddingDo) Group(cols ...field.Expr) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureFloorBeddingDo) Having(conds ...gen.Condition) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureFloorBeddingDo) Limit(limit int) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureFloorBeddingDo) Offset(offset int) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureFloorBeddingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureFloorBeddingDo) Unscoped() IPastureFloorBeddingDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureFloorBeddingDo) Create(values ...*pasture.PastureFloorBedding) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureFloorBeddingDo) CreateInBatches(values []*pasture.PastureFloorBedding, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureFloorBeddingDo) Save(values ...*pasture.PastureFloorBedding) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureFloorBeddingDo) First() (*pasture.PastureFloorBedding, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBedding), nil
	}
}

func (p pastureFloorBeddingDo) Take() (*pasture.PastureFloorBedding, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBedding), nil
	}
}

func (p pastureFloorBeddingDo) Last() (*pasture.PastureFloorBedding, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBedding), nil
	}
}

func (p pastureFloorBeddingDo) Find() ([]*pasture.PastureFloorBedding, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureFloorBedding), err
}

func (p pastureFloorBeddingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFloorBedding, err error) {
	buf := make([]*pasture.PastureFloorBedding, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureFloorBeddingDo) FindInBatches(result *[]*pasture.PastureFloorBedding, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureFloorBeddingDo) Attrs(attrs ...field.AssignExpr) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureFloorBeddingDo) Assign(attrs ...field.AssignExpr) IPastureFloorBeddingDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureFloorBeddingDo) Joins(fields ...field.RelationField) IPastureFloorBeddingDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureFloorBeddingDo) Preload(fields ...field.RelationField) IPastureFloorBeddingDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureFloorBeddingDo) FirstOrInit() (*pasture.PastureFloorBedding, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBedding), nil
	}
}

func (p pastureFloorBeddingDo) FirstOrCreate() (*pasture.PastureFloorBedding, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBedding), nil
	}
}

func (p pastureFloorBeddingDo) FindByPage(offset int, limit int) (result []*pasture.PastureFloorBedding, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureFloorBeddingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureFloorBeddingDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureFloorBeddingDo) Delete(models ...*pasture.PastureFloorBedding) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureFloorBeddingDo) withDO(do gen.Dao) *pastureFloorBeddingDo {
	p.DO = *do.(*gen.DO)
	return p
}
