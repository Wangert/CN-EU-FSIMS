// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/warehouse"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureWareHouse(db *gorm.DB, opts ...gen.DOOption) pastureWareHouse {
	_pastureWareHouse := pastureWareHouse{}

	_pastureWareHouse.pastureWareHouseDo.UseDB(db, opts...)
	_pastureWareHouse.pastureWareHouseDo.UseModel(&warehouse.PastureWareHouse{})

	tableName := _pastureWareHouse.pastureWareHouseDo.TableName()
	_pastureWareHouse.ALL = field.NewAsterisk(tableName)
	_pastureWareHouse.ID = field.NewUint(tableName, "id")
	_pastureWareHouse.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureWareHouse.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureWareHouse.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureWareHouse.ProductNumber = field.NewString(tableName, "product_number")
	_pastureWareHouse.ProductPID = field.NewString(tableName, "product_p_id")
	_pastureWareHouse.ProductType = field.NewString(tableName, "product_type")
	_pastureWareHouse.State = field.NewUint(tableName, "state")
	_pastureWareHouse.InOperator = field.NewString(tableName, "in_operator")
	_pastureWareHouse.OutOperator = field.NewString(tableName, "out_operator")
	_pastureWareHouse.Destination = field.NewString(tableName, "destination")
	_pastureWareHouse.InTimestamp = field.NewTime(tableName, "in_timestamp")
	_pastureWareHouse.OutTimestamp = field.NewTime(tableName, "out_timestamp")
	_pastureWareHouse.HouseNumber = field.NewString(tableName, "house_number")

	_pastureWareHouse.fillFieldMap()

	return _pastureWareHouse
}

type pastureWareHouse struct {
	pastureWareHouseDo pastureWareHouseDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ProductNumber field.String
	ProductPID    field.String
	ProductType   field.String
	State         field.Uint
	InOperator    field.String
	OutOperator   field.String
	Destination   field.String
	InTimestamp   field.Time
	OutTimestamp  field.Time
	HouseNumber   field.String

	fieldMap map[string]field.Expr
}

func (p pastureWareHouse) Table(newTableName string) *pastureWareHouse {
	p.pastureWareHouseDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureWareHouse) As(alias string) *pastureWareHouse {
	p.pastureWareHouseDo.DO = *(p.pastureWareHouseDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureWareHouse) updateTableName(table string) *pastureWareHouse {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ProductNumber = field.NewString(table, "product_number")
	p.ProductPID = field.NewString(table, "product_p_id")
	p.ProductType = field.NewString(table, "product_type")
	p.State = field.NewUint(table, "state")
	p.InOperator = field.NewString(table, "in_operator")
	p.OutOperator = field.NewString(table, "out_operator")
	p.Destination = field.NewString(table, "destination")
	p.InTimestamp = field.NewTime(table, "in_timestamp")
	p.OutTimestamp = field.NewTime(table, "out_timestamp")
	p.HouseNumber = field.NewString(table, "house_number")

	p.fillFieldMap()

	return p
}

func (p *pastureWareHouse) WithContext(ctx context.Context) IPastureWareHouseDo {
	return p.pastureWareHouseDo.WithContext(ctx)
}

func (p pastureWareHouse) TableName() string { return p.pastureWareHouseDo.TableName() }

func (p pastureWareHouse) Alias() string { return p.pastureWareHouseDo.Alias() }

func (p pastureWareHouse) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureWareHouseDo.Columns(cols...)
}

func (p *pastureWareHouse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureWareHouse) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 14)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["product_number"] = p.ProductNumber
	p.fieldMap["product_p_id"] = p.ProductPID
	p.fieldMap["product_type"] = p.ProductType
	p.fieldMap["state"] = p.State
	p.fieldMap["in_operator"] = p.InOperator
	p.fieldMap["out_operator"] = p.OutOperator
	p.fieldMap["destination"] = p.Destination
	p.fieldMap["in_timestamp"] = p.InTimestamp
	p.fieldMap["out_timestamp"] = p.OutTimestamp
	p.fieldMap["house_number"] = p.HouseNumber
}

func (p pastureWareHouse) clone(db *gorm.DB) pastureWareHouse {
	p.pastureWareHouseDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureWareHouse) replaceDB(db *gorm.DB) pastureWareHouse {
	p.pastureWareHouseDo.ReplaceDB(db)
	return p
}

type pastureWareHouseDo struct{ gen.DO }

type IPastureWareHouseDo interface {
	gen.SubQuery
	Debug() IPastureWareHouseDo
	WithContext(ctx context.Context) IPastureWareHouseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureWareHouseDo
	WriteDB() IPastureWareHouseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureWareHouseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureWareHouseDo
	Not(conds ...gen.Condition) IPastureWareHouseDo
	Or(conds ...gen.Condition) IPastureWareHouseDo
	Select(conds ...field.Expr) IPastureWareHouseDo
	Where(conds ...gen.Condition) IPastureWareHouseDo
	Order(conds ...field.Expr) IPastureWareHouseDo
	Distinct(cols ...field.Expr) IPastureWareHouseDo
	Omit(cols ...field.Expr) IPastureWareHouseDo
	Join(table schema.Tabler, on ...field.Expr) IPastureWareHouseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWareHouseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureWareHouseDo
	Group(cols ...field.Expr) IPastureWareHouseDo
	Having(conds ...gen.Condition) IPastureWareHouseDo
	Limit(limit int) IPastureWareHouseDo
	Offset(offset int) IPastureWareHouseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWareHouseDo
	Unscoped() IPastureWareHouseDo
	Create(values ...*warehouse.PastureWareHouse) error
	CreateInBatches(values []*warehouse.PastureWareHouse, batchSize int) error
	Save(values ...*warehouse.PastureWareHouse) error
	First() (*warehouse.PastureWareHouse, error)
	Take() (*warehouse.PastureWareHouse, error)
	Last() (*warehouse.PastureWareHouse, error)
	Find() ([]*warehouse.PastureWareHouse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.PastureWareHouse, err error)
	FindInBatches(result *[]*warehouse.PastureWareHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*warehouse.PastureWareHouse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureWareHouseDo
	Assign(attrs ...field.AssignExpr) IPastureWareHouseDo
	Joins(fields ...field.RelationField) IPastureWareHouseDo
	Preload(fields ...field.RelationField) IPastureWareHouseDo
	FirstOrInit() (*warehouse.PastureWareHouse, error)
	FirstOrCreate() (*warehouse.PastureWareHouse, error)
	FindByPage(offset int, limit int) (result []*warehouse.PastureWareHouse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureWareHouseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureWareHouseDo) Debug() IPastureWareHouseDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureWareHouseDo) WithContext(ctx context.Context) IPastureWareHouseDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureWareHouseDo) ReadDB() IPastureWareHouseDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureWareHouseDo) WriteDB() IPastureWareHouseDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureWareHouseDo) Session(config *gorm.Session) IPastureWareHouseDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureWareHouseDo) Clauses(conds ...clause.Expression) IPastureWareHouseDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureWareHouseDo) Returning(value interface{}, columns ...string) IPastureWareHouseDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureWareHouseDo) Not(conds ...gen.Condition) IPastureWareHouseDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureWareHouseDo) Or(conds ...gen.Condition) IPastureWareHouseDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureWareHouseDo) Select(conds ...field.Expr) IPastureWareHouseDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureWareHouseDo) Where(conds ...gen.Condition) IPastureWareHouseDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureWareHouseDo) Order(conds ...field.Expr) IPastureWareHouseDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureWareHouseDo) Distinct(cols ...field.Expr) IPastureWareHouseDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureWareHouseDo) Omit(cols ...field.Expr) IPastureWareHouseDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureWareHouseDo) Join(table schema.Tabler, on ...field.Expr) IPastureWareHouseDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureWareHouseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWareHouseDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureWareHouseDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureWareHouseDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureWareHouseDo) Group(cols ...field.Expr) IPastureWareHouseDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureWareHouseDo) Having(conds ...gen.Condition) IPastureWareHouseDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureWareHouseDo) Limit(limit int) IPastureWareHouseDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureWareHouseDo) Offset(offset int) IPastureWareHouseDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureWareHouseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWareHouseDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureWareHouseDo) Unscoped() IPastureWareHouseDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureWareHouseDo) Create(values ...*warehouse.PastureWareHouse) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureWareHouseDo) CreateInBatches(values []*warehouse.PastureWareHouse, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureWareHouseDo) Save(values ...*warehouse.PastureWareHouse) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureWareHouseDo) First() (*warehouse.PastureWareHouse, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PastureWareHouse), nil
	}
}

func (p pastureWareHouseDo) Take() (*warehouse.PastureWareHouse, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PastureWareHouse), nil
	}
}

func (p pastureWareHouseDo) Last() (*warehouse.PastureWareHouse, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PastureWareHouse), nil
	}
}

func (p pastureWareHouseDo) Find() ([]*warehouse.PastureWareHouse, error) {
	result, err := p.DO.Find()
	return result.([]*warehouse.PastureWareHouse), err
}

func (p pastureWareHouseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.PastureWareHouse, err error) {
	buf := make([]*warehouse.PastureWareHouse, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureWareHouseDo) FindInBatches(result *[]*warehouse.PastureWareHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureWareHouseDo) Attrs(attrs ...field.AssignExpr) IPastureWareHouseDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureWareHouseDo) Assign(attrs ...field.AssignExpr) IPastureWareHouseDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureWareHouseDo) Joins(fields ...field.RelationField) IPastureWareHouseDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureWareHouseDo) Preload(fields ...field.RelationField) IPastureWareHouseDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureWareHouseDo) FirstOrInit() (*warehouse.PastureWareHouse, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PastureWareHouse), nil
	}
}

func (p pastureWareHouseDo) FirstOrCreate() (*warehouse.PastureWareHouse, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PastureWareHouse), nil
	}
}

func (p pastureWareHouseDo) FindByPage(offset int, limit int) (result []*warehouse.PastureWareHouse, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureWareHouseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureWareHouseDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureWareHouseDo) Delete(models ...*warehouse.PastureWareHouse) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureWareHouseDo) withDO(do gen.Dao) *pastureWareHouseDo {
	p.DO = *do.(*gen.DO)
	return p
}
