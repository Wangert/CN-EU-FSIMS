// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureWaterBiohazard(db *gorm.DB, opts ...gen.DOOption) pastureWaterBiohazard {
	_pastureWaterBiohazard := pastureWaterBiohazard{}

	_pastureWaterBiohazard.pastureWaterBiohazardDo.UseDB(db, opts...)
	_pastureWaterBiohazard.pastureWaterBiohazardDo.UseModel(&pasture.PastureWaterBiohazard{})

	tableName := _pastureWaterBiohazard.pastureWaterBiohazardDo.TableName()
	_pastureWaterBiohazard.ALL = field.NewAsterisk(tableName)
	_pastureWaterBiohazard.ID = field.NewUint(tableName, "id")
	_pastureWaterBiohazard.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureWaterBiohazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureWaterBiohazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureWaterBiohazard.ColiformBacteria = field.NewUint(tableName, "coliform_bacteria")
	_pastureWaterBiohazard.PastureWaterID = field.NewUint(tableName, "pasture_water_id")

	_pastureWaterBiohazard.fillFieldMap()

	return _pastureWaterBiohazard
}

type pastureWaterBiohazard struct {
	pastureWaterBiohazardDo pastureWaterBiohazardDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	ColiformBacteria field.Uint
	PastureWaterID   field.Uint

	fieldMap map[string]field.Expr
}

func (p pastureWaterBiohazard) Table(newTableName string) *pastureWaterBiohazard {
	p.pastureWaterBiohazardDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureWaterBiohazard) As(alias string) *pastureWaterBiohazard {
	p.pastureWaterBiohazardDo.DO = *(p.pastureWaterBiohazardDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureWaterBiohazard) updateTableName(table string) *pastureWaterBiohazard {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ColiformBacteria = field.NewUint(table, "coliform_bacteria")
	p.PastureWaterID = field.NewUint(table, "pasture_water_id")

	p.fillFieldMap()

	return p
}

func (p *pastureWaterBiohazard) WithContext(ctx context.Context) IPastureWaterBiohazardDo {
	return p.pastureWaterBiohazardDo.WithContext(ctx)
}

func (p pastureWaterBiohazard) TableName() string { return p.pastureWaterBiohazardDo.TableName() }

func (p pastureWaterBiohazard) Alias() string { return p.pastureWaterBiohazardDo.Alias() }

func (p pastureWaterBiohazard) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureWaterBiohazardDo.Columns(cols...)
}

func (p *pastureWaterBiohazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureWaterBiohazard) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["coliform_bacteria"] = p.ColiformBacteria
	p.fieldMap["pasture_water_id"] = p.PastureWaterID
}

func (p pastureWaterBiohazard) clone(db *gorm.DB) pastureWaterBiohazard {
	p.pastureWaterBiohazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureWaterBiohazard) replaceDB(db *gorm.DB) pastureWaterBiohazard {
	p.pastureWaterBiohazardDo.ReplaceDB(db)
	return p
}

type pastureWaterBiohazardDo struct{ gen.DO }

type IPastureWaterBiohazardDo interface {
	gen.SubQuery
	Debug() IPastureWaterBiohazardDo
	WithContext(ctx context.Context) IPastureWaterBiohazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureWaterBiohazardDo
	WriteDB() IPastureWaterBiohazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureWaterBiohazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureWaterBiohazardDo
	Not(conds ...gen.Condition) IPastureWaterBiohazardDo
	Or(conds ...gen.Condition) IPastureWaterBiohazardDo
	Select(conds ...field.Expr) IPastureWaterBiohazardDo
	Where(conds ...gen.Condition) IPastureWaterBiohazardDo
	Order(conds ...field.Expr) IPastureWaterBiohazardDo
	Distinct(cols ...field.Expr) IPastureWaterBiohazardDo
	Omit(cols ...field.Expr) IPastureWaterBiohazardDo
	Join(table schema.Tabler, on ...field.Expr) IPastureWaterBiohazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterBiohazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterBiohazardDo
	Group(cols ...field.Expr) IPastureWaterBiohazardDo
	Having(conds ...gen.Condition) IPastureWaterBiohazardDo
	Limit(limit int) IPastureWaterBiohazardDo
	Offset(offset int) IPastureWaterBiohazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterBiohazardDo
	Unscoped() IPastureWaterBiohazardDo
	Create(values ...*pasture.PastureWaterBiohazard) error
	CreateInBatches(values []*pasture.PastureWaterBiohazard, batchSize int) error
	Save(values ...*pasture.PastureWaterBiohazard) error
	First() (*pasture.PastureWaterBiohazard, error)
	Take() (*pasture.PastureWaterBiohazard, error)
	Last() (*pasture.PastureWaterBiohazard, error)
	Find() ([]*pasture.PastureWaterBiohazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWaterBiohazard, err error)
	FindInBatches(result *[]*pasture.PastureWaterBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureWaterBiohazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureWaterBiohazardDo
	Assign(attrs ...field.AssignExpr) IPastureWaterBiohazardDo
	Joins(fields ...field.RelationField) IPastureWaterBiohazardDo
	Preload(fields ...field.RelationField) IPastureWaterBiohazardDo
	FirstOrInit() (*pasture.PastureWaterBiohazard, error)
	FirstOrCreate() (*pasture.PastureWaterBiohazard, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureWaterBiohazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureWaterBiohazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureWaterBiohazardDo) Debug() IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureWaterBiohazardDo) WithContext(ctx context.Context) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureWaterBiohazardDo) ReadDB() IPastureWaterBiohazardDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureWaterBiohazardDo) WriteDB() IPastureWaterBiohazardDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureWaterBiohazardDo) Session(config *gorm.Session) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureWaterBiohazardDo) Clauses(conds ...clause.Expression) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureWaterBiohazardDo) Returning(value interface{}, columns ...string) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureWaterBiohazardDo) Not(conds ...gen.Condition) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureWaterBiohazardDo) Or(conds ...gen.Condition) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureWaterBiohazardDo) Select(conds ...field.Expr) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureWaterBiohazardDo) Where(conds ...gen.Condition) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureWaterBiohazardDo) Order(conds ...field.Expr) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureWaterBiohazardDo) Distinct(cols ...field.Expr) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureWaterBiohazardDo) Omit(cols ...field.Expr) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureWaterBiohazardDo) Join(table schema.Tabler, on ...field.Expr) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureWaterBiohazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureWaterBiohazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureWaterBiohazardDo) Group(cols ...field.Expr) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureWaterBiohazardDo) Having(conds ...gen.Condition) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureWaterBiohazardDo) Limit(limit int) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureWaterBiohazardDo) Offset(offset int) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureWaterBiohazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureWaterBiohazardDo) Unscoped() IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureWaterBiohazardDo) Create(values ...*pasture.PastureWaterBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureWaterBiohazardDo) CreateInBatches(values []*pasture.PastureWaterBiohazard, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureWaterBiohazardDo) Save(values ...*pasture.PastureWaterBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureWaterBiohazardDo) First() (*pasture.PastureWaterBiohazard, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterBiohazard), nil
	}
}

func (p pastureWaterBiohazardDo) Take() (*pasture.PastureWaterBiohazard, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterBiohazard), nil
	}
}

func (p pastureWaterBiohazardDo) Last() (*pasture.PastureWaterBiohazard, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterBiohazard), nil
	}
}

func (p pastureWaterBiohazardDo) Find() ([]*pasture.PastureWaterBiohazard, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureWaterBiohazard), err
}

func (p pastureWaterBiohazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWaterBiohazard, err error) {
	buf := make([]*pasture.PastureWaterBiohazard, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureWaterBiohazardDo) FindInBatches(result *[]*pasture.PastureWaterBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureWaterBiohazardDo) Attrs(attrs ...field.AssignExpr) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureWaterBiohazardDo) Assign(attrs ...field.AssignExpr) IPastureWaterBiohazardDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureWaterBiohazardDo) Joins(fields ...field.RelationField) IPastureWaterBiohazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureWaterBiohazardDo) Preload(fields ...field.RelationField) IPastureWaterBiohazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureWaterBiohazardDo) FirstOrInit() (*pasture.PastureWaterBiohazard, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterBiohazard), nil
	}
}

func (p pastureWaterBiohazardDo) FirstOrCreate() (*pasture.PastureWaterBiohazard, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterBiohazard), nil
	}
}

func (p pastureWaterBiohazardDo) FindByPage(offset int, limit int) (result []*pasture.PastureWaterBiohazard, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureWaterBiohazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureWaterBiohazardDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureWaterBiohazardDo) Delete(models ...*pasture.PastureWaterBiohazard) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureWaterBiohazardDo) withDO(do gen.Dao) *pastureWaterBiohazardDo {
	p.DO = *do.(*gen.DO)
	return p
}
