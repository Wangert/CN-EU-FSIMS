// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureFeedCr(db *gorm.DB, opts ...gen.DOOption) pastureFeedCr {
	_pastureFeedCr := pastureFeedCr{}

	_pastureFeedCr.pastureFeedCrDo.UseDB(db, opts...)
	_pastureFeedCr.pastureFeedCrDo.UseModel(&pasture.PastureFeedCr{})

	tableName := _pastureFeedCr.pastureFeedCrDo.TableName()
	_pastureFeedCr.ALL = field.NewAsterisk(tableName)
	_pastureFeedCr.ID = field.NewUint(tableName, "id")
	_pastureFeedCr.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureFeedCr.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureFeedCr.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureFeedCr.PastureFeedHeavyMetalID = field.NewUint(tableName, "pasture_feed_heavy_metal_id")
	_pastureFeedCr.Cr1 = field.NewFloat64(tableName, "cr1")
	_pastureFeedCr.Cr2 = field.NewFloat64(tableName, "cr2")
	_pastureFeedCr.Cr3 = field.NewFloat64(tableName, "cr3")
	_pastureFeedCr.Cr4 = field.NewFloat64(tableName, "cr4")

	_pastureFeedCr.fillFieldMap()

	return _pastureFeedCr
}

type pastureFeedCr struct {
	pastureFeedCrDo pastureFeedCrDo

	ALL                     field.Asterisk
	ID                      field.Uint
	CreatedAt               field.Time
	UpdatedAt               field.Time
	DeletedAt               field.Field
	PastureFeedHeavyMetalID field.Uint
	Cr1                     field.Float64
	Cr2                     field.Float64
	Cr3                     field.Float64
	Cr4                     field.Float64

	fieldMap map[string]field.Expr
}

func (p pastureFeedCr) Table(newTableName string) *pastureFeedCr {
	p.pastureFeedCrDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureFeedCr) As(alias string) *pastureFeedCr {
	p.pastureFeedCrDo.DO = *(p.pastureFeedCrDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureFeedCr) updateTableName(table string) *pastureFeedCr {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PastureFeedHeavyMetalID = field.NewUint(table, "pasture_feed_heavy_metal_id")
	p.Cr1 = field.NewFloat64(table, "cr1")
	p.Cr2 = field.NewFloat64(table, "cr2")
	p.Cr3 = field.NewFloat64(table, "cr3")
	p.Cr4 = field.NewFloat64(table, "cr4")

	p.fillFieldMap()

	return p
}

func (p *pastureFeedCr) WithContext(ctx context.Context) IPastureFeedCrDo {
	return p.pastureFeedCrDo.WithContext(ctx)
}

func (p pastureFeedCr) TableName() string { return p.pastureFeedCrDo.TableName() }

func (p pastureFeedCr) Alias() string { return p.pastureFeedCrDo.Alias() }

func (p pastureFeedCr) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureFeedCrDo.Columns(cols...)
}

func (p *pastureFeedCr) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureFeedCr) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["pasture_feed_heavy_metal_id"] = p.PastureFeedHeavyMetalID
	p.fieldMap["cr1"] = p.Cr1
	p.fieldMap["cr2"] = p.Cr2
	p.fieldMap["cr3"] = p.Cr3
	p.fieldMap["cr4"] = p.Cr4
}

func (p pastureFeedCr) clone(db *gorm.DB) pastureFeedCr {
	p.pastureFeedCrDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureFeedCr) replaceDB(db *gorm.DB) pastureFeedCr {
	p.pastureFeedCrDo.ReplaceDB(db)
	return p
}

type pastureFeedCrDo struct{ gen.DO }

type IPastureFeedCrDo interface {
	gen.SubQuery
	Debug() IPastureFeedCrDo
	WithContext(ctx context.Context) IPastureFeedCrDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureFeedCrDo
	WriteDB() IPastureFeedCrDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureFeedCrDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureFeedCrDo
	Not(conds ...gen.Condition) IPastureFeedCrDo
	Or(conds ...gen.Condition) IPastureFeedCrDo
	Select(conds ...field.Expr) IPastureFeedCrDo
	Where(conds ...gen.Condition) IPastureFeedCrDo
	Order(conds ...field.Expr) IPastureFeedCrDo
	Distinct(cols ...field.Expr) IPastureFeedCrDo
	Omit(cols ...field.Expr) IPastureFeedCrDo
	Join(table schema.Tabler, on ...field.Expr) IPastureFeedCrDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFeedCrDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureFeedCrDo
	Group(cols ...field.Expr) IPastureFeedCrDo
	Having(conds ...gen.Condition) IPastureFeedCrDo
	Limit(limit int) IPastureFeedCrDo
	Offset(offset int) IPastureFeedCrDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFeedCrDo
	Unscoped() IPastureFeedCrDo
	Create(values ...*pasture.PastureFeedCr) error
	CreateInBatches(values []*pasture.PastureFeedCr, batchSize int) error
	Save(values ...*pasture.PastureFeedCr) error
	First() (*pasture.PastureFeedCr, error)
	Take() (*pasture.PastureFeedCr, error)
	Last() (*pasture.PastureFeedCr, error)
	Find() ([]*pasture.PastureFeedCr, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFeedCr, err error)
	FindInBatches(result *[]*pasture.PastureFeedCr, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureFeedCr) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureFeedCrDo
	Assign(attrs ...field.AssignExpr) IPastureFeedCrDo
	Joins(fields ...field.RelationField) IPastureFeedCrDo
	Preload(fields ...field.RelationField) IPastureFeedCrDo
	FirstOrInit() (*pasture.PastureFeedCr, error)
	FirstOrCreate() (*pasture.PastureFeedCr, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureFeedCr, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureFeedCrDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureFeedCrDo) Debug() IPastureFeedCrDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureFeedCrDo) WithContext(ctx context.Context) IPastureFeedCrDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureFeedCrDo) ReadDB() IPastureFeedCrDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureFeedCrDo) WriteDB() IPastureFeedCrDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureFeedCrDo) Session(config *gorm.Session) IPastureFeedCrDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureFeedCrDo) Clauses(conds ...clause.Expression) IPastureFeedCrDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureFeedCrDo) Returning(value interface{}, columns ...string) IPastureFeedCrDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureFeedCrDo) Not(conds ...gen.Condition) IPastureFeedCrDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureFeedCrDo) Or(conds ...gen.Condition) IPastureFeedCrDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureFeedCrDo) Select(conds ...field.Expr) IPastureFeedCrDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureFeedCrDo) Where(conds ...gen.Condition) IPastureFeedCrDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureFeedCrDo) Order(conds ...field.Expr) IPastureFeedCrDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureFeedCrDo) Distinct(cols ...field.Expr) IPastureFeedCrDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureFeedCrDo) Omit(cols ...field.Expr) IPastureFeedCrDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureFeedCrDo) Join(table schema.Tabler, on ...field.Expr) IPastureFeedCrDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureFeedCrDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFeedCrDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureFeedCrDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureFeedCrDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureFeedCrDo) Group(cols ...field.Expr) IPastureFeedCrDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureFeedCrDo) Having(conds ...gen.Condition) IPastureFeedCrDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureFeedCrDo) Limit(limit int) IPastureFeedCrDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureFeedCrDo) Offset(offset int) IPastureFeedCrDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureFeedCrDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFeedCrDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureFeedCrDo) Unscoped() IPastureFeedCrDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureFeedCrDo) Create(values ...*pasture.PastureFeedCr) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureFeedCrDo) CreateInBatches(values []*pasture.PastureFeedCr, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureFeedCrDo) Save(values ...*pasture.PastureFeedCr) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureFeedCrDo) First() (*pasture.PastureFeedCr, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedCr), nil
	}
}

func (p pastureFeedCrDo) Take() (*pasture.PastureFeedCr, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedCr), nil
	}
}

func (p pastureFeedCrDo) Last() (*pasture.PastureFeedCr, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedCr), nil
	}
}

func (p pastureFeedCrDo) Find() ([]*pasture.PastureFeedCr, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureFeedCr), err
}

func (p pastureFeedCrDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFeedCr, err error) {
	buf := make([]*pasture.PastureFeedCr, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureFeedCrDo) FindInBatches(result *[]*pasture.PastureFeedCr, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureFeedCrDo) Attrs(attrs ...field.AssignExpr) IPastureFeedCrDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureFeedCrDo) Assign(attrs ...field.AssignExpr) IPastureFeedCrDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureFeedCrDo) Joins(fields ...field.RelationField) IPastureFeedCrDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureFeedCrDo) Preload(fields ...field.RelationField) IPastureFeedCrDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureFeedCrDo) FirstOrInit() (*pasture.PastureFeedCr, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedCr), nil
	}
}

func (p pastureFeedCrDo) FirstOrCreate() (*pasture.PastureFeedCr, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedCr), nil
	}
}

func (p pastureFeedCrDo) FindByPage(offset int, limit int) (result []*pasture.PastureFeedCr, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureFeedCrDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureFeedCrDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureFeedCrDo) Delete(models ...*pasture.PastureFeedCr) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureFeedCrDo) withDO(do gen.Dao) *pastureFeedCrDo {
	p.DO = *do.(*gen.DO)
	return p
}
