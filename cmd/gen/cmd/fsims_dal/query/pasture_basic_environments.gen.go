// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureBasicEnvironment(db *gorm.DB, opts ...gen.DOOption) pastureBasicEnvironment {
	_pastureBasicEnvironment := pastureBasicEnvironment{}

	_pastureBasicEnvironment.pastureBasicEnvironmentDo.UseDB(db, opts...)
	_pastureBasicEnvironment.pastureBasicEnvironmentDo.UseModel(&pasture.PastureBasicEnvironment{})

	tableName := _pastureBasicEnvironment.pastureBasicEnvironmentDo.TableName()
	_pastureBasicEnvironment.ALL = field.NewAsterisk(tableName)
	_pastureBasicEnvironment.ID = field.NewUint(tableName, "id")
	_pastureBasicEnvironment.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureBasicEnvironment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureBasicEnvironment.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureBasicEnvironment.TimeRecordAt = field.NewTime(tableName, "time_record_at")
	_pastureBasicEnvironment.HouseNumber = field.NewString(tableName, "house_number")
	_pastureBasicEnvironment.Environment1 = field.Newfloat64(tableName, "environment1")
	_pastureBasicEnvironment.Environment2 = field.Newfloat64(tableName, "environment2")
	_pastureBasicEnvironment.Environment3 = field.Newfloat64(tableName, "environment3")
	_pastureBasicEnvironment.Environment4 = field.Newfloat64(tableName, "environment4")
	_pastureBasicEnvironment.Environment5 = field.Newfloat64(tableName, "environment5")
	_pastureBasicEnvironment.Environment6 = field.Newfloat64(tableName, "environment6")

	_pastureBasicEnvironment.fillFieldMap()

	return _pastureBasicEnvironment
}

type pastureBasicEnvironment struct {
	pastureBasicEnvironmentDo pastureBasicEnvironmentDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	TimeRecordAt field.Time
	HouseNumber  field.String
	Environment1 field.float64
	Environment2 field.float64
	Environment3 field.float64
	Environment4 field.float64
	Environment5 field.float64
	Environment6 field.float64

	fieldMap map[string]field.Expr
}

func (p pastureBasicEnvironment) Table(newTableName string) *pastureBasicEnvironment {
	p.pastureBasicEnvironmentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureBasicEnvironment) As(alias string) *pastureBasicEnvironment {
	p.pastureBasicEnvironmentDo.DO = *(p.pastureBasicEnvironmentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureBasicEnvironment) updateTableName(table string) *pastureBasicEnvironment {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.TimeRecordAt = field.NewTime(table, "time_record_at")
	p.HouseNumber = field.NewString(table, "house_number")
	p.Environment1 = field.Newfloat64(table, "environment1")
	p.Environment2 = field.Newfloat64(table, "environment2")
	p.Environment3 = field.Newfloat64(table, "environment3")
	p.Environment4 = field.Newfloat64(table, "environment4")
	p.Environment5 = field.Newfloat64(table, "environment5")
	p.Environment6 = field.Newfloat64(table, "environment6")

	p.fillFieldMap()

	return p
}

func (p *pastureBasicEnvironment) WithContext(ctx context.Context) IPastureBasicEnvironmentDo {
	return p.pastureBasicEnvironmentDo.WithContext(ctx)
}

func (p pastureBasicEnvironment) TableName() string { return p.pastureBasicEnvironmentDo.TableName() }

func (p pastureBasicEnvironment) Alias() string { return p.pastureBasicEnvironmentDo.Alias() }

func (p pastureBasicEnvironment) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureBasicEnvironmentDo.Columns(cols...)
}

func (p *pastureBasicEnvironment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureBasicEnvironment) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["time_record_at"] = p.TimeRecordAt
	p.fieldMap["house_number"] = p.HouseNumber
	p.fieldMap["environment1"] = p.Environment1
	p.fieldMap["environment2"] = p.Environment2
	p.fieldMap["environment3"] = p.Environment3
	p.fieldMap["environment4"] = p.Environment4
	p.fieldMap["environment5"] = p.Environment5
	p.fieldMap["environment6"] = p.Environment6
}

func (p pastureBasicEnvironment) clone(db *gorm.DB) pastureBasicEnvironment {
	p.pastureBasicEnvironmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureBasicEnvironment) replaceDB(db *gorm.DB) pastureBasicEnvironment {
	p.pastureBasicEnvironmentDo.ReplaceDB(db)
	return p
}

type pastureBasicEnvironmentDo struct{ gen.DO }

type IPastureBasicEnvironmentDo interface {
	gen.SubQuery
	Debug() IPastureBasicEnvironmentDo
	WithContext(ctx context.Context) IPastureBasicEnvironmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureBasicEnvironmentDo
	WriteDB() IPastureBasicEnvironmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureBasicEnvironmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureBasicEnvironmentDo
	Not(conds ...gen.Condition) IPastureBasicEnvironmentDo
	Or(conds ...gen.Condition) IPastureBasicEnvironmentDo
	Select(conds ...field.Expr) IPastureBasicEnvironmentDo
	Where(conds ...gen.Condition) IPastureBasicEnvironmentDo
	Order(conds ...field.Expr) IPastureBasicEnvironmentDo
	Distinct(cols ...field.Expr) IPastureBasicEnvironmentDo
	Omit(cols ...field.Expr) IPastureBasicEnvironmentDo
	Join(table schema.Tabler, on ...field.Expr) IPastureBasicEnvironmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureBasicEnvironmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureBasicEnvironmentDo
	Group(cols ...field.Expr) IPastureBasicEnvironmentDo
	Having(conds ...gen.Condition) IPastureBasicEnvironmentDo
	Limit(limit int) IPastureBasicEnvironmentDo
	Offset(offset int) IPastureBasicEnvironmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureBasicEnvironmentDo
	Unscoped() IPastureBasicEnvironmentDo
	Create(values ...*pasture.PastureBasicEnvironment) error
	CreateInBatches(values []*pasture.PastureBasicEnvironment, batchSize int) error
	Save(values ...*pasture.PastureBasicEnvironment) error
	First() (*pasture.PastureBasicEnvironment, error)
	Take() (*pasture.PastureBasicEnvironment, error)
	Last() (*pasture.PastureBasicEnvironment, error)
	Find() ([]*pasture.PastureBasicEnvironment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureBasicEnvironment, err error)
	FindInBatches(result *[]*pasture.PastureBasicEnvironment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureBasicEnvironment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureBasicEnvironmentDo
	Assign(attrs ...field.AssignExpr) IPastureBasicEnvironmentDo
	Joins(fields ...field.RelationField) IPastureBasicEnvironmentDo
	Preload(fields ...field.RelationField) IPastureBasicEnvironmentDo
	FirstOrInit() (*pasture.PastureBasicEnvironment, error)
	FirstOrCreate() (*pasture.PastureBasicEnvironment, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureBasicEnvironment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureBasicEnvironmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureBasicEnvironmentDo) Debug() IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureBasicEnvironmentDo) WithContext(ctx context.Context) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureBasicEnvironmentDo) ReadDB() IPastureBasicEnvironmentDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureBasicEnvironmentDo) WriteDB() IPastureBasicEnvironmentDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureBasicEnvironmentDo) Session(config *gorm.Session) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureBasicEnvironmentDo) Clauses(conds ...clause.Expression) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureBasicEnvironmentDo) Returning(value interface{}, columns ...string) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureBasicEnvironmentDo) Not(conds ...gen.Condition) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureBasicEnvironmentDo) Or(conds ...gen.Condition) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureBasicEnvironmentDo) Select(conds ...field.Expr) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureBasicEnvironmentDo) Where(conds ...gen.Condition) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureBasicEnvironmentDo) Order(conds ...field.Expr) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureBasicEnvironmentDo) Distinct(cols ...field.Expr) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureBasicEnvironmentDo) Omit(cols ...field.Expr) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureBasicEnvironmentDo) Join(table schema.Tabler, on ...field.Expr) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureBasicEnvironmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureBasicEnvironmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureBasicEnvironmentDo) Group(cols ...field.Expr) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureBasicEnvironmentDo) Having(conds ...gen.Condition) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureBasicEnvironmentDo) Limit(limit int) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureBasicEnvironmentDo) Offset(offset int) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureBasicEnvironmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureBasicEnvironmentDo) Unscoped() IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureBasicEnvironmentDo) Create(values ...*pasture.PastureBasicEnvironment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureBasicEnvironmentDo) CreateInBatches(values []*pasture.PastureBasicEnvironment, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureBasicEnvironmentDo) Save(values ...*pasture.PastureBasicEnvironment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureBasicEnvironmentDo) First() (*pasture.PastureBasicEnvironment, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureBasicEnvironment), nil
	}
}

func (p pastureBasicEnvironmentDo) Take() (*pasture.PastureBasicEnvironment, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureBasicEnvironment), nil
	}
}

func (p pastureBasicEnvironmentDo) Last() (*pasture.PastureBasicEnvironment, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureBasicEnvironment), nil
	}
}

func (p pastureBasicEnvironmentDo) Find() ([]*pasture.PastureBasicEnvironment, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureBasicEnvironment), err
}

func (p pastureBasicEnvironmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureBasicEnvironment, err error) {
	buf := make([]*pasture.PastureBasicEnvironment, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureBasicEnvironmentDo) FindInBatches(result *[]*pasture.PastureBasicEnvironment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureBasicEnvironmentDo) Attrs(attrs ...field.AssignExpr) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureBasicEnvironmentDo) Assign(attrs ...field.AssignExpr) IPastureBasicEnvironmentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureBasicEnvironmentDo) Joins(fields ...field.RelationField) IPastureBasicEnvironmentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureBasicEnvironmentDo) Preload(fields ...field.RelationField) IPastureBasicEnvironmentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureBasicEnvironmentDo) FirstOrInit() (*pasture.PastureBasicEnvironment, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureBasicEnvironment), nil
	}
}

func (p pastureBasicEnvironmentDo) FirstOrCreate() (*pasture.PastureBasicEnvironment, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureBasicEnvironment), nil
	}
}

func (p pastureBasicEnvironmentDo) FindByPage(offset int, limit int) (result []*pasture.PastureBasicEnvironment, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureBasicEnvironmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureBasicEnvironmentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureBasicEnvironmentDo) Delete(models ...*pasture.PastureBasicEnvironment) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureBasicEnvironmentDo) withDO(do gen.Dao) *pastureBasicEnvironmentDo {
	p.DO = *do.(*gen.DO)
	return p
}
