// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/fatten"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFattenWater(db *gorm.DB, opts ...gen.DOOption) fattenWater {
	_fattenWater := fattenWater{}

	_fattenWater.fattenWaterDo.UseDB(db, opts...)
	_fattenWater.fattenWaterDo.UseModel(&fatten.FattenWater{})

	tableName := _fattenWater.fattenWaterDo.TableName()
	_fattenWater.ALL = field.NewAsterisk(tableName)
	_fattenWater.ID = field.NewUint(tableName, "id")
	_fattenWater.CreatedAt = field.NewTime(tableName, "created_at")
	_fattenWater.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fattenWater.DeletedAt = field.NewField(tableName, "deleted_at")
	_fattenWater.FatPID = field.NewString(tableName, "fat_p_id")
	_fattenWater.PhysicalHazard = fattenWaterHasOnePhysicalHazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PhysicalHazard", "fatten.FattenWaterPhysicalHazard"),
	}

	_fattenWater.ChemicalHazard = fattenWaterHasOneChemicalHazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ChemicalHazard", "fatten.FattenWaterChemicalHazard"),
	}

	_fattenWater.Biohazard = fattenWaterHasOneBiohazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Biohazard", "fatten.FattenWaterBiohazard"),
	}

	_fattenWater.SensoryTraits = fattenWaterHasOneSensoryTraits{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SensoryTraits", "fatten.FattenWaterSensoryTraits"),
	}

	_fattenWater.fillFieldMap()

	return _fattenWater
}

type fattenWater struct {
	fattenWaterDo fattenWaterDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	FatPID         field.String
	PhysicalHazard fattenWaterHasOnePhysicalHazard

	ChemicalHazard fattenWaterHasOneChemicalHazard

	Biohazard fattenWaterHasOneBiohazard

	SensoryTraits fattenWaterHasOneSensoryTraits

	fieldMap map[string]field.Expr
}

func (f fattenWater) Table(newTableName string) *fattenWater {
	f.fattenWaterDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fattenWater) As(alias string) *fattenWater {
	f.fattenWaterDo.DO = *(f.fattenWaterDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fattenWater) updateTableName(table string) *fattenWater {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.FatPID = field.NewString(table, "fat_p_id")

	f.fillFieldMap()

	return f
}

func (f *fattenWater) WithContext(ctx context.Context) IFattenWaterDo {
	return f.fattenWaterDo.WithContext(ctx)
}

func (f fattenWater) TableName() string { return f.fattenWaterDo.TableName() }

func (f fattenWater) Alias() string { return f.fattenWaterDo.Alias() }

func (f fattenWater) Columns(cols ...field.Expr) gen.Columns { return f.fattenWaterDo.Columns(cols...) }

func (f *fattenWater) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fattenWater) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 9)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["fat_p_id"] = f.FatPID

}

func (f fattenWater) clone(db *gorm.DB) fattenWater {
	f.fattenWaterDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fattenWater) replaceDB(db *gorm.DB) fattenWater {
	f.fattenWaterDo.ReplaceDB(db)
	return f
}

type fattenWaterHasOnePhysicalHazard struct {
	db *gorm.DB

	field.RelationField
}

func (a fattenWaterHasOnePhysicalHazard) Where(conds ...field.Expr) *fattenWaterHasOnePhysicalHazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a fattenWaterHasOnePhysicalHazard) WithContext(ctx context.Context) *fattenWaterHasOnePhysicalHazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a fattenWaterHasOnePhysicalHazard) Session(session *gorm.Session) *fattenWaterHasOnePhysicalHazard {
	a.db = a.db.Session(session)
	return &a
}

func (a fattenWaterHasOnePhysicalHazard) Model(m *fatten.FattenWater) *fattenWaterHasOnePhysicalHazardTx {
	return &fattenWaterHasOnePhysicalHazardTx{a.db.Model(m).Association(a.Name())}
}

type fattenWaterHasOnePhysicalHazardTx struct{ tx *gorm.Association }

func (a fattenWaterHasOnePhysicalHazardTx) Find() (result *fatten.FattenWaterPhysicalHazard, err error) {
	return result, a.tx.Find(&result)
}

func (a fattenWaterHasOnePhysicalHazardTx) Append(values ...*fatten.FattenWaterPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a fattenWaterHasOnePhysicalHazardTx) Replace(values ...*fatten.FattenWaterPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a fattenWaterHasOnePhysicalHazardTx) Delete(values ...*fatten.FattenWaterPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a fattenWaterHasOnePhysicalHazardTx) Clear() error {
	return a.tx.Clear()
}

func (a fattenWaterHasOnePhysicalHazardTx) Count() int64 {
	return a.tx.Count()
}

type fattenWaterHasOneChemicalHazard struct {
	db *gorm.DB

	field.RelationField
}

func (a fattenWaterHasOneChemicalHazard) Where(conds ...field.Expr) *fattenWaterHasOneChemicalHazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a fattenWaterHasOneChemicalHazard) WithContext(ctx context.Context) *fattenWaterHasOneChemicalHazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a fattenWaterHasOneChemicalHazard) Session(session *gorm.Session) *fattenWaterHasOneChemicalHazard {
	a.db = a.db.Session(session)
	return &a
}

func (a fattenWaterHasOneChemicalHazard) Model(m *fatten.FattenWater) *fattenWaterHasOneChemicalHazardTx {
	return &fattenWaterHasOneChemicalHazardTx{a.db.Model(m).Association(a.Name())}
}

type fattenWaterHasOneChemicalHazardTx struct{ tx *gorm.Association }

func (a fattenWaterHasOneChemicalHazardTx) Find() (result *fatten.FattenWaterChemicalHazard, err error) {
	return result, a.tx.Find(&result)
}

func (a fattenWaterHasOneChemicalHazardTx) Append(values ...*fatten.FattenWaterChemicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a fattenWaterHasOneChemicalHazardTx) Replace(values ...*fatten.FattenWaterChemicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a fattenWaterHasOneChemicalHazardTx) Delete(values ...*fatten.FattenWaterChemicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a fattenWaterHasOneChemicalHazardTx) Clear() error {
	return a.tx.Clear()
}

func (a fattenWaterHasOneChemicalHazardTx) Count() int64 {
	return a.tx.Count()
}

type fattenWaterHasOneBiohazard struct {
	db *gorm.DB

	field.RelationField
}

func (a fattenWaterHasOneBiohazard) Where(conds ...field.Expr) *fattenWaterHasOneBiohazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a fattenWaterHasOneBiohazard) WithContext(ctx context.Context) *fattenWaterHasOneBiohazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a fattenWaterHasOneBiohazard) Session(session *gorm.Session) *fattenWaterHasOneBiohazard {
	a.db = a.db.Session(session)
	return &a
}

func (a fattenWaterHasOneBiohazard) Model(m *fatten.FattenWater) *fattenWaterHasOneBiohazardTx {
	return &fattenWaterHasOneBiohazardTx{a.db.Model(m).Association(a.Name())}
}

type fattenWaterHasOneBiohazardTx struct{ tx *gorm.Association }

func (a fattenWaterHasOneBiohazardTx) Find() (result *fatten.FattenWaterBiohazard, err error) {
	return result, a.tx.Find(&result)
}

func (a fattenWaterHasOneBiohazardTx) Append(values ...*fatten.FattenWaterBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a fattenWaterHasOneBiohazardTx) Replace(values ...*fatten.FattenWaterBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a fattenWaterHasOneBiohazardTx) Delete(values ...*fatten.FattenWaterBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a fattenWaterHasOneBiohazardTx) Clear() error {
	return a.tx.Clear()
}

func (a fattenWaterHasOneBiohazardTx) Count() int64 {
	return a.tx.Count()
}

type fattenWaterHasOneSensoryTraits struct {
	db *gorm.DB

	field.RelationField
}

func (a fattenWaterHasOneSensoryTraits) Where(conds ...field.Expr) *fattenWaterHasOneSensoryTraits {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a fattenWaterHasOneSensoryTraits) WithContext(ctx context.Context) *fattenWaterHasOneSensoryTraits {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a fattenWaterHasOneSensoryTraits) Session(session *gorm.Session) *fattenWaterHasOneSensoryTraits {
	a.db = a.db.Session(session)
	return &a
}

func (a fattenWaterHasOneSensoryTraits) Model(m *fatten.FattenWater) *fattenWaterHasOneSensoryTraitsTx {
	return &fattenWaterHasOneSensoryTraitsTx{a.db.Model(m).Association(a.Name())}
}

type fattenWaterHasOneSensoryTraitsTx struct{ tx *gorm.Association }

func (a fattenWaterHasOneSensoryTraitsTx) Find() (result *fatten.FattenWaterSensoryTraits, err error) {
	return result, a.tx.Find(&result)
}

func (a fattenWaterHasOneSensoryTraitsTx) Append(values ...*fatten.FattenWaterSensoryTraits) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a fattenWaterHasOneSensoryTraitsTx) Replace(values ...*fatten.FattenWaterSensoryTraits) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a fattenWaterHasOneSensoryTraitsTx) Delete(values ...*fatten.FattenWaterSensoryTraits) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a fattenWaterHasOneSensoryTraitsTx) Clear() error {
	return a.tx.Clear()
}

func (a fattenWaterHasOneSensoryTraitsTx) Count() int64 {
	return a.tx.Count()
}

type fattenWaterDo struct{ gen.DO }

type IFattenWaterDo interface {
	gen.SubQuery
	Debug() IFattenWaterDo
	WithContext(ctx context.Context) IFattenWaterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFattenWaterDo
	WriteDB() IFattenWaterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFattenWaterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFattenWaterDo
	Not(conds ...gen.Condition) IFattenWaterDo
	Or(conds ...gen.Condition) IFattenWaterDo
	Select(conds ...field.Expr) IFattenWaterDo
	Where(conds ...gen.Condition) IFattenWaterDo
	Order(conds ...field.Expr) IFattenWaterDo
	Distinct(cols ...field.Expr) IFattenWaterDo
	Omit(cols ...field.Expr) IFattenWaterDo
	Join(table schema.Tabler, on ...field.Expr) IFattenWaterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFattenWaterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFattenWaterDo
	Group(cols ...field.Expr) IFattenWaterDo
	Having(conds ...gen.Condition) IFattenWaterDo
	Limit(limit int) IFattenWaterDo
	Offset(offset int) IFattenWaterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenWaterDo
	Unscoped() IFattenWaterDo
	Create(values ...*fatten.FattenWater) error
	CreateInBatches(values []*fatten.FattenWater, batchSize int) error
	Save(values ...*fatten.FattenWater) error
	First() (*fatten.FattenWater, error)
	Take() (*fatten.FattenWater, error)
	Last() (*fatten.FattenWater, error)
	Find() ([]*fatten.FattenWater, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenWater, err error)
	FindInBatches(result *[]*fatten.FattenWater, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*fatten.FattenWater) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFattenWaterDo
	Assign(attrs ...field.AssignExpr) IFattenWaterDo
	Joins(fields ...field.RelationField) IFattenWaterDo
	Preload(fields ...field.RelationField) IFattenWaterDo
	FirstOrInit() (*fatten.FattenWater, error)
	FirstOrCreate() (*fatten.FattenWater, error)
	FindByPage(offset int, limit int) (result []*fatten.FattenWater, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFattenWaterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fattenWaterDo) Debug() IFattenWaterDo {
	return f.withDO(f.DO.Debug())
}

func (f fattenWaterDo) WithContext(ctx context.Context) IFattenWaterDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fattenWaterDo) ReadDB() IFattenWaterDo {
	return f.Clauses(dbresolver.Read)
}

func (f fattenWaterDo) WriteDB() IFattenWaterDo {
	return f.Clauses(dbresolver.Write)
}

func (f fattenWaterDo) Session(config *gorm.Session) IFattenWaterDo {
	return f.withDO(f.DO.Session(config))
}

func (f fattenWaterDo) Clauses(conds ...clause.Expression) IFattenWaterDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fattenWaterDo) Returning(value interface{}, columns ...string) IFattenWaterDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fattenWaterDo) Not(conds ...gen.Condition) IFattenWaterDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fattenWaterDo) Or(conds ...gen.Condition) IFattenWaterDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fattenWaterDo) Select(conds ...field.Expr) IFattenWaterDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fattenWaterDo) Where(conds ...gen.Condition) IFattenWaterDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fattenWaterDo) Order(conds ...field.Expr) IFattenWaterDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fattenWaterDo) Distinct(cols ...field.Expr) IFattenWaterDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fattenWaterDo) Omit(cols ...field.Expr) IFattenWaterDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fattenWaterDo) Join(table schema.Tabler, on ...field.Expr) IFattenWaterDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fattenWaterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFattenWaterDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fattenWaterDo) RightJoin(table schema.Tabler, on ...field.Expr) IFattenWaterDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fattenWaterDo) Group(cols ...field.Expr) IFattenWaterDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fattenWaterDo) Having(conds ...gen.Condition) IFattenWaterDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fattenWaterDo) Limit(limit int) IFattenWaterDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fattenWaterDo) Offset(offset int) IFattenWaterDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fattenWaterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenWaterDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fattenWaterDo) Unscoped() IFattenWaterDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fattenWaterDo) Create(values ...*fatten.FattenWater) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fattenWaterDo) CreateInBatches(values []*fatten.FattenWater, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fattenWaterDo) Save(values ...*fatten.FattenWater) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fattenWaterDo) First() (*fatten.FattenWater, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWater), nil
	}
}

func (f fattenWaterDo) Take() (*fatten.FattenWater, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWater), nil
	}
}

func (f fattenWaterDo) Last() (*fatten.FattenWater, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWater), nil
	}
}

func (f fattenWaterDo) Find() ([]*fatten.FattenWater, error) {
	result, err := f.DO.Find()
	return result.([]*fatten.FattenWater), err
}

func (f fattenWaterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenWater, err error) {
	buf := make([]*fatten.FattenWater, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fattenWaterDo) FindInBatches(result *[]*fatten.FattenWater, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fattenWaterDo) Attrs(attrs ...field.AssignExpr) IFattenWaterDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fattenWaterDo) Assign(attrs ...field.AssignExpr) IFattenWaterDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fattenWaterDo) Joins(fields ...field.RelationField) IFattenWaterDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fattenWaterDo) Preload(fields ...field.RelationField) IFattenWaterDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fattenWaterDo) FirstOrInit() (*fatten.FattenWater, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWater), nil
	}
}

func (f fattenWaterDo) FirstOrCreate() (*fatten.FattenWater, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWater), nil
	}
}

func (f fattenWaterDo) FindByPage(offset int, limit int) (result []*fatten.FattenWater, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fattenWaterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fattenWaterDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fattenWaterDo) Delete(models ...*fatten.FattenWater) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fattenWaterDo) withDO(do gen.Dao) *fattenWaterDo {
	f.DO = *do.(*gen.DO)
	return f
}
