// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureSoil(db *gorm.DB, opts ...gen.DOOption) pastureSoil {
	_pastureSoil := pastureSoil{}

	_pastureSoil.pastureSoilDo.UseDB(db, opts...)
	_pastureSoil.pastureSoilDo.UseModel(&pasture.PastureSoil{})

	tableName := _pastureSoil.pastureSoilDo.TableName()
	_pastureSoil.ALL = field.NewAsterisk(tableName)
	_pastureSoil.ID = field.NewUint(tableName, "id")
	_pastureSoil.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureSoil.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureSoil.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureSoil.PasPID = field.NewString(tableName, "pas_p_id")
	_pastureSoil.PhysicalHazard = pastureSoilHasOnePhysicalHazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PhysicalHazard", "pasture.PastureSoilPhysicalHazard"),
	}

	_pastureSoil.Biohazard = pastureSoilHasOneBiohazard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Biohazard", "pasture.PastureSoilBiohazard"),
	}

	_pastureSoil.fillFieldMap()

	return _pastureSoil
}

type pastureSoil struct {
	pastureSoilDo pastureSoilDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	PasPID         field.String
	PhysicalHazard pastureSoilHasOnePhysicalHazard

	Biohazard pastureSoilHasOneBiohazard

	fieldMap map[string]field.Expr
}

func (p pastureSoil) Table(newTableName string) *pastureSoil {
	p.pastureSoilDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureSoil) As(alias string) *pastureSoil {
	p.pastureSoilDo.DO = *(p.pastureSoilDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureSoil) updateTableName(table string) *pastureSoil {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PasPID = field.NewString(table, "pas_p_id")

	p.fillFieldMap()

	return p
}

func (p *pastureSoil) WithContext(ctx context.Context) IPastureSoilDo {
	return p.pastureSoilDo.WithContext(ctx)
}

func (p pastureSoil) TableName() string { return p.pastureSoilDo.TableName() }

func (p pastureSoil) Alias() string { return p.pastureSoilDo.Alias() }

func (p pastureSoil) Columns(cols ...field.Expr) gen.Columns { return p.pastureSoilDo.Columns(cols...) }

func (p *pastureSoil) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureSoil) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["pas_p_id"] = p.PasPID

}

func (p pastureSoil) clone(db *gorm.DB) pastureSoil {
	p.pastureSoilDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureSoil) replaceDB(db *gorm.DB) pastureSoil {
	p.pastureSoilDo.ReplaceDB(db)
	return p
}

type pastureSoilHasOnePhysicalHazard struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureSoilHasOnePhysicalHazard) Where(conds ...field.Expr) *pastureSoilHasOnePhysicalHazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureSoilHasOnePhysicalHazard) WithContext(ctx context.Context) *pastureSoilHasOnePhysicalHazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureSoilHasOnePhysicalHazard) Session(session *gorm.Session) *pastureSoilHasOnePhysicalHazard {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureSoilHasOnePhysicalHazard) Model(m *pasture.PastureSoil) *pastureSoilHasOnePhysicalHazardTx {
	return &pastureSoilHasOnePhysicalHazardTx{a.db.Model(m).Association(a.Name())}
}

type pastureSoilHasOnePhysicalHazardTx struct{ tx *gorm.Association }

func (a pastureSoilHasOnePhysicalHazardTx) Find() (result *pasture.PastureSoilPhysicalHazard, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureSoilHasOnePhysicalHazardTx) Append(values ...*pasture.PastureSoilPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureSoilHasOnePhysicalHazardTx) Replace(values ...*pasture.PastureSoilPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureSoilHasOnePhysicalHazardTx) Delete(values ...*pasture.PastureSoilPhysicalHazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureSoilHasOnePhysicalHazardTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureSoilHasOnePhysicalHazardTx) Count() int64 {
	return a.tx.Count()
}

type pastureSoilHasOneBiohazard struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureSoilHasOneBiohazard) Where(conds ...field.Expr) *pastureSoilHasOneBiohazard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureSoilHasOneBiohazard) WithContext(ctx context.Context) *pastureSoilHasOneBiohazard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureSoilHasOneBiohazard) Session(session *gorm.Session) *pastureSoilHasOneBiohazard {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureSoilHasOneBiohazard) Model(m *pasture.PastureSoil) *pastureSoilHasOneBiohazardTx {
	return &pastureSoilHasOneBiohazardTx{a.db.Model(m).Association(a.Name())}
}

type pastureSoilHasOneBiohazardTx struct{ tx *gorm.Association }

func (a pastureSoilHasOneBiohazardTx) Find() (result *pasture.PastureSoilBiohazard, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureSoilHasOneBiohazardTx) Append(values ...*pasture.PastureSoilBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureSoilHasOneBiohazardTx) Replace(values ...*pasture.PastureSoilBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureSoilHasOneBiohazardTx) Delete(values ...*pasture.PastureSoilBiohazard) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureSoilHasOneBiohazardTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureSoilHasOneBiohazardTx) Count() int64 {
	return a.tx.Count()
}

type pastureSoilDo struct{ gen.DO }

type IPastureSoilDo interface {
	gen.SubQuery
	Debug() IPastureSoilDo
	WithContext(ctx context.Context) IPastureSoilDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureSoilDo
	WriteDB() IPastureSoilDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureSoilDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureSoilDo
	Not(conds ...gen.Condition) IPastureSoilDo
	Or(conds ...gen.Condition) IPastureSoilDo
	Select(conds ...field.Expr) IPastureSoilDo
	Where(conds ...gen.Condition) IPastureSoilDo
	Order(conds ...field.Expr) IPastureSoilDo
	Distinct(cols ...field.Expr) IPastureSoilDo
	Omit(cols ...field.Expr) IPastureSoilDo
	Join(table schema.Tabler, on ...field.Expr) IPastureSoilDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureSoilDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureSoilDo
	Group(cols ...field.Expr) IPastureSoilDo
	Having(conds ...gen.Condition) IPastureSoilDo
	Limit(limit int) IPastureSoilDo
	Offset(offset int) IPastureSoilDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureSoilDo
	Unscoped() IPastureSoilDo
	Create(values ...*pasture.PastureSoil) error
	CreateInBatches(values []*pasture.PastureSoil, batchSize int) error
	Save(values ...*pasture.PastureSoil) error
	First() (*pasture.PastureSoil, error)
	Take() (*pasture.PastureSoil, error)
	Last() (*pasture.PastureSoil, error)
	Find() ([]*pasture.PastureSoil, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureSoil, err error)
	FindInBatches(result *[]*pasture.PastureSoil, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureSoil) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureSoilDo
	Assign(attrs ...field.AssignExpr) IPastureSoilDo
	Joins(fields ...field.RelationField) IPastureSoilDo
	Preload(fields ...field.RelationField) IPastureSoilDo
	FirstOrInit() (*pasture.PastureSoil, error)
	FirstOrCreate() (*pasture.PastureSoil, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureSoil, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureSoilDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureSoilDo) Debug() IPastureSoilDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureSoilDo) WithContext(ctx context.Context) IPastureSoilDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureSoilDo) ReadDB() IPastureSoilDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureSoilDo) WriteDB() IPastureSoilDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureSoilDo) Session(config *gorm.Session) IPastureSoilDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureSoilDo) Clauses(conds ...clause.Expression) IPastureSoilDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureSoilDo) Returning(value interface{}, columns ...string) IPastureSoilDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureSoilDo) Not(conds ...gen.Condition) IPastureSoilDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureSoilDo) Or(conds ...gen.Condition) IPastureSoilDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureSoilDo) Select(conds ...field.Expr) IPastureSoilDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureSoilDo) Where(conds ...gen.Condition) IPastureSoilDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureSoilDo) Order(conds ...field.Expr) IPastureSoilDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureSoilDo) Distinct(cols ...field.Expr) IPastureSoilDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureSoilDo) Omit(cols ...field.Expr) IPastureSoilDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureSoilDo) Join(table schema.Tabler, on ...field.Expr) IPastureSoilDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureSoilDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureSoilDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureSoilDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureSoilDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureSoilDo) Group(cols ...field.Expr) IPastureSoilDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureSoilDo) Having(conds ...gen.Condition) IPastureSoilDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureSoilDo) Limit(limit int) IPastureSoilDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureSoilDo) Offset(offset int) IPastureSoilDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureSoilDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureSoilDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureSoilDo) Unscoped() IPastureSoilDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureSoilDo) Create(values ...*pasture.PastureSoil) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureSoilDo) CreateInBatches(values []*pasture.PastureSoil, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureSoilDo) Save(values ...*pasture.PastureSoil) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureSoilDo) First() (*pasture.PastureSoil, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoil), nil
	}
}

func (p pastureSoilDo) Take() (*pasture.PastureSoil, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoil), nil
	}
}

func (p pastureSoilDo) Last() (*pasture.PastureSoil, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoil), nil
	}
}

func (p pastureSoilDo) Find() ([]*pasture.PastureSoil, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureSoil), err
}

func (p pastureSoilDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureSoil, err error) {
	buf := make([]*pasture.PastureSoil, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureSoilDo) FindInBatches(result *[]*pasture.PastureSoil, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureSoilDo) Attrs(attrs ...field.AssignExpr) IPastureSoilDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureSoilDo) Assign(attrs ...field.AssignExpr) IPastureSoilDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureSoilDo) Joins(fields ...field.RelationField) IPastureSoilDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureSoilDo) Preload(fields ...field.RelationField) IPastureSoilDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureSoilDo) FirstOrInit() (*pasture.PastureSoil, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoil), nil
	}
}

func (p pastureSoilDo) FirstOrCreate() (*pasture.PastureSoil, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoil), nil
	}
}

func (p pastureSoilDo) FindByPage(offset int, limit int) (result []*pasture.PastureSoil, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureSoilDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureSoilDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureSoilDo) Delete(models ...*pasture.PastureSoil) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureSoilDo) withDO(do gen.Dao) *pastureSoilDo {
	p.DO = *do.(*gen.DO)
	return p
}
