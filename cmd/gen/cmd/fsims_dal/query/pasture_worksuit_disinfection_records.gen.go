// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureWorksuitDisinfectionRecord(db *gorm.DB, opts ...gen.DOOption) pastureWorksuitDisinfectionRecord {
	_pastureWorksuitDisinfectionRecord := pastureWorksuitDisinfectionRecord{}

	_pastureWorksuitDisinfectionRecord.pastureWorksuitDisinfectionRecordDo.UseDB(db, opts...)
	_pastureWorksuitDisinfectionRecord.pastureWorksuitDisinfectionRecordDo.UseModel(&pasture.PastureWorksuitDisinfectionRecord{})

	tableName := _pastureWorksuitDisinfectionRecord.pastureWorksuitDisinfectionRecordDo.TableName()
	_pastureWorksuitDisinfectionRecord.ALL = field.NewAsterisk(tableName)
	_pastureWorksuitDisinfectionRecord.ID = field.NewUint(tableName, "id")
	_pastureWorksuitDisinfectionRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureWorksuitDisinfectionRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureWorksuitDisinfectionRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureWorksuitDisinfectionRecord.Method = field.NewString(tableName, "method")
	_pastureWorksuitDisinfectionRecord.Concentration = field.NewUint(tableName, "concentration")
	_pastureWorksuitDisinfectionRecord.Duration = field.NewUint64(tableName, "duration")

	_pastureWorksuitDisinfectionRecord.fillFieldMap()

	return _pastureWorksuitDisinfectionRecord
}

type pastureWorksuitDisinfectionRecord struct {
	pastureWorksuitDisinfectionRecordDo pastureWorksuitDisinfectionRecordDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Method        field.String
	Concentration field.Uint
	Duration      field.Uint64

	fieldMap map[string]field.Expr
}

func (p pastureWorksuitDisinfectionRecord) Table(newTableName string) *pastureWorksuitDisinfectionRecord {
	p.pastureWorksuitDisinfectionRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureWorksuitDisinfectionRecord) As(alias string) *pastureWorksuitDisinfectionRecord {
	p.pastureWorksuitDisinfectionRecordDo.DO = *(p.pastureWorksuitDisinfectionRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureWorksuitDisinfectionRecord) updateTableName(table string) *pastureWorksuitDisinfectionRecord {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Method = field.NewString(table, "method")
	p.Concentration = field.NewUint(table, "concentration")
	p.Duration = field.NewUint64(table, "duration")

	p.fillFieldMap()

	return p
}

func (p *pastureWorksuitDisinfectionRecord) WithContext(ctx context.Context) IPastureWorksuitDisinfectionRecordDo {
	return p.pastureWorksuitDisinfectionRecordDo.WithContext(ctx)
}

func (p pastureWorksuitDisinfectionRecord) TableName() string {
	return p.pastureWorksuitDisinfectionRecordDo.TableName()
}

func (p pastureWorksuitDisinfectionRecord) Alias() string {
	return p.pastureWorksuitDisinfectionRecordDo.Alias()
}

func (p pastureWorksuitDisinfectionRecord) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureWorksuitDisinfectionRecordDo.Columns(cols...)
}

func (p *pastureWorksuitDisinfectionRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureWorksuitDisinfectionRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["method"] = p.Method
	p.fieldMap["concentration"] = p.Concentration
	p.fieldMap["duration"] = p.Duration
}

func (p pastureWorksuitDisinfectionRecord) clone(db *gorm.DB) pastureWorksuitDisinfectionRecord {
	p.pastureWorksuitDisinfectionRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureWorksuitDisinfectionRecord) replaceDB(db *gorm.DB) pastureWorksuitDisinfectionRecord {
	p.pastureWorksuitDisinfectionRecordDo.ReplaceDB(db)
	return p
}

type pastureWorksuitDisinfectionRecordDo struct{ gen.DO }

type IPastureWorksuitDisinfectionRecordDo interface {
	gen.SubQuery
	Debug() IPastureWorksuitDisinfectionRecordDo
	WithContext(ctx context.Context) IPastureWorksuitDisinfectionRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureWorksuitDisinfectionRecordDo
	WriteDB() IPastureWorksuitDisinfectionRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureWorksuitDisinfectionRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureWorksuitDisinfectionRecordDo
	Not(conds ...gen.Condition) IPastureWorksuitDisinfectionRecordDo
	Or(conds ...gen.Condition) IPastureWorksuitDisinfectionRecordDo
	Select(conds ...field.Expr) IPastureWorksuitDisinfectionRecordDo
	Where(conds ...gen.Condition) IPastureWorksuitDisinfectionRecordDo
	Order(conds ...field.Expr) IPastureWorksuitDisinfectionRecordDo
	Distinct(cols ...field.Expr) IPastureWorksuitDisinfectionRecordDo
	Omit(cols ...field.Expr) IPastureWorksuitDisinfectionRecordDo
	Join(table schema.Tabler, on ...field.Expr) IPastureWorksuitDisinfectionRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWorksuitDisinfectionRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureWorksuitDisinfectionRecordDo
	Group(cols ...field.Expr) IPastureWorksuitDisinfectionRecordDo
	Having(conds ...gen.Condition) IPastureWorksuitDisinfectionRecordDo
	Limit(limit int) IPastureWorksuitDisinfectionRecordDo
	Offset(offset int) IPastureWorksuitDisinfectionRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWorksuitDisinfectionRecordDo
	Unscoped() IPastureWorksuitDisinfectionRecordDo
	Create(values ...*pasture.PastureWorksuitDisinfectionRecord) error
	CreateInBatches(values []*pasture.PastureWorksuitDisinfectionRecord, batchSize int) error
	Save(values ...*pasture.PastureWorksuitDisinfectionRecord) error
	First() (*pasture.PastureWorksuitDisinfectionRecord, error)
	Take() (*pasture.PastureWorksuitDisinfectionRecord, error)
	Last() (*pasture.PastureWorksuitDisinfectionRecord, error)
	Find() ([]*pasture.PastureWorksuitDisinfectionRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWorksuitDisinfectionRecord, err error)
	FindInBatches(result *[]*pasture.PastureWorksuitDisinfectionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureWorksuitDisinfectionRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureWorksuitDisinfectionRecordDo
	Assign(attrs ...field.AssignExpr) IPastureWorksuitDisinfectionRecordDo
	Joins(fields ...field.RelationField) IPastureWorksuitDisinfectionRecordDo
	Preload(fields ...field.RelationField) IPastureWorksuitDisinfectionRecordDo
	FirstOrInit() (*pasture.PastureWorksuitDisinfectionRecord, error)
	FirstOrCreate() (*pasture.PastureWorksuitDisinfectionRecord, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureWorksuitDisinfectionRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureWorksuitDisinfectionRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureWorksuitDisinfectionRecordDo) Debug() IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureWorksuitDisinfectionRecordDo) WithContext(ctx context.Context) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureWorksuitDisinfectionRecordDo) ReadDB() IPastureWorksuitDisinfectionRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureWorksuitDisinfectionRecordDo) WriteDB() IPastureWorksuitDisinfectionRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureWorksuitDisinfectionRecordDo) Session(config *gorm.Session) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureWorksuitDisinfectionRecordDo) Clauses(conds ...clause.Expression) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureWorksuitDisinfectionRecordDo) Returning(value interface{}, columns ...string) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureWorksuitDisinfectionRecordDo) Not(conds ...gen.Condition) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureWorksuitDisinfectionRecordDo) Or(conds ...gen.Condition) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureWorksuitDisinfectionRecordDo) Select(conds ...field.Expr) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureWorksuitDisinfectionRecordDo) Where(conds ...gen.Condition) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureWorksuitDisinfectionRecordDo) Order(conds ...field.Expr) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureWorksuitDisinfectionRecordDo) Distinct(cols ...field.Expr) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureWorksuitDisinfectionRecordDo) Omit(cols ...field.Expr) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureWorksuitDisinfectionRecordDo) Join(table schema.Tabler, on ...field.Expr) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureWorksuitDisinfectionRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureWorksuitDisinfectionRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureWorksuitDisinfectionRecordDo) Group(cols ...field.Expr) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureWorksuitDisinfectionRecordDo) Having(conds ...gen.Condition) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureWorksuitDisinfectionRecordDo) Limit(limit int) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureWorksuitDisinfectionRecordDo) Offset(offset int) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureWorksuitDisinfectionRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureWorksuitDisinfectionRecordDo) Unscoped() IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureWorksuitDisinfectionRecordDo) Create(values ...*pasture.PastureWorksuitDisinfectionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureWorksuitDisinfectionRecordDo) CreateInBatches(values []*pasture.PastureWorksuitDisinfectionRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureWorksuitDisinfectionRecordDo) Save(values ...*pasture.PastureWorksuitDisinfectionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureWorksuitDisinfectionRecordDo) First() (*pasture.PastureWorksuitDisinfectionRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWorksuitDisinfectionRecord), nil
	}
}

func (p pastureWorksuitDisinfectionRecordDo) Take() (*pasture.PastureWorksuitDisinfectionRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWorksuitDisinfectionRecord), nil
	}
}

func (p pastureWorksuitDisinfectionRecordDo) Last() (*pasture.PastureWorksuitDisinfectionRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWorksuitDisinfectionRecord), nil
	}
}

func (p pastureWorksuitDisinfectionRecordDo) Find() ([]*pasture.PastureWorksuitDisinfectionRecord, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureWorksuitDisinfectionRecord), err
}

func (p pastureWorksuitDisinfectionRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWorksuitDisinfectionRecord, err error) {
	buf := make([]*pasture.PastureWorksuitDisinfectionRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureWorksuitDisinfectionRecordDo) FindInBatches(result *[]*pasture.PastureWorksuitDisinfectionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureWorksuitDisinfectionRecordDo) Attrs(attrs ...field.AssignExpr) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureWorksuitDisinfectionRecordDo) Assign(attrs ...field.AssignExpr) IPastureWorksuitDisinfectionRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureWorksuitDisinfectionRecordDo) Joins(fields ...field.RelationField) IPastureWorksuitDisinfectionRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureWorksuitDisinfectionRecordDo) Preload(fields ...field.RelationField) IPastureWorksuitDisinfectionRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureWorksuitDisinfectionRecordDo) FirstOrInit() (*pasture.PastureWorksuitDisinfectionRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWorksuitDisinfectionRecord), nil
	}
}

func (p pastureWorksuitDisinfectionRecordDo) FirstOrCreate() (*pasture.PastureWorksuitDisinfectionRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWorksuitDisinfectionRecord), nil
	}
}

func (p pastureWorksuitDisinfectionRecordDo) FindByPage(offset int, limit int) (result []*pasture.PastureWorksuitDisinfectionRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureWorksuitDisinfectionRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureWorksuitDisinfectionRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureWorksuitDisinfectionRecordDo) Delete(models ...*pasture.PastureWorksuitDisinfectionRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureWorksuitDisinfectionRecordDo) withDO(do gen.Dao) *pastureWorksuitDisinfectionRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
