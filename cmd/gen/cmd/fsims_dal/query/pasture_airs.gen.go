// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureAir(db *gorm.DB, opts ...gen.DOOption) pastureAir {
	_pastureAir := pastureAir{}

	_pastureAir.pastureAirDo.UseDB(db, opts...)
	_pastureAir.pastureAirDo.UseModel(&pasture.PastureAir{})

	tableName := _pastureAir.pastureAirDo.TableName()
	_pastureAir.ALL = field.NewAsterisk(tableName)
	_pastureAir.ID = field.NewUint(tableName, "id")
	_pastureAir.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureAir.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureAir.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureAir.TotalBacteria = field.NewUint(tableName, "total_bacteria")
	_pastureAir.AmmoniaGas = field.Newfloat64(tableName, "ammonia_gas")
	_pastureAir.HydrogenSulfide = field.Newfloat64(tableName, "hydrogen_sulfide")
	_pastureAir.CarbonDioxide = field.Newfloat64(tableName, "carbon_dioxide")
	_pastureAir.PM10 = field.Newfloat64(tableName, "pm10")
	_pastureAir.TSP = field.Newfloat64(tableName, "tsp")
	_pastureAir.Stench = field.NewUint(tableName, "stench")
	_pastureAir.PasPID = field.NewString(tableName, "pas_p_id")

	_pastureAir.fillFieldMap()

	return _pastureAir
}

type pastureAir struct {
	pastureAirDo pastureAirDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	TotalBacteria   field.Uint
	AmmoniaGas      field.float64
	HydrogenSulfide field.float64
	CarbonDioxide   field.float64
	PM10            field.float64
	TSP             field.float64
	Stench          field.Uint
	PasPID          field.String

	fieldMap map[string]field.Expr
}

func (p pastureAir) Table(newTableName string) *pastureAir {
	p.pastureAirDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureAir) As(alias string) *pastureAir {
	p.pastureAirDo.DO = *(p.pastureAirDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureAir) updateTableName(table string) *pastureAir {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.TotalBacteria = field.NewUint(table, "total_bacteria")
	p.AmmoniaGas = field.Newfloat64(table, "ammonia_gas")
	p.HydrogenSulfide = field.Newfloat64(table, "hydrogen_sulfide")
	p.CarbonDioxide = field.Newfloat64(table, "carbon_dioxide")
	p.PM10 = field.Newfloat64(table, "pm10")
	p.TSP = field.Newfloat64(table, "tsp")
	p.Stench = field.NewUint(table, "stench")
	p.PasPID = field.NewString(table, "pas_p_id")

	p.fillFieldMap()

	return p
}

func (p *pastureAir) WithContext(ctx context.Context) IPastureAirDo {
	return p.pastureAirDo.WithContext(ctx)
}

func (p pastureAir) TableName() string { return p.pastureAirDo.TableName() }

func (p pastureAir) Alias() string { return p.pastureAirDo.Alias() }

func (p pastureAir) Columns(cols ...field.Expr) gen.Columns { return p.pastureAirDo.Columns(cols...) }

func (p *pastureAir) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureAir) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["total_bacteria"] = p.TotalBacteria
	p.fieldMap["ammonia_gas"] = p.AmmoniaGas
	p.fieldMap["hydrogen_sulfide"] = p.HydrogenSulfide
	p.fieldMap["carbon_dioxide"] = p.CarbonDioxide
	p.fieldMap["pm10"] = p.PM10
	p.fieldMap["tsp"] = p.TSP
	p.fieldMap["stench"] = p.Stench
	p.fieldMap["pas_p_id"] = p.PasPID
}

func (p pastureAir) clone(db *gorm.DB) pastureAir {
	p.pastureAirDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureAir) replaceDB(db *gorm.DB) pastureAir {
	p.pastureAirDo.ReplaceDB(db)
	return p
}

type pastureAirDo struct{ gen.DO }

type IPastureAirDo interface {
	gen.SubQuery
	Debug() IPastureAirDo
	WithContext(ctx context.Context) IPastureAirDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureAirDo
	WriteDB() IPastureAirDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureAirDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureAirDo
	Not(conds ...gen.Condition) IPastureAirDo
	Or(conds ...gen.Condition) IPastureAirDo
	Select(conds ...field.Expr) IPastureAirDo
	Where(conds ...gen.Condition) IPastureAirDo
	Order(conds ...field.Expr) IPastureAirDo
	Distinct(cols ...field.Expr) IPastureAirDo
	Omit(cols ...field.Expr) IPastureAirDo
	Join(table schema.Tabler, on ...field.Expr) IPastureAirDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureAirDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureAirDo
	Group(cols ...field.Expr) IPastureAirDo
	Having(conds ...gen.Condition) IPastureAirDo
	Limit(limit int) IPastureAirDo
	Offset(offset int) IPastureAirDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureAirDo
	Unscoped() IPastureAirDo
	Create(values ...*pasture.PastureAir) error
	CreateInBatches(values []*pasture.PastureAir, batchSize int) error
	Save(values ...*pasture.PastureAir) error
	First() (*pasture.PastureAir, error)
	Take() (*pasture.PastureAir, error)
	Last() (*pasture.PastureAir, error)
	Find() ([]*pasture.PastureAir, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureAir, err error)
	FindInBatches(result *[]*pasture.PastureAir, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureAir) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureAirDo
	Assign(attrs ...field.AssignExpr) IPastureAirDo
	Joins(fields ...field.RelationField) IPastureAirDo
	Preload(fields ...field.RelationField) IPastureAirDo
	FirstOrInit() (*pasture.PastureAir, error)
	FirstOrCreate() (*pasture.PastureAir, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureAir, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureAirDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureAirDo) Debug() IPastureAirDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureAirDo) WithContext(ctx context.Context) IPastureAirDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureAirDo) ReadDB() IPastureAirDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureAirDo) WriteDB() IPastureAirDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureAirDo) Session(config *gorm.Session) IPastureAirDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureAirDo) Clauses(conds ...clause.Expression) IPastureAirDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureAirDo) Returning(value interface{}, columns ...string) IPastureAirDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureAirDo) Not(conds ...gen.Condition) IPastureAirDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureAirDo) Or(conds ...gen.Condition) IPastureAirDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureAirDo) Select(conds ...field.Expr) IPastureAirDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureAirDo) Where(conds ...gen.Condition) IPastureAirDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureAirDo) Order(conds ...field.Expr) IPastureAirDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureAirDo) Distinct(cols ...field.Expr) IPastureAirDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureAirDo) Omit(cols ...field.Expr) IPastureAirDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureAirDo) Join(table schema.Tabler, on ...field.Expr) IPastureAirDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureAirDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureAirDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureAirDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureAirDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureAirDo) Group(cols ...field.Expr) IPastureAirDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureAirDo) Having(conds ...gen.Condition) IPastureAirDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureAirDo) Limit(limit int) IPastureAirDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureAirDo) Offset(offset int) IPastureAirDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureAirDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureAirDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureAirDo) Unscoped() IPastureAirDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureAirDo) Create(values ...*pasture.PastureAir) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureAirDo) CreateInBatches(values []*pasture.PastureAir, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureAirDo) Save(values ...*pasture.PastureAir) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureAirDo) First() (*pasture.PastureAir, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureAir), nil
	}
}

func (p pastureAirDo) Take() (*pasture.PastureAir, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureAir), nil
	}
}

func (p pastureAirDo) Last() (*pasture.PastureAir, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureAir), nil
	}
}

func (p pastureAirDo) Find() ([]*pasture.PastureAir, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureAir), err
}

func (p pastureAirDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureAir, err error) {
	buf := make([]*pasture.PastureAir, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureAirDo) FindInBatches(result *[]*pasture.PastureAir, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureAirDo) Attrs(attrs ...field.AssignExpr) IPastureAirDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureAirDo) Assign(attrs ...field.AssignExpr) IPastureAirDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureAirDo) Joins(fields ...field.RelationField) IPastureAirDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureAirDo) Preload(fields ...field.RelationField) IPastureAirDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureAirDo) FirstOrInit() (*pasture.PastureAir, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureAir), nil
	}
}

func (p pastureAirDo) FirstOrCreate() (*pasture.PastureAir, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureAir), nil
	}
}

func (p pastureAirDo) FindByPage(offset int, limit int) (result []*pasture.PastureAir, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureAirDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureAirDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureAirDo) Delete(models ...*pasture.PastureAir) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureAirDo) withDO(do gen.Dao) *pastureAirDo {
	p.DO = *do.(*gen.DO)
	return p
}
