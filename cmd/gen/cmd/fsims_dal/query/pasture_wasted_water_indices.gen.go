// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureWastedWaterIndex(db *gorm.DB, opts ...gen.DOOption) pastureWastedWaterIndex {
	_pastureWastedWaterIndex := pastureWastedWaterIndex{}

	_pastureWastedWaterIndex.pastureWastedWaterIndexDo.UseDB(db, opts...)
	_pastureWastedWaterIndex.pastureWastedWaterIndexDo.UseModel(&pasture.PastureWastedWaterIndex{})

	tableName := _pastureWastedWaterIndex.pastureWastedWaterIndexDo.TableName()
	_pastureWastedWaterIndex.ALL = field.NewAsterisk(tableName)
	_pastureWastedWaterIndex.ID = field.NewUint(tableName, "id")
	_pastureWastedWaterIndex.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureWastedWaterIndex.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureWastedWaterIndex.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureWastedWaterIndex.TimeRecordAt = field.NewTime(tableName, "time_record_at")
	_pastureWastedWaterIndex.HouseNumber = field.NewString(tableName, "house_number")
	_pastureWastedWaterIndex.WastedWaterIndex1 = field.Newfloat64(tableName, "wasted_water_index1")
	_pastureWastedWaterIndex.WastedWaterIndex2 = field.Newfloat64(tableName, "wasted_water_index2")
	_pastureWastedWaterIndex.WastedWaterIndex3 = field.Newfloat64(tableName, "wasted_water_index3")
	_pastureWastedWaterIndex.WastedWaterIndex4 = field.Newfloat64(tableName, "wasted_water_index4")
	_pastureWastedWaterIndex.WastedWaterIndex5 = field.Newfloat64(tableName, "wasted_water_index5")
	_pastureWastedWaterIndex.WastedWaterIndex6 = field.Newfloat64(tableName, "wasted_water_index6")
	_pastureWastedWaterIndex.WastedWaterIndex7 = field.Newfloat64(tableName, "wasted_water_index7")
	_pastureWastedWaterIndex.WastedWaterIndex8 = field.Newfloat64(tableName, "wasted_water_index8")
	_pastureWastedWaterIndex.WastedWaterIndex9 = field.Newfloat64(tableName, "wasted_water_index9")

	_pastureWastedWaterIndex.fillFieldMap()

	return _pastureWastedWaterIndex
}

type pastureWastedWaterIndex struct {
	pastureWastedWaterIndexDo pastureWastedWaterIndexDo

	ALL               field.Asterisk
	ID                field.Uint
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	TimeRecordAt      field.Time
	HouseNumber       field.String
	WastedWaterIndex1 field.float64
	WastedWaterIndex2 field.float64
	WastedWaterIndex3 field.float64
	WastedWaterIndex4 field.float64
	WastedWaterIndex5 field.float64
	WastedWaterIndex6 field.float64
	WastedWaterIndex7 field.float64
	WastedWaterIndex8 field.float64
	WastedWaterIndex9 field.float64

	fieldMap map[string]field.Expr
}

func (p pastureWastedWaterIndex) Table(newTableName string) *pastureWastedWaterIndex {
	p.pastureWastedWaterIndexDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureWastedWaterIndex) As(alias string) *pastureWastedWaterIndex {
	p.pastureWastedWaterIndexDo.DO = *(p.pastureWastedWaterIndexDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureWastedWaterIndex) updateTableName(table string) *pastureWastedWaterIndex {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.TimeRecordAt = field.NewTime(table, "time_record_at")
	p.HouseNumber = field.NewString(table, "house_number")
	p.WastedWaterIndex1 = field.Newfloat64(table, "wasted_water_index1")
	p.WastedWaterIndex2 = field.Newfloat64(table, "wasted_water_index2")
	p.WastedWaterIndex3 = field.Newfloat64(table, "wasted_water_index3")
	p.WastedWaterIndex4 = field.Newfloat64(table, "wasted_water_index4")
	p.WastedWaterIndex5 = field.Newfloat64(table, "wasted_water_index5")
	p.WastedWaterIndex6 = field.Newfloat64(table, "wasted_water_index6")
	p.WastedWaterIndex7 = field.Newfloat64(table, "wasted_water_index7")
	p.WastedWaterIndex8 = field.Newfloat64(table, "wasted_water_index8")
	p.WastedWaterIndex9 = field.Newfloat64(table, "wasted_water_index9")

	p.fillFieldMap()

	return p
}

func (p *pastureWastedWaterIndex) WithContext(ctx context.Context) IPastureWastedWaterIndexDo {
	return p.pastureWastedWaterIndexDo.WithContext(ctx)
}

func (p pastureWastedWaterIndex) TableName() string { return p.pastureWastedWaterIndexDo.TableName() }

func (p pastureWastedWaterIndex) Alias() string { return p.pastureWastedWaterIndexDo.Alias() }

func (p pastureWastedWaterIndex) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureWastedWaterIndexDo.Columns(cols...)
}

func (p *pastureWastedWaterIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureWastedWaterIndex) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 15)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["time_record_at"] = p.TimeRecordAt
	p.fieldMap["house_number"] = p.HouseNumber
	p.fieldMap["wasted_water_index1"] = p.WastedWaterIndex1
	p.fieldMap["wasted_water_index2"] = p.WastedWaterIndex2
	p.fieldMap["wasted_water_index3"] = p.WastedWaterIndex3
	p.fieldMap["wasted_water_index4"] = p.WastedWaterIndex4
	p.fieldMap["wasted_water_index5"] = p.WastedWaterIndex5
	p.fieldMap["wasted_water_index6"] = p.WastedWaterIndex6
	p.fieldMap["wasted_water_index7"] = p.WastedWaterIndex7
	p.fieldMap["wasted_water_index8"] = p.WastedWaterIndex8
	p.fieldMap["wasted_water_index9"] = p.WastedWaterIndex9
}

func (p pastureWastedWaterIndex) clone(db *gorm.DB) pastureWastedWaterIndex {
	p.pastureWastedWaterIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureWastedWaterIndex) replaceDB(db *gorm.DB) pastureWastedWaterIndex {
	p.pastureWastedWaterIndexDo.ReplaceDB(db)
	return p
}

type pastureWastedWaterIndexDo struct{ gen.DO }

type IPastureWastedWaterIndexDo interface {
	gen.SubQuery
	Debug() IPastureWastedWaterIndexDo
	WithContext(ctx context.Context) IPastureWastedWaterIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureWastedWaterIndexDo
	WriteDB() IPastureWastedWaterIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureWastedWaterIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureWastedWaterIndexDo
	Not(conds ...gen.Condition) IPastureWastedWaterIndexDo
	Or(conds ...gen.Condition) IPastureWastedWaterIndexDo
	Select(conds ...field.Expr) IPastureWastedWaterIndexDo
	Where(conds ...gen.Condition) IPastureWastedWaterIndexDo
	Order(conds ...field.Expr) IPastureWastedWaterIndexDo
	Distinct(cols ...field.Expr) IPastureWastedWaterIndexDo
	Omit(cols ...field.Expr) IPastureWastedWaterIndexDo
	Join(table schema.Tabler, on ...field.Expr) IPastureWastedWaterIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWastedWaterIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureWastedWaterIndexDo
	Group(cols ...field.Expr) IPastureWastedWaterIndexDo
	Having(conds ...gen.Condition) IPastureWastedWaterIndexDo
	Limit(limit int) IPastureWastedWaterIndexDo
	Offset(offset int) IPastureWastedWaterIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWastedWaterIndexDo
	Unscoped() IPastureWastedWaterIndexDo
	Create(values ...*pasture.PastureWastedWaterIndex) error
	CreateInBatches(values []*pasture.PastureWastedWaterIndex, batchSize int) error
	Save(values ...*pasture.PastureWastedWaterIndex) error
	First() (*pasture.PastureWastedWaterIndex, error)
	Take() (*pasture.PastureWastedWaterIndex, error)
	Last() (*pasture.PastureWastedWaterIndex, error)
	Find() ([]*pasture.PastureWastedWaterIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWastedWaterIndex, err error)
	FindInBatches(result *[]*pasture.PastureWastedWaterIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureWastedWaterIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureWastedWaterIndexDo
	Assign(attrs ...field.AssignExpr) IPastureWastedWaterIndexDo
	Joins(fields ...field.RelationField) IPastureWastedWaterIndexDo
	Preload(fields ...field.RelationField) IPastureWastedWaterIndexDo
	FirstOrInit() (*pasture.PastureWastedWaterIndex, error)
	FirstOrCreate() (*pasture.PastureWastedWaterIndex, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureWastedWaterIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureWastedWaterIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureWastedWaterIndexDo) Debug() IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureWastedWaterIndexDo) WithContext(ctx context.Context) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureWastedWaterIndexDo) ReadDB() IPastureWastedWaterIndexDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureWastedWaterIndexDo) WriteDB() IPastureWastedWaterIndexDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureWastedWaterIndexDo) Session(config *gorm.Session) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureWastedWaterIndexDo) Clauses(conds ...clause.Expression) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureWastedWaterIndexDo) Returning(value interface{}, columns ...string) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureWastedWaterIndexDo) Not(conds ...gen.Condition) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureWastedWaterIndexDo) Or(conds ...gen.Condition) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureWastedWaterIndexDo) Select(conds ...field.Expr) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureWastedWaterIndexDo) Where(conds ...gen.Condition) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureWastedWaterIndexDo) Order(conds ...field.Expr) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureWastedWaterIndexDo) Distinct(cols ...field.Expr) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureWastedWaterIndexDo) Omit(cols ...field.Expr) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureWastedWaterIndexDo) Join(table schema.Tabler, on ...field.Expr) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureWastedWaterIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureWastedWaterIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureWastedWaterIndexDo) Group(cols ...field.Expr) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureWastedWaterIndexDo) Having(conds ...gen.Condition) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureWastedWaterIndexDo) Limit(limit int) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureWastedWaterIndexDo) Offset(offset int) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureWastedWaterIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureWastedWaterIndexDo) Unscoped() IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureWastedWaterIndexDo) Create(values ...*pasture.PastureWastedWaterIndex) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureWastedWaterIndexDo) CreateInBatches(values []*pasture.PastureWastedWaterIndex, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureWastedWaterIndexDo) Save(values ...*pasture.PastureWastedWaterIndex) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureWastedWaterIndexDo) First() (*pasture.PastureWastedWaterIndex, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWastedWaterIndex), nil
	}
}

func (p pastureWastedWaterIndexDo) Take() (*pasture.PastureWastedWaterIndex, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWastedWaterIndex), nil
	}
}

func (p pastureWastedWaterIndexDo) Last() (*pasture.PastureWastedWaterIndex, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWastedWaterIndex), nil
	}
}

func (p pastureWastedWaterIndexDo) Find() ([]*pasture.PastureWastedWaterIndex, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureWastedWaterIndex), err
}

func (p pastureWastedWaterIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWastedWaterIndex, err error) {
	buf := make([]*pasture.PastureWastedWaterIndex, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureWastedWaterIndexDo) FindInBatches(result *[]*pasture.PastureWastedWaterIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureWastedWaterIndexDo) Attrs(attrs ...field.AssignExpr) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureWastedWaterIndexDo) Assign(attrs ...field.AssignExpr) IPastureWastedWaterIndexDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureWastedWaterIndexDo) Joins(fields ...field.RelationField) IPastureWastedWaterIndexDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureWastedWaterIndexDo) Preload(fields ...field.RelationField) IPastureWastedWaterIndexDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureWastedWaterIndexDo) FirstOrInit() (*pasture.PastureWastedWaterIndex, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWastedWaterIndex), nil
	}
}

func (p pastureWastedWaterIndexDo) FirstOrCreate() (*pasture.PastureWastedWaterIndex, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWastedWaterIndex), nil
	}
}

func (p pastureWastedWaterIndexDo) FindByPage(offset int, limit int) (result []*pasture.PastureWastedWaterIndex, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureWastedWaterIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureWastedWaterIndexDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureWastedWaterIndexDo) Delete(models ...*pasture.PastureWastedWaterIndex) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureWastedWaterIndexDo) withDO(do gen.Dao) *pastureWastedWaterIndexDo {
	p.DO = *do.(*gen.DO)
	return p
}
