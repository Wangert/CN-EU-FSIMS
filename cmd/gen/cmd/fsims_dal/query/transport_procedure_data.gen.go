// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"CN-EU-FSIMS/internal/app/models/coldchain"
)

func newTransportProcedureData(db *gorm.DB, opts ...gen.DOOption) transportProcedureData {
	_transportProcedureData := transportProcedureData{}

	_transportProcedureData.transportProcedureDataDo.UseDB(db, opts...)
	_transportProcedureData.transportProcedureDataDo.UseModel(&coldchain.TransportProcedureData{})

	tableName := _transportProcedureData.transportProcedureDataDo.TableName()
	_transportProcedureData.ALL = field.NewAsterisk(tableName)
	_transportProcedureData.ID = field.NewUint(tableName, "id")
	_transportProcedureData.CreatedAt = field.NewTime(tableName, "created_at")
	_transportProcedureData.UpdatedAt = field.NewTime(tableName, "updated_at")
	_transportProcedureData.DeletedAt = field.NewField(tableName, "deleted_at")
	_transportProcedureData.TID = field.NewString(tableName, "t_id")
	_transportProcedureData.ProductNumber = field.NewString(tableName, "product_number")
	_transportProcedureData.CarNumber = field.NewString(tableName, "car_number")
	_transportProcedureData.Operator = field.NewString(tableName, "operator")
	_transportProcedureData.Temperature = field.NewString(tableName, "temperature")
	_transportProcedureData.Source = field.NewString(tableName, "source")
	_transportProcedureData.Destination = field.NewString(tableName, "destination")
	_transportProcedureData.Humidity = field.NewString(tableName, "humidity")
	_transportProcedureData.LoadingTime = field.NewString(tableName, "loading_time")
	_transportProcedureData.UnloadingTime = field.NewString(tableName, "unloading_time")
	_transportProcedureData.StartTimestamp = field.NewTime(tableName, "start_timestamp")
	_transportProcedureData.CompletedTimestamp = field.NewTime(tableName, "completed_timestamp")

	_transportProcedureData.fillFieldMap()

	return _transportProcedureData
}

type transportProcedureData struct {
	transportProcedureDataDo transportProcedureDataDo

	ALL                field.Asterisk
	ID                 field.Uint
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field
	TID                field.String
	ProductNumber      field.String
	CarNumber          field.String
	Operator           field.String
	Temperature        field.String
	Source             field.String
	Destination        field.String
	Humidity           field.String
	LoadingTime        field.String
	UnloadingTime      field.String
	StartTimestamp     field.Time
	CompletedTimestamp field.Time

	fieldMap map[string]field.Expr
}

func (t transportProcedureData) Table(newTableName string) *transportProcedureData {
	t.transportProcedureDataDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transportProcedureData) As(alias string) *transportProcedureData {
	t.transportProcedureDataDo.DO = *(t.transportProcedureDataDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transportProcedureData) updateTableName(table string) *transportProcedureData {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.TID = field.NewString(table, "t_id")
	t.ProductNumber = field.NewString(table, "product_number")
	t.CarNumber = field.NewString(table, "car_number")
	t.Operator = field.NewString(table, "operator")
	t.Temperature = field.NewString(table, "temperature")
	t.Source = field.NewString(table, "source")
	t.Destination = field.NewString(table, "destination")
	t.Humidity = field.NewString(table, "humidity")
	t.LoadingTime = field.NewString(table, "loading_time")
	t.UnloadingTime = field.NewString(table, "unloading_time")
	t.StartTimestamp = field.NewTime(table, "start_timestamp")
	t.CompletedTimestamp = field.NewTime(table, "completed_timestamp")

	t.fillFieldMap()

	return t
}

func (t *transportProcedureData) WithContext(ctx context.Context) ITransportProcedureDataDo {
	return t.transportProcedureDataDo.WithContext(ctx)
}

func (t transportProcedureData) TableName() string { return t.transportProcedureDataDo.TableName() }

func (t transportProcedureData) Alias() string { return t.transportProcedureDataDo.Alias() }

func (t transportProcedureData) Columns(cols ...field.Expr) gen.Columns {
	return t.transportProcedureDataDo.Columns(cols...)
}

func (t *transportProcedureData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transportProcedureData) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["t_id"] = t.TID
	t.fieldMap["product_number"] = t.ProductNumber
	t.fieldMap["car_number"] = t.CarNumber
	t.fieldMap["operator"] = t.Operator
	t.fieldMap["temperature"] = t.Temperature
	t.fieldMap["source"] = t.Source
	t.fieldMap["destination"] = t.Destination
	t.fieldMap["humidity"] = t.Humidity
	t.fieldMap["loading_time"] = t.LoadingTime
	t.fieldMap["unloading_time"] = t.UnloadingTime
	t.fieldMap["start_timestamp"] = t.StartTimestamp
	t.fieldMap["completed_timestamp"] = t.CompletedTimestamp
}

func (t transportProcedureData) clone(db *gorm.DB) transportProcedureData {
	t.transportProcedureDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transportProcedureData) replaceDB(db *gorm.DB) transportProcedureData {
	t.transportProcedureDataDo.ReplaceDB(db)
	return t
}

type transportProcedureDataDo struct{ gen.DO }

type ITransportProcedureDataDo interface {
	gen.SubQuery
	Debug() ITransportProcedureDataDo
	WithContext(ctx context.Context) ITransportProcedureDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransportProcedureDataDo
	WriteDB() ITransportProcedureDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransportProcedureDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransportProcedureDataDo
	Not(conds ...gen.Condition) ITransportProcedureDataDo
	Or(conds ...gen.Condition) ITransportProcedureDataDo
	Select(conds ...field.Expr) ITransportProcedureDataDo
	Where(conds ...gen.Condition) ITransportProcedureDataDo
	Order(conds ...field.Expr) ITransportProcedureDataDo
	Distinct(cols ...field.Expr) ITransportProcedureDataDo
	Omit(cols ...field.Expr) ITransportProcedureDataDo
	Join(table schema.Tabler, on ...field.Expr) ITransportProcedureDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransportProcedureDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransportProcedureDataDo
	Group(cols ...field.Expr) ITransportProcedureDataDo
	Having(conds ...gen.Condition) ITransportProcedureDataDo
	Limit(limit int) ITransportProcedureDataDo
	Offset(offset int) ITransportProcedureDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransportProcedureDataDo
	Unscoped() ITransportProcedureDataDo
	Create(values ...*coldchain.TransportProcedureData) error
	CreateInBatches(values []*coldchain.TransportProcedureData, batchSize int) error
	Save(values ...*coldchain.TransportProcedureData) error
	First() (*coldchain.TransportProcedureData, error)
	Take() (*coldchain.TransportProcedureData, error)
	Last() (*coldchain.TransportProcedureData, error)
	Find() ([]*coldchain.TransportProcedureData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*coldchain.TransportProcedureData, err error)
	FindInBatches(result *[]*coldchain.TransportProcedureData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*coldchain.TransportProcedureData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransportProcedureDataDo
	Assign(attrs ...field.AssignExpr) ITransportProcedureDataDo
	Joins(fields ...field.RelationField) ITransportProcedureDataDo
	Preload(fields ...field.RelationField) ITransportProcedureDataDo
	FirstOrInit() (*coldchain.TransportProcedureData, error)
	FirstOrCreate() (*coldchain.TransportProcedureData, error)
	FindByPage(offset int, limit int) (result []*coldchain.TransportProcedureData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransportProcedureDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transportProcedureDataDo) Debug() ITransportProcedureDataDo {
	return t.withDO(t.DO.Debug())
}

func (t transportProcedureDataDo) WithContext(ctx context.Context) ITransportProcedureDataDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transportProcedureDataDo) ReadDB() ITransportProcedureDataDo {
	return t.Clauses(dbresolver.Read)
}

func (t transportProcedureDataDo) WriteDB() ITransportProcedureDataDo {
	return t.Clauses(dbresolver.Write)
}

func (t transportProcedureDataDo) Session(config *gorm.Session) ITransportProcedureDataDo {
	return t.withDO(t.DO.Session(config))
}

func (t transportProcedureDataDo) Clauses(conds ...clause.Expression) ITransportProcedureDataDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transportProcedureDataDo) Returning(value interface{}, columns ...string) ITransportProcedureDataDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transportProcedureDataDo) Not(conds ...gen.Condition) ITransportProcedureDataDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transportProcedureDataDo) Or(conds ...gen.Condition) ITransportProcedureDataDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transportProcedureDataDo) Select(conds ...field.Expr) ITransportProcedureDataDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transportProcedureDataDo) Where(conds ...gen.Condition) ITransportProcedureDataDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transportProcedureDataDo) Order(conds ...field.Expr) ITransportProcedureDataDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transportProcedureDataDo) Distinct(cols ...field.Expr) ITransportProcedureDataDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transportProcedureDataDo) Omit(cols ...field.Expr) ITransportProcedureDataDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transportProcedureDataDo) Join(table schema.Tabler, on ...field.Expr) ITransportProcedureDataDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transportProcedureDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransportProcedureDataDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transportProcedureDataDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransportProcedureDataDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transportProcedureDataDo) Group(cols ...field.Expr) ITransportProcedureDataDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transportProcedureDataDo) Having(conds ...gen.Condition) ITransportProcedureDataDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transportProcedureDataDo) Limit(limit int) ITransportProcedureDataDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transportProcedureDataDo) Offset(offset int) ITransportProcedureDataDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transportProcedureDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransportProcedureDataDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transportProcedureDataDo) Unscoped() ITransportProcedureDataDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transportProcedureDataDo) Create(values ...*coldchain.TransportProcedureData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transportProcedureDataDo) CreateInBatches(values []*coldchain.TransportProcedureData, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transportProcedureDataDo) Save(values ...*coldchain.TransportProcedureData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transportProcedureDataDo) First() (*coldchain.TransportProcedureData, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.TransportProcedureData), nil
	}
}

func (t transportProcedureDataDo) Take() (*coldchain.TransportProcedureData, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.TransportProcedureData), nil
	}
}

func (t transportProcedureDataDo) Last() (*coldchain.TransportProcedureData, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.TransportProcedureData), nil
	}
}

func (t transportProcedureDataDo) Find() ([]*coldchain.TransportProcedureData, error) {
	result, err := t.DO.Find()
	return result.([]*coldchain.TransportProcedureData), err
}

func (t transportProcedureDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*coldchain.TransportProcedureData, err error) {
	buf := make([]*coldchain.TransportProcedureData, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transportProcedureDataDo) FindInBatches(result *[]*coldchain.TransportProcedureData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transportProcedureDataDo) Attrs(attrs ...field.AssignExpr) ITransportProcedureDataDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transportProcedureDataDo) Assign(attrs ...field.AssignExpr) ITransportProcedureDataDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transportProcedureDataDo) Joins(fields ...field.RelationField) ITransportProcedureDataDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transportProcedureDataDo) Preload(fields ...field.RelationField) ITransportProcedureDataDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transportProcedureDataDo) FirstOrInit() (*coldchain.TransportProcedureData, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.TransportProcedureData), nil
	}
}

func (t transportProcedureDataDo) FirstOrCreate() (*coldchain.TransportProcedureData, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*coldchain.TransportProcedureData), nil
	}
}

func (t transportProcedureDataDo) FindByPage(offset int, limit int) (result []*coldchain.TransportProcedureData, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transportProcedureDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transportProcedureDataDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transportProcedureDataDo) Delete(models ...*coldchain.TransportProcedureData) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transportProcedureDataDo) withDO(do gen.Dao) *transportProcedureDataDo {
	t.DO = *do.(*gen.DO)
	return t
}
