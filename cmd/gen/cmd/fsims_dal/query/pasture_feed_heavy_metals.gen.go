// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureFeedHeavyMetal(db *gorm.DB, opts ...gen.DOOption) pastureFeedHeavyMetal {
	_pastureFeedHeavyMetal := pastureFeedHeavyMetal{}

	_pastureFeedHeavyMetal.pastureFeedHeavyMetalDo.UseDB(db, opts...)
	_pastureFeedHeavyMetal.pastureFeedHeavyMetalDo.UseModel(&pasture.PastureFeedHeavyMetal{})

	tableName := _pastureFeedHeavyMetal.pastureFeedHeavyMetalDo.TableName()
	_pastureFeedHeavyMetal.ALL = field.NewAsterisk(tableName)
	_pastureFeedHeavyMetal.ID = field.NewUint(tableName, "id")
	_pastureFeedHeavyMetal.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureFeedHeavyMetal.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureFeedHeavyMetal.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureFeedHeavyMetal.TimeRecordAt = field.NewTime(tableName, "time_record_at")
	_pastureFeedHeavyMetal.HouseNumber = field.NewString(tableName, "house_number")
	_pastureFeedHeavyMetal.PastureFeedAs = pastureFeedHeavyMetalHasOnePastureFeedAs{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PastureFeedAs", "pasture.PastureFeedAs"),
	}

	_pastureFeedHeavyMetal.PastureFeedPb = pastureFeedHeavyMetalHasOnePastureFeedPb{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PastureFeedPb", "pasture.PastureFeedPb"),
	}

	_pastureFeedHeavyMetal.PastureFeedCd = pastureFeedHeavyMetalHasOnePastureFeedCd{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PastureFeedCd", "pasture.PastureFeedCd"),
	}

	_pastureFeedHeavyMetal.PastureFeedCr = pastureFeedHeavyMetalHasOnePastureFeedCr{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PastureFeedCr", "pasture.PastureFeedCr"),
	}

	_pastureFeedHeavyMetal.fillFieldMap()

	return _pastureFeedHeavyMetal
}

type pastureFeedHeavyMetal struct {
	pastureFeedHeavyMetalDo pastureFeedHeavyMetalDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	TimeRecordAt  field.Time
	HouseNumber   field.String
	PastureFeedAs pastureFeedHeavyMetalHasOnePastureFeedAs

	PastureFeedPb pastureFeedHeavyMetalHasOnePastureFeedPb

	PastureFeedCd pastureFeedHeavyMetalHasOnePastureFeedCd

	PastureFeedCr pastureFeedHeavyMetalHasOnePastureFeedCr

	fieldMap map[string]field.Expr
}

func (p pastureFeedHeavyMetal) Table(newTableName string) *pastureFeedHeavyMetal {
	p.pastureFeedHeavyMetalDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureFeedHeavyMetal) As(alias string) *pastureFeedHeavyMetal {
	p.pastureFeedHeavyMetalDo.DO = *(p.pastureFeedHeavyMetalDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureFeedHeavyMetal) updateTableName(table string) *pastureFeedHeavyMetal {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.TimeRecordAt = field.NewTime(table, "time_record_at")
	p.HouseNumber = field.NewString(table, "house_number")

	p.fillFieldMap()

	return p
}

func (p *pastureFeedHeavyMetal) WithContext(ctx context.Context) IPastureFeedHeavyMetalDo {
	return p.pastureFeedHeavyMetalDo.WithContext(ctx)
}

func (p pastureFeedHeavyMetal) TableName() string { return p.pastureFeedHeavyMetalDo.TableName() }

func (p pastureFeedHeavyMetal) Alias() string { return p.pastureFeedHeavyMetalDo.Alias() }

func (p pastureFeedHeavyMetal) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureFeedHeavyMetalDo.Columns(cols...)
}

func (p *pastureFeedHeavyMetal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureFeedHeavyMetal) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["time_record_at"] = p.TimeRecordAt
	p.fieldMap["house_number"] = p.HouseNumber

}

func (p pastureFeedHeavyMetal) clone(db *gorm.DB) pastureFeedHeavyMetal {
	p.pastureFeedHeavyMetalDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureFeedHeavyMetal) replaceDB(db *gorm.DB) pastureFeedHeavyMetal {
	p.pastureFeedHeavyMetalDo.ReplaceDB(db)
	return p
}

type pastureFeedHeavyMetalHasOnePastureFeedAs struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFeedHeavyMetalHasOnePastureFeedAs) Where(conds ...field.Expr) *pastureFeedHeavyMetalHasOnePastureFeedAs {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedAs) WithContext(ctx context.Context) *pastureFeedHeavyMetalHasOnePastureFeedAs {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedAs) Session(session *gorm.Session) *pastureFeedHeavyMetalHasOnePastureFeedAs {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedAs) Model(m *pasture.PastureFeedHeavyMetal) *pastureFeedHeavyMetalHasOnePastureFeedAsTx {
	return &pastureFeedHeavyMetalHasOnePastureFeedAsTx{a.db.Model(m).Association(a.Name())}
}

type pastureFeedHeavyMetalHasOnePastureFeedAsTx struct{ tx *gorm.Association }

func (a pastureFeedHeavyMetalHasOnePastureFeedAsTx) Find() (result *pasture.PastureFeedAs, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedAsTx) Append(values ...*pasture.PastureFeedAs) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedAsTx) Replace(values ...*pasture.PastureFeedAs) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedAsTx) Delete(values ...*pasture.PastureFeedAs) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedAsTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFeedHeavyMetalHasOnePastureFeedAsTx) Count() int64 {
	return a.tx.Count()
}

type pastureFeedHeavyMetalHasOnePastureFeedPb struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFeedHeavyMetalHasOnePastureFeedPb) Where(conds ...field.Expr) *pastureFeedHeavyMetalHasOnePastureFeedPb {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedPb) WithContext(ctx context.Context) *pastureFeedHeavyMetalHasOnePastureFeedPb {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedPb) Session(session *gorm.Session) *pastureFeedHeavyMetalHasOnePastureFeedPb {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedPb) Model(m *pasture.PastureFeedHeavyMetal) *pastureFeedHeavyMetalHasOnePastureFeedPbTx {
	return &pastureFeedHeavyMetalHasOnePastureFeedPbTx{a.db.Model(m).Association(a.Name())}
}

type pastureFeedHeavyMetalHasOnePastureFeedPbTx struct{ tx *gorm.Association }

func (a pastureFeedHeavyMetalHasOnePastureFeedPbTx) Find() (result *pasture.PastureFeedPb, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedPbTx) Append(values ...*pasture.PastureFeedPb) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedPbTx) Replace(values ...*pasture.PastureFeedPb) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedPbTx) Delete(values ...*pasture.PastureFeedPb) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedPbTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFeedHeavyMetalHasOnePastureFeedPbTx) Count() int64 {
	return a.tx.Count()
}

type pastureFeedHeavyMetalHasOnePastureFeedCd struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCd) Where(conds ...field.Expr) *pastureFeedHeavyMetalHasOnePastureFeedCd {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCd) WithContext(ctx context.Context) *pastureFeedHeavyMetalHasOnePastureFeedCd {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCd) Session(session *gorm.Session) *pastureFeedHeavyMetalHasOnePastureFeedCd {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCd) Model(m *pasture.PastureFeedHeavyMetal) *pastureFeedHeavyMetalHasOnePastureFeedCdTx {
	return &pastureFeedHeavyMetalHasOnePastureFeedCdTx{a.db.Model(m).Association(a.Name())}
}

type pastureFeedHeavyMetalHasOnePastureFeedCdTx struct{ tx *gorm.Association }

func (a pastureFeedHeavyMetalHasOnePastureFeedCdTx) Find() (result *pasture.PastureFeedCd, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCdTx) Append(values ...*pasture.PastureFeedCd) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCdTx) Replace(values ...*pasture.PastureFeedCd) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCdTx) Delete(values ...*pasture.PastureFeedCd) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCdTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCdTx) Count() int64 {
	return a.tx.Count()
}

type pastureFeedHeavyMetalHasOnePastureFeedCr struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCr) Where(conds ...field.Expr) *pastureFeedHeavyMetalHasOnePastureFeedCr {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCr) WithContext(ctx context.Context) *pastureFeedHeavyMetalHasOnePastureFeedCr {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCr) Session(session *gorm.Session) *pastureFeedHeavyMetalHasOnePastureFeedCr {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCr) Model(m *pasture.PastureFeedHeavyMetal) *pastureFeedHeavyMetalHasOnePastureFeedCrTx {
	return &pastureFeedHeavyMetalHasOnePastureFeedCrTx{a.db.Model(m).Association(a.Name())}
}

type pastureFeedHeavyMetalHasOnePastureFeedCrTx struct{ tx *gorm.Association }

func (a pastureFeedHeavyMetalHasOnePastureFeedCrTx) Find() (result *pasture.PastureFeedCr, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCrTx) Append(values ...*pasture.PastureFeedCr) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCrTx) Replace(values ...*pasture.PastureFeedCr) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCrTx) Delete(values ...*pasture.PastureFeedCr) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCrTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFeedHeavyMetalHasOnePastureFeedCrTx) Count() int64 {
	return a.tx.Count()
}

type pastureFeedHeavyMetalDo struct{ gen.DO }

type IPastureFeedHeavyMetalDo interface {
	gen.SubQuery
	Debug() IPastureFeedHeavyMetalDo
	WithContext(ctx context.Context) IPastureFeedHeavyMetalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureFeedHeavyMetalDo
	WriteDB() IPastureFeedHeavyMetalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureFeedHeavyMetalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureFeedHeavyMetalDo
	Not(conds ...gen.Condition) IPastureFeedHeavyMetalDo
	Or(conds ...gen.Condition) IPastureFeedHeavyMetalDo
	Select(conds ...field.Expr) IPastureFeedHeavyMetalDo
	Where(conds ...gen.Condition) IPastureFeedHeavyMetalDo
	Order(conds ...field.Expr) IPastureFeedHeavyMetalDo
	Distinct(cols ...field.Expr) IPastureFeedHeavyMetalDo
	Omit(cols ...field.Expr) IPastureFeedHeavyMetalDo
	Join(table schema.Tabler, on ...field.Expr) IPastureFeedHeavyMetalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFeedHeavyMetalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureFeedHeavyMetalDo
	Group(cols ...field.Expr) IPastureFeedHeavyMetalDo
	Having(conds ...gen.Condition) IPastureFeedHeavyMetalDo
	Limit(limit int) IPastureFeedHeavyMetalDo
	Offset(offset int) IPastureFeedHeavyMetalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFeedHeavyMetalDo
	Unscoped() IPastureFeedHeavyMetalDo
	Create(values ...*pasture.PastureFeedHeavyMetal) error
	CreateInBatches(values []*pasture.PastureFeedHeavyMetal, batchSize int) error
	Save(values ...*pasture.PastureFeedHeavyMetal) error
	First() (*pasture.PastureFeedHeavyMetal, error)
	Take() (*pasture.PastureFeedHeavyMetal, error)
	Last() (*pasture.PastureFeedHeavyMetal, error)
	Find() ([]*pasture.PastureFeedHeavyMetal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFeedHeavyMetal, err error)
	FindInBatches(result *[]*pasture.PastureFeedHeavyMetal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureFeedHeavyMetal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureFeedHeavyMetalDo
	Assign(attrs ...field.AssignExpr) IPastureFeedHeavyMetalDo
	Joins(fields ...field.RelationField) IPastureFeedHeavyMetalDo
	Preload(fields ...field.RelationField) IPastureFeedHeavyMetalDo
	FirstOrInit() (*pasture.PastureFeedHeavyMetal, error)
	FirstOrCreate() (*pasture.PastureFeedHeavyMetal, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureFeedHeavyMetal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureFeedHeavyMetalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureFeedHeavyMetalDo) Debug() IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureFeedHeavyMetalDo) WithContext(ctx context.Context) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureFeedHeavyMetalDo) ReadDB() IPastureFeedHeavyMetalDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureFeedHeavyMetalDo) WriteDB() IPastureFeedHeavyMetalDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureFeedHeavyMetalDo) Session(config *gorm.Session) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureFeedHeavyMetalDo) Clauses(conds ...clause.Expression) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureFeedHeavyMetalDo) Returning(value interface{}, columns ...string) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureFeedHeavyMetalDo) Not(conds ...gen.Condition) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureFeedHeavyMetalDo) Or(conds ...gen.Condition) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureFeedHeavyMetalDo) Select(conds ...field.Expr) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureFeedHeavyMetalDo) Where(conds ...gen.Condition) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureFeedHeavyMetalDo) Order(conds ...field.Expr) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureFeedHeavyMetalDo) Distinct(cols ...field.Expr) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureFeedHeavyMetalDo) Omit(cols ...field.Expr) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureFeedHeavyMetalDo) Join(table schema.Tabler, on ...field.Expr) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureFeedHeavyMetalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureFeedHeavyMetalDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureFeedHeavyMetalDo) Group(cols ...field.Expr) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureFeedHeavyMetalDo) Having(conds ...gen.Condition) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureFeedHeavyMetalDo) Limit(limit int) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureFeedHeavyMetalDo) Offset(offset int) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureFeedHeavyMetalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureFeedHeavyMetalDo) Unscoped() IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureFeedHeavyMetalDo) Create(values ...*pasture.PastureFeedHeavyMetal) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureFeedHeavyMetalDo) CreateInBatches(values []*pasture.PastureFeedHeavyMetal, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureFeedHeavyMetalDo) Save(values ...*pasture.PastureFeedHeavyMetal) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureFeedHeavyMetalDo) First() (*pasture.PastureFeedHeavyMetal, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedHeavyMetal), nil
	}
}

func (p pastureFeedHeavyMetalDo) Take() (*pasture.PastureFeedHeavyMetal, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedHeavyMetal), nil
	}
}

func (p pastureFeedHeavyMetalDo) Last() (*pasture.PastureFeedHeavyMetal, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedHeavyMetal), nil
	}
}

func (p pastureFeedHeavyMetalDo) Find() ([]*pasture.PastureFeedHeavyMetal, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureFeedHeavyMetal), err
}

func (p pastureFeedHeavyMetalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFeedHeavyMetal, err error) {
	buf := make([]*pasture.PastureFeedHeavyMetal, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureFeedHeavyMetalDo) FindInBatches(result *[]*pasture.PastureFeedHeavyMetal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureFeedHeavyMetalDo) Attrs(attrs ...field.AssignExpr) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureFeedHeavyMetalDo) Assign(attrs ...field.AssignExpr) IPastureFeedHeavyMetalDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureFeedHeavyMetalDo) Joins(fields ...field.RelationField) IPastureFeedHeavyMetalDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureFeedHeavyMetalDo) Preload(fields ...field.RelationField) IPastureFeedHeavyMetalDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureFeedHeavyMetalDo) FirstOrInit() (*pasture.PastureFeedHeavyMetal, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedHeavyMetal), nil
	}
}

func (p pastureFeedHeavyMetalDo) FirstOrCreate() (*pasture.PastureFeedHeavyMetal, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedHeavyMetal), nil
	}
}

func (p pastureFeedHeavyMetalDo) FindByPage(offset int, limit int) (result []*pasture.PastureFeedHeavyMetal, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureFeedHeavyMetalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureFeedHeavyMetalDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureFeedHeavyMetalDo) Delete(models ...*pasture.PastureFeedHeavyMetal) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureFeedHeavyMetalDo) withDO(do gen.Dao) *pastureFeedHeavyMetalDo {
	p.DO = *do.(*gen.DO)
	return p
}
