// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/fatten"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFattenSoilPhysicalHazard(db *gorm.DB, opts ...gen.DOOption) fattenSoilPhysicalHazard {
	_fattenSoilPhysicalHazard := fattenSoilPhysicalHazard{}

	_fattenSoilPhysicalHazard.fattenSoilPhysicalHazardDo.UseDB(db, opts...)
	_fattenSoilPhysicalHazard.fattenSoilPhysicalHazardDo.UseModel(&fatten.FattenSoilPhysicalHazard{})

	tableName := _fattenSoilPhysicalHazard.fattenSoilPhysicalHazardDo.TableName()
	_fattenSoilPhysicalHazard.ALL = field.NewAsterisk(tableName)
	_fattenSoilPhysicalHazard.ID = field.NewUint(tableName, "id")
	_fattenSoilPhysicalHazard.CreatedAt = field.NewTime(tableName, "created_at")
	_fattenSoilPhysicalHazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fattenSoilPhysicalHazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_fattenSoilPhysicalHazard.Cadmium = field.NewFloat32(tableName, "cadmium")
	_fattenSoilPhysicalHazard.Arsenic = field.NewFloat32(tableName, "arsenic")
	_fattenSoilPhysicalHazard.Copper = field.NewFloat32(tableName, "copper")
	_fattenSoilPhysicalHazard.Lead = field.NewFloat32(tableName, "lead")
	_fattenSoilPhysicalHazard.Chromium = field.NewFloat32(tableName, "chromium")
	_fattenSoilPhysicalHazard.Zinc = field.NewFloat32(tableName, "zinc")
	_fattenSoilPhysicalHazard.FattenSoilID = field.NewUint(tableName, "fatten_soil_id")

	_fattenSoilPhysicalHazard.fillFieldMap()

	return _fattenSoilPhysicalHazard
}

type fattenSoilPhysicalHazard struct {
	fattenSoilPhysicalHazardDo fattenSoilPhysicalHazardDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	Cadmium      field.Float32
	Arsenic      field.Float32
	Copper       field.Float32
	Lead         field.Float32
	Chromium     field.Float32
	Zinc         field.Float32
	FattenSoilID field.Uint

	fieldMap map[string]field.Expr
}

func (f fattenSoilPhysicalHazard) Table(newTableName string) *fattenSoilPhysicalHazard {
	f.fattenSoilPhysicalHazardDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fattenSoilPhysicalHazard) As(alias string) *fattenSoilPhysicalHazard {
	f.fattenSoilPhysicalHazardDo.DO = *(f.fattenSoilPhysicalHazardDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fattenSoilPhysicalHazard) updateTableName(table string) *fattenSoilPhysicalHazard {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.Cadmium = field.NewFloat32(table, "cadmium")
	f.Arsenic = field.NewFloat32(table, "arsenic")
	f.Copper = field.NewFloat32(table, "copper")
	f.Lead = field.NewFloat32(table, "lead")
	f.Chromium = field.NewFloat32(table, "chromium")
	f.Zinc = field.NewFloat32(table, "zinc")
	f.FattenSoilID = field.NewUint(table, "fatten_soil_id")

	f.fillFieldMap()

	return f
}

func (f *fattenSoilPhysicalHazard) WithContext(ctx context.Context) IFattenSoilPhysicalHazardDo {
	return f.fattenSoilPhysicalHazardDo.WithContext(ctx)
}

func (f fattenSoilPhysicalHazard) TableName() string { return f.fattenSoilPhysicalHazardDo.TableName() }

func (f fattenSoilPhysicalHazard) Alias() string { return f.fattenSoilPhysicalHazardDo.Alias() }

func (f fattenSoilPhysicalHazard) Columns(cols ...field.Expr) gen.Columns {
	return f.fattenSoilPhysicalHazardDo.Columns(cols...)
}

func (f *fattenSoilPhysicalHazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fattenSoilPhysicalHazard) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["cadmium"] = f.Cadmium
	f.fieldMap["arsenic"] = f.Arsenic
	f.fieldMap["copper"] = f.Copper
	f.fieldMap["lead"] = f.Lead
	f.fieldMap["chromium"] = f.Chromium
	f.fieldMap["zinc"] = f.Zinc
	f.fieldMap["fatten_soil_id"] = f.FattenSoilID
}

func (f fattenSoilPhysicalHazard) clone(db *gorm.DB) fattenSoilPhysicalHazard {
	f.fattenSoilPhysicalHazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fattenSoilPhysicalHazard) replaceDB(db *gorm.DB) fattenSoilPhysicalHazard {
	f.fattenSoilPhysicalHazardDo.ReplaceDB(db)
	return f
}

type fattenSoilPhysicalHazardDo struct{ gen.DO }

type IFattenSoilPhysicalHazardDo interface {
	gen.SubQuery
	Debug() IFattenSoilPhysicalHazardDo
	WithContext(ctx context.Context) IFattenSoilPhysicalHazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFattenSoilPhysicalHazardDo
	WriteDB() IFattenSoilPhysicalHazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFattenSoilPhysicalHazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFattenSoilPhysicalHazardDo
	Not(conds ...gen.Condition) IFattenSoilPhysicalHazardDo
	Or(conds ...gen.Condition) IFattenSoilPhysicalHazardDo
	Select(conds ...field.Expr) IFattenSoilPhysicalHazardDo
	Where(conds ...gen.Condition) IFattenSoilPhysicalHazardDo
	Order(conds ...field.Expr) IFattenSoilPhysicalHazardDo
	Distinct(cols ...field.Expr) IFattenSoilPhysicalHazardDo
	Omit(cols ...field.Expr) IFattenSoilPhysicalHazardDo
	Join(table schema.Tabler, on ...field.Expr) IFattenSoilPhysicalHazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFattenSoilPhysicalHazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFattenSoilPhysicalHazardDo
	Group(cols ...field.Expr) IFattenSoilPhysicalHazardDo
	Having(conds ...gen.Condition) IFattenSoilPhysicalHazardDo
	Limit(limit int) IFattenSoilPhysicalHazardDo
	Offset(offset int) IFattenSoilPhysicalHazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenSoilPhysicalHazardDo
	Unscoped() IFattenSoilPhysicalHazardDo
	Create(values ...*fatten.FattenSoilPhysicalHazard) error
	CreateInBatches(values []*fatten.FattenSoilPhysicalHazard, batchSize int) error
	Save(values ...*fatten.FattenSoilPhysicalHazard) error
	First() (*fatten.FattenSoilPhysicalHazard, error)
	Take() (*fatten.FattenSoilPhysicalHazard, error)
	Last() (*fatten.FattenSoilPhysicalHazard, error)
	Find() ([]*fatten.FattenSoilPhysicalHazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenSoilPhysicalHazard, err error)
	FindInBatches(result *[]*fatten.FattenSoilPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*fatten.FattenSoilPhysicalHazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFattenSoilPhysicalHazardDo
	Assign(attrs ...field.AssignExpr) IFattenSoilPhysicalHazardDo
	Joins(fields ...field.RelationField) IFattenSoilPhysicalHazardDo
	Preload(fields ...field.RelationField) IFattenSoilPhysicalHazardDo
	FirstOrInit() (*fatten.FattenSoilPhysicalHazard, error)
	FirstOrCreate() (*fatten.FattenSoilPhysicalHazard, error)
	FindByPage(offset int, limit int) (result []*fatten.FattenSoilPhysicalHazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFattenSoilPhysicalHazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fattenSoilPhysicalHazardDo) Debug() IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Debug())
}

func (f fattenSoilPhysicalHazardDo) WithContext(ctx context.Context) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fattenSoilPhysicalHazardDo) ReadDB() IFattenSoilPhysicalHazardDo {
	return f.Clauses(dbresolver.Read)
}

func (f fattenSoilPhysicalHazardDo) WriteDB() IFattenSoilPhysicalHazardDo {
	return f.Clauses(dbresolver.Write)
}

func (f fattenSoilPhysicalHazardDo) Session(config *gorm.Session) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Session(config))
}

func (f fattenSoilPhysicalHazardDo) Clauses(conds ...clause.Expression) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fattenSoilPhysicalHazardDo) Returning(value interface{}, columns ...string) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fattenSoilPhysicalHazardDo) Not(conds ...gen.Condition) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fattenSoilPhysicalHazardDo) Or(conds ...gen.Condition) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fattenSoilPhysicalHazardDo) Select(conds ...field.Expr) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fattenSoilPhysicalHazardDo) Where(conds ...gen.Condition) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fattenSoilPhysicalHazardDo) Order(conds ...field.Expr) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fattenSoilPhysicalHazardDo) Distinct(cols ...field.Expr) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fattenSoilPhysicalHazardDo) Omit(cols ...field.Expr) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fattenSoilPhysicalHazardDo) Join(table schema.Tabler, on ...field.Expr) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fattenSoilPhysicalHazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fattenSoilPhysicalHazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fattenSoilPhysicalHazardDo) Group(cols ...field.Expr) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fattenSoilPhysicalHazardDo) Having(conds ...gen.Condition) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fattenSoilPhysicalHazardDo) Limit(limit int) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fattenSoilPhysicalHazardDo) Offset(offset int) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fattenSoilPhysicalHazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fattenSoilPhysicalHazardDo) Unscoped() IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fattenSoilPhysicalHazardDo) Create(values ...*fatten.FattenSoilPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fattenSoilPhysicalHazardDo) CreateInBatches(values []*fatten.FattenSoilPhysicalHazard, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fattenSoilPhysicalHazardDo) Save(values ...*fatten.FattenSoilPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fattenSoilPhysicalHazardDo) First() (*fatten.FattenSoilPhysicalHazard, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenSoilPhysicalHazard), nil
	}
}

func (f fattenSoilPhysicalHazardDo) Take() (*fatten.FattenSoilPhysicalHazard, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenSoilPhysicalHazard), nil
	}
}

func (f fattenSoilPhysicalHazardDo) Last() (*fatten.FattenSoilPhysicalHazard, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenSoilPhysicalHazard), nil
	}
}

func (f fattenSoilPhysicalHazardDo) Find() ([]*fatten.FattenSoilPhysicalHazard, error) {
	result, err := f.DO.Find()
	return result.([]*fatten.FattenSoilPhysicalHazard), err
}

func (f fattenSoilPhysicalHazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenSoilPhysicalHazard, err error) {
	buf := make([]*fatten.FattenSoilPhysicalHazard, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fattenSoilPhysicalHazardDo) FindInBatches(result *[]*fatten.FattenSoilPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fattenSoilPhysicalHazardDo) Attrs(attrs ...field.AssignExpr) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fattenSoilPhysicalHazardDo) Assign(attrs ...field.AssignExpr) IFattenSoilPhysicalHazardDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fattenSoilPhysicalHazardDo) Joins(fields ...field.RelationField) IFattenSoilPhysicalHazardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fattenSoilPhysicalHazardDo) Preload(fields ...field.RelationField) IFattenSoilPhysicalHazardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fattenSoilPhysicalHazardDo) FirstOrInit() (*fatten.FattenSoilPhysicalHazard, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenSoilPhysicalHazard), nil
	}
}

func (f fattenSoilPhysicalHazardDo) FirstOrCreate() (*fatten.FattenSoilPhysicalHazard, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenSoilPhysicalHazard), nil
	}
}

func (f fattenSoilPhysicalHazardDo) FindByPage(offset int, limit int) (result []*fatten.FattenSoilPhysicalHazard, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fattenSoilPhysicalHazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fattenSoilPhysicalHazardDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fattenSoilPhysicalHazardDo) Delete(models ...*fatten.FattenSoilPhysicalHazard) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fattenSoilPhysicalHazardDo) withDO(do gen.Dao) *fattenSoilPhysicalHazardDo {
	f.DO = *do.(*gen.DO)
	return f
}
