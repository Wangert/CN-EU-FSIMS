// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureSoilPhysicalHazard(db *gorm.DB, opts ...gen.DOOption) pastureSoilPhysicalHazard {
	_pastureSoilPhysicalHazard := pastureSoilPhysicalHazard{}

	_pastureSoilPhysicalHazard.pastureSoilPhysicalHazardDo.UseDB(db, opts...)
	_pastureSoilPhysicalHazard.pastureSoilPhysicalHazardDo.UseModel(&pasture.PastureSoilPhysicalHazard{})

	tableName := _pastureSoilPhysicalHazard.pastureSoilPhysicalHazardDo.TableName()
	_pastureSoilPhysicalHazard.ALL = field.NewAsterisk(tableName)
	_pastureSoilPhysicalHazard.ID = field.NewUint(tableName, "id")
	_pastureSoilPhysicalHazard.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureSoilPhysicalHazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureSoilPhysicalHazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureSoilPhysicalHazard.Cadmium = field.Newfloat64(tableName, "cadmium")
	_pastureSoilPhysicalHazard.Arsenic = field.Newfloat64(tableName, "arsenic")
	_pastureSoilPhysicalHazard.Copper = field.Newfloat64(tableName, "copper")
	_pastureSoilPhysicalHazard.Lead = field.Newfloat64(tableName, "lead")
	_pastureSoilPhysicalHazard.Chromium = field.Newfloat64(tableName, "chromium")
	_pastureSoilPhysicalHazard.Zinc = field.Newfloat64(tableName, "zinc")
	_pastureSoilPhysicalHazard.PastureSoilID = field.NewUint(tableName, "pasture_soil_id")

	_pastureSoilPhysicalHazard.fillFieldMap()

	return _pastureSoilPhysicalHazard
}

type pastureSoilPhysicalHazard struct {
	pastureSoilPhysicalHazardDo pastureSoilPhysicalHazardDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Cadmium       field.float64
	Arsenic       field.float64
	Copper        field.float64
	Lead          field.float64
	Chromium      field.float64
	Zinc          field.float64
	PastureSoilID field.Uint

	fieldMap map[string]field.Expr
}

func (p pastureSoilPhysicalHazard) Table(newTableName string) *pastureSoilPhysicalHazard {
	p.pastureSoilPhysicalHazardDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureSoilPhysicalHazard) As(alias string) *pastureSoilPhysicalHazard {
	p.pastureSoilPhysicalHazardDo.DO = *(p.pastureSoilPhysicalHazardDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureSoilPhysicalHazard) updateTableName(table string) *pastureSoilPhysicalHazard {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Cadmium = field.Newfloat64(table, "cadmium")
	p.Arsenic = field.Newfloat64(table, "arsenic")
	p.Copper = field.Newfloat64(table, "copper")
	p.Lead = field.Newfloat64(table, "lead")
	p.Chromium = field.Newfloat64(table, "chromium")
	p.Zinc = field.Newfloat64(table, "zinc")
	p.PastureSoilID = field.NewUint(table, "pasture_soil_id")

	p.fillFieldMap()

	return p
}

func (p *pastureSoilPhysicalHazard) WithContext(ctx context.Context) IPastureSoilPhysicalHazardDo {
	return p.pastureSoilPhysicalHazardDo.WithContext(ctx)
}

func (p pastureSoilPhysicalHazard) TableName() string {
	return p.pastureSoilPhysicalHazardDo.TableName()
}

func (p pastureSoilPhysicalHazard) Alias() string { return p.pastureSoilPhysicalHazardDo.Alias() }

func (p pastureSoilPhysicalHazard) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureSoilPhysicalHazardDo.Columns(cols...)
}

func (p *pastureSoilPhysicalHazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureSoilPhysicalHazard) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["cadmium"] = p.Cadmium
	p.fieldMap["arsenic"] = p.Arsenic
	p.fieldMap["copper"] = p.Copper
	p.fieldMap["lead"] = p.Lead
	p.fieldMap["chromium"] = p.Chromium
	p.fieldMap["zinc"] = p.Zinc
	p.fieldMap["pasture_soil_id"] = p.PastureSoilID
}

func (p pastureSoilPhysicalHazard) clone(db *gorm.DB) pastureSoilPhysicalHazard {
	p.pastureSoilPhysicalHazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureSoilPhysicalHazard) replaceDB(db *gorm.DB) pastureSoilPhysicalHazard {
	p.pastureSoilPhysicalHazardDo.ReplaceDB(db)
	return p
}

type pastureSoilPhysicalHazardDo struct{ gen.DO }

type IPastureSoilPhysicalHazardDo interface {
	gen.SubQuery
	Debug() IPastureSoilPhysicalHazardDo
	WithContext(ctx context.Context) IPastureSoilPhysicalHazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureSoilPhysicalHazardDo
	WriteDB() IPastureSoilPhysicalHazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureSoilPhysicalHazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureSoilPhysicalHazardDo
	Not(conds ...gen.Condition) IPastureSoilPhysicalHazardDo
	Or(conds ...gen.Condition) IPastureSoilPhysicalHazardDo
	Select(conds ...field.Expr) IPastureSoilPhysicalHazardDo
	Where(conds ...gen.Condition) IPastureSoilPhysicalHazardDo
	Order(conds ...field.Expr) IPastureSoilPhysicalHazardDo
	Distinct(cols ...field.Expr) IPastureSoilPhysicalHazardDo
	Omit(cols ...field.Expr) IPastureSoilPhysicalHazardDo
	Join(table schema.Tabler, on ...field.Expr) IPastureSoilPhysicalHazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureSoilPhysicalHazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureSoilPhysicalHazardDo
	Group(cols ...field.Expr) IPastureSoilPhysicalHazardDo
	Having(conds ...gen.Condition) IPastureSoilPhysicalHazardDo
	Limit(limit int) IPastureSoilPhysicalHazardDo
	Offset(offset int) IPastureSoilPhysicalHazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureSoilPhysicalHazardDo
	Unscoped() IPastureSoilPhysicalHazardDo
	Create(values ...*pasture.PastureSoilPhysicalHazard) error
	CreateInBatches(values []*pasture.PastureSoilPhysicalHazard, batchSize int) error
	Save(values ...*pasture.PastureSoilPhysicalHazard) error
	First() (*pasture.PastureSoilPhysicalHazard, error)
	Take() (*pasture.PastureSoilPhysicalHazard, error)
	Last() (*pasture.PastureSoilPhysicalHazard, error)
	Find() ([]*pasture.PastureSoilPhysicalHazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureSoilPhysicalHazard, err error)
	FindInBatches(result *[]*pasture.PastureSoilPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureSoilPhysicalHazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureSoilPhysicalHazardDo
	Assign(attrs ...field.AssignExpr) IPastureSoilPhysicalHazardDo
	Joins(fields ...field.RelationField) IPastureSoilPhysicalHazardDo
	Preload(fields ...field.RelationField) IPastureSoilPhysicalHazardDo
	FirstOrInit() (*pasture.PastureSoilPhysicalHazard, error)
	FirstOrCreate() (*pasture.PastureSoilPhysicalHazard, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureSoilPhysicalHazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureSoilPhysicalHazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureSoilPhysicalHazardDo) Debug() IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureSoilPhysicalHazardDo) WithContext(ctx context.Context) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureSoilPhysicalHazardDo) ReadDB() IPastureSoilPhysicalHazardDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureSoilPhysicalHazardDo) WriteDB() IPastureSoilPhysicalHazardDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureSoilPhysicalHazardDo) Session(config *gorm.Session) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureSoilPhysicalHazardDo) Clauses(conds ...clause.Expression) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureSoilPhysicalHazardDo) Returning(value interface{}, columns ...string) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureSoilPhysicalHazardDo) Not(conds ...gen.Condition) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureSoilPhysicalHazardDo) Or(conds ...gen.Condition) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureSoilPhysicalHazardDo) Select(conds ...field.Expr) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureSoilPhysicalHazardDo) Where(conds ...gen.Condition) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureSoilPhysicalHazardDo) Order(conds ...field.Expr) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureSoilPhysicalHazardDo) Distinct(cols ...field.Expr) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureSoilPhysicalHazardDo) Omit(cols ...field.Expr) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureSoilPhysicalHazardDo) Join(table schema.Tabler, on ...field.Expr) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureSoilPhysicalHazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureSoilPhysicalHazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureSoilPhysicalHazardDo) Group(cols ...field.Expr) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureSoilPhysicalHazardDo) Having(conds ...gen.Condition) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureSoilPhysicalHazardDo) Limit(limit int) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureSoilPhysicalHazardDo) Offset(offset int) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureSoilPhysicalHazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureSoilPhysicalHazardDo) Unscoped() IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureSoilPhysicalHazardDo) Create(values ...*pasture.PastureSoilPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureSoilPhysicalHazardDo) CreateInBatches(values []*pasture.PastureSoilPhysicalHazard, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureSoilPhysicalHazardDo) Save(values ...*pasture.PastureSoilPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureSoilPhysicalHazardDo) First() (*pasture.PastureSoilPhysicalHazard, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoilPhysicalHazard), nil
	}
}

func (p pastureSoilPhysicalHazardDo) Take() (*pasture.PastureSoilPhysicalHazard, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoilPhysicalHazard), nil
	}
}

func (p pastureSoilPhysicalHazardDo) Last() (*pasture.PastureSoilPhysicalHazard, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoilPhysicalHazard), nil
	}
}

func (p pastureSoilPhysicalHazardDo) Find() ([]*pasture.PastureSoilPhysicalHazard, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureSoilPhysicalHazard), err
}

func (p pastureSoilPhysicalHazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureSoilPhysicalHazard, err error) {
	buf := make([]*pasture.PastureSoilPhysicalHazard, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureSoilPhysicalHazardDo) FindInBatches(result *[]*pasture.PastureSoilPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureSoilPhysicalHazardDo) Attrs(attrs ...field.AssignExpr) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureSoilPhysicalHazardDo) Assign(attrs ...field.AssignExpr) IPastureSoilPhysicalHazardDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureSoilPhysicalHazardDo) Joins(fields ...field.RelationField) IPastureSoilPhysicalHazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureSoilPhysicalHazardDo) Preload(fields ...field.RelationField) IPastureSoilPhysicalHazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureSoilPhysicalHazardDo) FirstOrInit() (*pasture.PastureSoilPhysicalHazard, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoilPhysicalHazard), nil
	}
}

func (p pastureSoilPhysicalHazardDo) FirstOrCreate() (*pasture.PastureSoilPhysicalHazard, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoilPhysicalHazard), nil
	}
}

func (p pastureSoilPhysicalHazardDo) FindByPage(offset int, limit int) (result []*pasture.PastureSoilPhysicalHazard, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureSoilPhysicalHazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureSoilPhysicalHazardDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureSoilPhysicalHazardDo) Delete(models ...*pasture.PastureSoilPhysicalHazard) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureSoilPhysicalHazardDo) withDO(do gen.Dao) *pastureSoilPhysicalHazardDo {
	p.DO = *do.(*gen.DO)
	return p
}
