// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package imgquery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"CN-EU-FSIMS/cmd/img_dal/model"
)

func newUploadImg(db *gorm.DB, opts ...gen.DOOption) uploadImg {
	_uploadImg := uploadImg{}

	_uploadImg.uploadImgDo.UseDB(db, opts...)
	_uploadImg.uploadImgDo.UseModel(&model.UploadImg{})

	tableName := _uploadImg.uploadImgDo.TableName()
	_uploadImg.ALL = field.NewAsterisk(tableName)
	_uploadImg.ID = field.NewInt32(tableName, "id")
	_uploadImg.Filename = field.NewString(tableName, "filename")
	_uploadImg.Result = field.NewString(tableName, "result")
	_uploadImg.Source = field.NewString(tableName, "source")
	_uploadImg.UploadTime = field.NewTime(tableName, "upload_time")

	_uploadImg.fillFieldMap()

	return _uploadImg
}

type uploadImg struct {
	uploadImgDo uploadImgDo

	ALL        field.Asterisk
	ID         field.Int32  // 自增主键
	Filename   field.String // 文件名
	Result     field.String // 结果
	Source     field.String // 图片路径
	UploadTime field.Time   // 上传时间

	fieldMap map[string]field.Expr
}

func (u uploadImg) Table(newTableName string) *uploadImg {
	u.uploadImgDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uploadImg) As(alias string) *uploadImg {
	u.uploadImgDo.DO = *(u.uploadImgDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uploadImg) updateTableName(table string) *uploadImg {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Filename = field.NewString(table, "filename")
	u.Result = field.NewString(table, "result")
	u.Source = field.NewString(table, "source")
	u.UploadTime = field.NewTime(table, "upload_time")

	u.fillFieldMap()

	return u
}

func (u *uploadImg) WithContext(ctx context.Context) IUploadImgDo {
	return u.uploadImgDo.WithContext(ctx)
}

func (u uploadImg) TableName() string { return u.uploadImgDo.TableName() }

func (u uploadImg) Alias() string { return u.uploadImgDo.Alias() }

func (u uploadImg) Columns(cols ...field.Expr) gen.Columns { return u.uploadImgDo.Columns(cols...) }

func (u *uploadImg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uploadImg) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["filename"] = u.Filename
	u.fieldMap["result"] = u.Result
	u.fieldMap["source"] = u.Source
	u.fieldMap["upload_time"] = u.UploadTime
}

func (u uploadImg) clone(db *gorm.DB) uploadImg {
	u.uploadImgDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uploadImg) replaceDB(db *gorm.DB) uploadImg {
	u.uploadImgDo.ReplaceDB(db)
	return u
}

type uploadImgDo struct{ gen.DO }

type IUploadImgDo interface {
	gen.SubQuery
	Debug() IUploadImgDo
	WithContext(ctx context.Context) IUploadImgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUploadImgDo
	WriteDB() IUploadImgDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUploadImgDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUploadImgDo
	Not(conds ...gen.Condition) IUploadImgDo
	Or(conds ...gen.Condition) IUploadImgDo
	Select(conds ...field.Expr) IUploadImgDo
	Where(conds ...gen.Condition) IUploadImgDo
	Order(conds ...field.Expr) IUploadImgDo
	Distinct(cols ...field.Expr) IUploadImgDo
	Omit(cols ...field.Expr) IUploadImgDo
	Join(table schema.Tabler, on ...field.Expr) IUploadImgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUploadImgDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUploadImgDo
	Group(cols ...field.Expr) IUploadImgDo
	Having(conds ...gen.Condition) IUploadImgDo
	Limit(limit int) IUploadImgDo
	Offset(offset int) IUploadImgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUploadImgDo
	Unscoped() IUploadImgDo
	Create(values ...*model.UploadImg) error
	CreateInBatches(values []*model.UploadImg, batchSize int) error
	Save(values ...*model.UploadImg) error
	First() (*model.UploadImg, error)
	Take() (*model.UploadImg, error)
	Last() (*model.UploadImg, error)
	Find() ([]*model.UploadImg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UploadImg, err error)
	FindInBatches(result *[]*model.UploadImg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UploadImg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUploadImgDo
	Assign(attrs ...field.AssignExpr) IUploadImgDo
	Joins(fields ...field.RelationField) IUploadImgDo
	Preload(fields ...field.RelationField) IUploadImgDo
	FirstOrInit() (*model.UploadImg, error)
	FirstOrCreate() (*model.UploadImg, error)
	FindByPage(offset int, limit int) (result []*model.UploadImg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUploadImgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u uploadImgDo) Debug() IUploadImgDo {
	return u.withDO(u.DO.Debug())
}

func (u uploadImgDo) WithContext(ctx context.Context) IUploadImgDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uploadImgDo) ReadDB() IUploadImgDo {
	return u.Clauses(dbresolver.Read)
}

func (u uploadImgDo) WriteDB() IUploadImgDo {
	return u.Clauses(dbresolver.Write)
}

func (u uploadImgDo) Session(config *gorm.Session) IUploadImgDo {
	return u.withDO(u.DO.Session(config))
}

func (u uploadImgDo) Clauses(conds ...clause.Expression) IUploadImgDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uploadImgDo) Returning(value interface{}, columns ...string) IUploadImgDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uploadImgDo) Not(conds ...gen.Condition) IUploadImgDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uploadImgDo) Or(conds ...gen.Condition) IUploadImgDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uploadImgDo) Select(conds ...field.Expr) IUploadImgDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uploadImgDo) Where(conds ...gen.Condition) IUploadImgDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uploadImgDo) Order(conds ...field.Expr) IUploadImgDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uploadImgDo) Distinct(cols ...field.Expr) IUploadImgDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uploadImgDo) Omit(cols ...field.Expr) IUploadImgDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uploadImgDo) Join(table schema.Tabler, on ...field.Expr) IUploadImgDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uploadImgDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUploadImgDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uploadImgDo) RightJoin(table schema.Tabler, on ...field.Expr) IUploadImgDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uploadImgDo) Group(cols ...field.Expr) IUploadImgDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uploadImgDo) Having(conds ...gen.Condition) IUploadImgDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uploadImgDo) Limit(limit int) IUploadImgDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uploadImgDo) Offset(offset int) IUploadImgDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uploadImgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUploadImgDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uploadImgDo) Unscoped() IUploadImgDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uploadImgDo) Create(values ...*model.UploadImg) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uploadImgDo) CreateInBatches(values []*model.UploadImg, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uploadImgDo) Save(values ...*model.UploadImg) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uploadImgDo) First() (*model.UploadImg, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UploadImg), nil
	}
}

func (u uploadImgDo) Take() (*model.UploadImg, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UploadImg), nil
	}
}

func (u uploadImgDo) Last() (*model.UploadImg, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UploadImg), nil
	}
}

func (u uploadImgDo) Find() ([]*model.UploadImg, error) {
	result, err := u.DO.Find()
	return result.([]*model.UploadImg), err
}

func (u uploadImgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UploadImg, err error) {
	buf := make([]*model.UploadImg, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uploadImgDo) FindInBatches(result *[]*model.UploadImg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uploadImgDo) Attrs(attrs ...field.AssignExpr) IUploadImgDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uploadImgDo) Assign(attrs ...field.AssignExpr) IUploadImgDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uploadImgDo) Joins(fields ...field.RelationField) IUploadImgDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uploadImgDo) Preload(fields ...field.RelationField) IUploadImgDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uploadImgDo) FirstOrInit() (*model.UploadImg, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UploadImg), nil
	}
}

func (u uploadImgDo) FirstOrCreate() (*model.UploadImg, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UploadImg), nil
	}
}

func (u uploadImgDo) FindByPage(offset int, limit int) (result []*model.UploadImg, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uploadImgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uploadImgDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uploadImgDo) Delete(models ...*model.UploadImg) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uploadImgDo) withDO(do gen.Dao) *uploadImgDo {
	u.DO = *do.(*gen.DO)
	return u
}
