// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureWaterPhysicalHazard(db *gorm.DB, opts ...gen.DOOption) pastureWaterPhysicalHazard {
	_pastureWaterPhysicalHazard := pastureWaterPhysicalHazard{}

	_pastureWaterPhysicalHazard.pastureWaterPhysicalHazardDo.UseDB(db, opts...)
	_pastureWaterPhysicalHazard.pastureWaterPhysicalHazardDo.UseModel(&pasture.PastureWaterPhysicalHazard{})

	tableName := _pastureWaterPhysicalHazard.pastureWaterPhysicalHazardDo.TableName()
	_pastureWaterPhysicalHazard.ALL = field.NewAsterisk(tableName)
	_pastureWaterPhysicalHazard.ID = field.NewUint(tableName, "id")
	_pastureWaterPhysicalHazard.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureWaterPhysicalHazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureWaterPhysicalHazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureWaterPhysicalHazard.Mercury = field.NewFloat64(tableName, "mercury")
	_pastureWaterPhysicalHazard.Cadmium = field.NewFloat64(tableName, "cadmium")
	_pastureWaterPhysicalHazard.Lead = field.NewFloat64(tableName, "lead")
	_pastureWaterPhysicalHazard.Chromium = field.NewFloat64(tableName, "chromium")
	_pastureWaterPhysicalHazard.Arsenic = field.NewFloat64(tableName, "arsenic")
	_pastureWaterPhysicalHazard.Copper = field.NewFloat64(tableName, "copper")
	_pastureWaterPhysicalHazard.PastureWaterID = field.NewUint(tableName, "pasture_water_id")

	_pastureWaterPhysicalHazard.fillFieldMap()

	return _pastureWaterPhysicalHazard
}

type pastureWaterPhysicalHazard struct {
	pastureWaterPhysicalHazardDo pastureWaterPhysicalHazardDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	Mercury        field.Float64
	Cadmium        field.Float64
	Lead           field.Float64
	Chromium       field.Float64
	Arsenic        field.Float64
	Copper         field.Float64
	PastureWaterID field.Uint

	fieldMap map[string]field.Expr
}

func (p pastureWaterPhysicalHazard) Table(newTableName string) *pastureWaterPhysicalHazard {
	p.pastureWaterPhysicalHazardDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureWaterPhysicalHazard) As(alias string) *pastureWaterPhysicalHazard {
	p.pastureWaterPhysicalHazardDo.DO = *(p.pastureWaterPhysicalHazardDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureWaterPhysicalHazard) updateTableName(table string) *pastureWaterPhysicalHazard {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Mercury = field.NewFloat64(table, "mercury")
	p.Cadmium = field.NewFloat64(table, "cadmium")
	p.Lead = field.NewFloat64(table, "lead")
	p.Chromium = field.NewFloat64(table, "chromium")
	p.Arsenic = field.NewFloat64(table, "arsenic")
	p.Copper = field.NewFloat64(table, "copper")
	p.PastureWaterID = field.NewUint(table, "pasture_water_id")

	p.fillFieldMap()

	return p
}

func (p *pastureWaterPhysicalHazard) WithContext(ctx context.Context) IPastureWaterPhysicalHazardDo {
	return p.pastureWaterPhysicalHazardDo.WithContext(ctx)
}

func (p pastureWaterPhysicalHazard) TableName() string {
	return p.pastureWaterPhysicalHazardDo.TableName()
}

func (p pastureWaterPhysicalHazard) Alias() string { return p.pastureWaterPhysicalHazardDo.Alias() }

func (p pastureWaterPhysicalHazard) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureWaterPhysicalHazardDo.Columns(cols...)
}

func (p *pastureWaterPhysicalHazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureWaterPhysicalHazard) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["mercury"] = p.Mercury
	p.fieldMap["cadmium"] = p.Cadmium
	p.fieldMap["lead"] = p.Lead
	p.fieldMap["chromium"] = p.Chromium
	p.fieldMap["arsenic"] = p.Arsenic
	p.fieldMap["copper"] = p.Copper
	p.fieldMap["pasture_water_id"] = p.PastureWaterID
}

func (p pastureWaterPhysicalHazard) clone(db *gorm.DB) pastureWaterPhysicalHazard {
	p.pastureWaterPhysicalHazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureWaterPhysicalHazard) replaceDB(db *gorm.DB) pastureWaterPhysicalHazard {
	p.pastureWaterPhysicalHazardDo.ReplaceDB(db)
	return p
}

type pastureWaterPhysicalHazardDo struct{ gen.DO }

type IPastureWaterPhysicalHazardDo interface {
	gen.SubQuery
	Debug() IPastureWaterPhysicalHazardDo
	WithContext(ctx context.Context) IPastureWaterPhysicalHazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureWaterPhysicalHazardDo
	WriteDB() IPastureWaterPhysicalHazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureWaterPhysicalHazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureWaterPhysicalHazardDo
	Not(conds ...gen.Condition) IPastureWaterPhysicalHazardDo
	Or(conds ...gen.Condition) IPastureWaterPhysicalHazardDo
	Select(conds ...field.Expr) IPastureWaterPhysicalHazardDo
	Where(conds ...gen.Condition) IPastureWaterPhysicalHazardDo
	Order(conds ...field.Expr) IPastureWaterPhysicalHazardDo
	Distinct(cols ...field.Expr) IPastureWaterPhysicalHazardDo
	Omit(cols ...field.Expr) IPastureWaterPhysicalHazardDo
	Join(table schema.Tabler, on ...field.Expr) IPastureWaterPhysicalHazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterPhysicalHazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterPhysicalHazardDo
	Group(cols ...field.Expr) IPastureWaterPhysicalHazardDo
	Having(conds ...gen.Condition) IPastureWaterPhysicalHazardDo
	Limit(limit int) IPastureWaterPhysicalHazardDo
	Offset(offset int) IPastureWaterPhysicalHazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterPhysicalHazardDo
	Unscoped() IPastureWaterPhysicalHazardDo
	Create(values ...*pasture.PastureWaterPhysicalHazard) error
	CreateInBatches(values []*pasture.PastureWaterPhysicalHazard, batchSize int) error
	Save(values ...*pasture.PastureWaterPhysicalHazard) error
	First() (*pasture.PastureWaterPhysicalHazard, error)
	Take() (*pasture.PastureWaterPhysicalHazard, error)
	Last() (*pasture.PastureWaterPhysicalHazard, error)
	Find() ([]*pasture.PastureWaterPhysicalHazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWaterPhysicalHazard, err error)
	FindInBatches(result *[]*pasture.PastureWaterPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureWaterPhysicalHazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureWaterPhysicalHazardDo
	Assign(attrs ...field.AssignExpr) IPastureWaterPhysicalHazardDo
	Joins(fields ...field.RelationField) IPastureWaterPhysicalHazardDo
	Preload(fields ...field.RelationField) IPastureWaterPhysicalHazardDo
	FirstOrInit() (*pasture.PastureWaterPhysicalHazard, error)
	FirstOrCreate() (*pasture.PastureWaterPhysicalHazard, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureWaterPhysicalHazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureWaterPhysicalHazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureWaterPhysicalHazardDo) Debug() IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureWaterPhysicalHazardDo) WithContext(ctx context.Context) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureWaterPhysicalHazardDo) ReadDB() IPastureWaterPhysicalHazardDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureWaterPhysicalHazardDo) WriteDB() IPastureWaterPhysicalHazardDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureWaterPhysicalHazardDo) Session(config *gorm.Session) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureWaterPhysicalHazardDo) Clauses(conds ...clause.Expression) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureWaterPhysicalHazardDo) Returning(value interface{}, columns ...string) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureWaterPhysicalHazardDo) Not(conds ...gen.Condition) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureWaterPhysicalHazardDo) Or(conds ...gen.Condition) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureWaterPhysicalHazardDo) Select(conds ...field.Expr) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureWaterPhysicalHazardDo) Where(conds ...gen.Condition) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureWaterPhysicalHazardDo) Order(conds ...field.Expr) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureWaterPhysicalHazardDo) Distinct(cols ...field.Expr) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureWaterPhysicalHazardDo) Omit(cols ...field.Expr) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureWaterPhysicalHazardDo) Join(table schema.Tabler, on ...field.Expr) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureWaterPhysicalHazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureWaterPhysicalHazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureWaterPhysicalHazardDo) Group(cols ...field.Expr) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureWaterPhysicalHazardDo) Having(conds ...gen.Condition) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureWaterPhysicalHazardDo) Limit(limit int) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureWaterPhysicalHazardDo) Offset(offset int) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureWaterPhysicalHazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureWaterPhysicalHazardDo) Unscoped() IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureWaterPhysicalHazardDo) Create(values ...*pasture.PastureWaterPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureWaterPhysicalHazardDo) CreateInBatches(values []*pasture.PastureWaterPhysicalHazard, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureWaterPhysicalHazardDo) Save(values ...*pasture.PastureWaterPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureWaterPhysicalHazardDo) First() (*pasture.PastureWaterPhysicalHazard, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterPhysicalHazard), nil
	}
}

func (p pastureWaterPhysicalHazardDo) Take() (*pasture.PastureWaterPhysicalHazard, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterPhysicalHazard), nil
	}
}

func (p pastureWaterPhysicalHazardDo) Last() (*pasture.PastureWaterPhysicalHazard, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterPhysicalHazard), nil
	}
}

func (p pastureWaterPhysicalHazardDo) Find() ([]*pasture.PastureWaterPhysicalHazard, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureWaterPhysicalHazard), err
}

func (p pastureWaterPhysicalHazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWaterPhysicalHazard, err error) {
	buf := make([]*pasture.PastureWaterPhysicalHazard, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureWaterPhysicalHazardDo) FindInBatches(result *[]*pasture.PastureWaterPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureWaterPhysicalHazardDo) Attrs(attrs ...field.AssignExpr) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureWaterPhysicalHazardDo) Assign(attrs ...field.AssignExpr) IPastureWaterPhysicalHazardDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureWaterPhysicalHazardDo) Joins(fields ...field.RelationField) IPastureWaterPhysicalHazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureWaterPhysicalHazardDo) Preload(fields ...field.RelationField) IPastureWaterPhysicalHazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureWaterPhysicalHazardDo) FirstOrInit() (*pasture.PastureWaterPhysicalHazard, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterPhysicalHazard), nil
	}
}

func (p pastureWaterPhysicalHazardDo) FirstOrCreate() (*pasture.PastureWaterPhysicalHazard, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterPhysicalHazard), nil
	}
}

func (p pastureWaterPhysicalHazardDo) FindByPage(offset int, limit int) (result []*pasture.PastureWaterPhysicalHazard, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureWaterPhysicalHazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureWaterPhysicalHazardDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureWaterPhysicalHazardDo) Delete(models ...*pasture.PastureWaterPhysicalHazard) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureWaterPhysicalHazardDo) withDO(do gen.Dao) *pastureWaterPhysicalHazardDo {
	p.DO = *do.(*gen.DO)
	return p
}
