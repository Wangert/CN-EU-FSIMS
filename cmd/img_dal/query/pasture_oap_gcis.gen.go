// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureOapGci(db *gorm.DB, opts ...gen.DOOption) pastureOapGci {
	_pastureOapGci := pastureOapGci{}

	_pastureOapGci.pastureOapGciDo.UseDB(db, opts...)
	_pastureOapGci.pastureOapGciDo.UseModel(&pasture.PastureOapGci{})

	tableName := _pastureOapGci.pastureOapGciDo.TableName()
	_pastureOapGci.ALL = field.NewAsterisk(tableName)
	_pastureOapGci.ID = field.NewUint(tableName, "id")
	_pastureOapGci.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureOapGci.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureOapGci.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureOapGci.PastureWaterRecordID = field.NewUint(tableName, "pasture_water_record_id")
	_pastureOapGci.OapGci1 = field.NewFloat64(tableName, "oap_gci1")
	_pastureOapGci.OapGci2 = field.NewFloat64(tableName, "oap_gci2")
	_pastureOapGci.OapGci3 = field.NewFloat64(tableName, "oap_gci3")
	_pastureOapGci.OapGci4 = field.NewFloat64(tableName, "oap_gci4")
	_pastureOapGci.OapGci5 = field.NewFloat64(tableName, "oap_gci5")
	_pastureOapGci.OapGci6 = field.NewFloat64(tableName, "oap_gci6")
	_pastureOapGci.OapGci7 = field.NewFloat64(tableName, "oap_gci7")
	_pastureOapGci.OapGci8 = field.NewFloat64(tableName, "oap_gci8")
	_pastureOapGci.OapGci9 = field.NewFloat64(tableName, "oap_gci9")
	_pastureOapGci.OapGci10 = field.NewFloat64(tableName, "oap_gci10")

	_pastureOapGci.fillFieldMap()

	return _pastureOapGci
}

type pastureOapGci struct {
	pastureOapGciDo pastureOapGciDo

	ALL                  field.Asterisk
	ID                   field.Uint
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	PastureWaterRecordID field.Uint
	OapGci1              field.Float64
	OapGci2              field.Float64
	OapGci3              field.Float64
	OapGci4              field.Float64
	OapGci5              field.Float64
	OapGci6              field.Float64
	OapGci7              field.Float64
	OapGci8              field.Float64
	OapGci9              field.Float64
	OapGci10             field.Float64

	fieldMap map[string]field.Expr
}

func (p pastureOapGci) Table(newTableName string) *pastureOapGci {
	p.pastureOapGciDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureOapGci) As(alias string) *pastureOapGci {
	p.pastureOapGciDo.DO = *(p.pastureOapGciDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureOapGci) updateTableName(table string) *pastureOapGci {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PastureWaterRecordID = field.NewUint(table, "pasture_water_record_id")
	p.OapGci1 = field.NewFloat64(table, "oap_gci1")
	p.OapGci2 = field.NewFloat64(table, "oap_gci2")
	p.OapGci3 = field.NewFloat64(table, "oap_gci3")
	p.OapGci4 = field.NewFloat64(table, "oap_gci4")
	p.OapGci5 = field.NewFloat64(table, "oap_gci5")
	p.OapGci6 = field.NewFloat64(table, "oap_gci6")
	p.OapGci7 = field.NewFloat64(table, "oap_gci7")
	p.OapGci8 = field.NewFloat64(table, "oap_gci8")
	p.OapGci9 = field.NewFloat64(table, "oap_gci9")
	p.OapGci10 = field.NewFloat64(table, "oap_gci10")

	p.fillFieldMap()

	return p
}

func (p *pastureOapGci) WithContext(ctx context.Context) IPastureOapGciDo {
	return p.pastureOapGciDo.WithContext(ctx)
}

func (p pastureOapGci) TableName() string { return p.pastureOapGciDo.TableName() }

func (p pastureOapGci) Alias() string { return p.pastureOapGciDo.Alias() }

func (p pastureOapGci) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureOapGciDo.Columns(cols...)
}

func (p *pastureOapGci) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureOapGci) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 15)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["pasture_water_record_id"] = p.PastureWaterRecordID
	p.fieldMap["oap_gci1"] = p.OapGci1
	p.fieldMap["oap_gci2"] = p.OapGci2
	p.fieldMap["oap_gci3"] = p.OapGci3
	p.fieldMap["oap_gci4"] = p.OapGci4
	p.fieldMap["oap_gci5"] = p.OapGci5
	p.fieldMap["oap_gci6"] = p.OapGci6
	p.fieldMap["oap_gci7"] = p.OapGci7
	p.fieldMap["oap_gci8"] = p.OapGci8
	p.fieldMap["oap_gci9"] = p.OapGci9
	p.fieldMap["oap_gci10"] = p.OapGci10
}

func (p pastureOapGci) clone(db *gorm.DB) pastureOapGci {
	p.pastureOapGciDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureOapGci) replaceDB(db *gorm.DB) pastureOapGci {
	p.pastureOapGciDo.ReplaceDB(db)
	return p
}

type pastureOapGciDo struct{ gen.DO }

type IPastureOapGciDo interface {
	gen.SubQuery
	Debug() IPastureOapGciDo
	WithContext(ctx context.Context) IPastureOapGciDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureOapGciDo
	WriteDB() IPastureOapGciDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureOapGciDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureOapGciDo
	Not(conds ...gen.Condition) IPastureOapGciDo
	Or(conds ...gen.Condition) IPastureOapGciDo
	Select(conds ...field.Expr) IPastureOapGciDo
	Where(conds ...gen.Condition) IPastureOapGciDo
	Order(conds ...field.Expr) IPastureOapGciDo
	Distinct(cols ...field.Expr) IPastureOapGciDo
	Omit(cols ...field.Expr) IPastureOapGciDo
	Join(table schema.Tabler, on ...field.Expr) IPastureOapGciDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureOapGciDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureOapGciDo
	Group(cols ...field.Expr) IPastureOapGciDo
	Having(conds ...gen.Condition) IPastureOapGciDo
	Limit(limit int) IPastureOapGciDo
	Offset(offset int) IPastureOapGciDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureOapGciDo
	Unscoped() IPastureOapGciDo
	Create(values ...*pasture.PastureOapGci) error
	CreateInBatches(values []*pasture.PastureOapGci, batchSize int) error
	Save(values ...*pasture.PastureOapGci) error
	First() (*pasture.PastureOapGci, error)
	Take() (*pasture.PastureOapGci, error)
	Last() (*pasture.PastureOapGci, error)
	Find() ([]*pasture.PastureOapGci, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureOapGci, err error)
	FindInBatches(result *[]*pasture.PastureOapGci, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureOapGci) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureOapGciDo
	Assign(attrs ...field.AssignExpr) IPastureOapGciDo
	Joins(fields ...field.RelationField) IPastureOapGciDo
	Preload(fields ...field.RelationField) IPastureOapGciDo
	FirstOrInit() (*pasture.PastureOapGci, error)
	FirstOrCreate() (*pasture.PastureOapGci, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureOapGci, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureOapGciDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureOapGciDo) Debug() IPastureOapGciDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureOapGciDo) WithContext(ctx context.Context) IPastureOapGciDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureOapGciDo) ReadDB() IPastureOapGciDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureOapGciDo) WriteDB() IPastureOapGciDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureOapGciDo) Session(config *gorm.Session) IPastureOapGciDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureOapGciDo) Clauses(conds ...clause.Expression) IPastureOapGciDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureOapGciDo) Returning(value interface{}, columns ...string) IPastureOapGciDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureOapGciDo) Not(conds ...gen.Condition) IPastureOapGciDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureOapGciDo) Or(conds ...gen.Condition) IPastureOapGciDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureOapGciDo) Select(conds ...field.Expr) IPastureOapGciDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureOapGciDo) Where(conds ...gen.Condition) IPastureOapGciDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureOapGciDo) Order(conds ...field.Expr) IPastureOapGciDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureOapGciDo) Distinct(cols ...field.Expr) IPastureOapGciDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureOapGciDo) Omit(cols ...field.Expr) IPastureOapGciDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureOapGciDo) Join(table schema.Tabler, on ...field.Expr) IPastureOapGciDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureOapGciDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureOapGciDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureOapGciDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureOapGciDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureOapGciDo) Group(cols ...field.Expr) IPastureOapGciDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureOapGciDo) Having(conds ...gen.Condition) IPastureOapGciDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureOapGciDo) Limit(limit int) IPastureOapGciDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureOapGciDo) Offset(offset int) IPastureOapGciDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureOapGciDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureOapGciDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureOapGciDo) Unscoped() IPastureOapGciDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureOapGciDo) Create(values ...*pasture.PastureOapGci) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureOapGciDo) CreateInBatches(values []*pasture.PastureOapGci, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureOapGciDo) Save(values ...*pasture.PastureOapGci) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureOapGciDo) First() (*pasture.PastureOapGci, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureOapGci), nil
	}
}

func (p pastureOapGciDo) Take() (*pasture.PastureOapGci, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureOapGci), nil
	}
}

func (p pastureOapGciDo) Last() (*pasture.PastureOapGci, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureOapGci), nil
	}
}

func (p pastureOapGciDo) Find() ([]*pasture.PastureOapGci, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureOapGci), err
}

func (p pastureOapGciDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureOapGci, err error) {
	buf := make([]*pasture.PastureOapGci, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureOapGciDo) FindInBatches(result *[]*pasture.PastureOapGci, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureOapGciDo) Attrs(attrs ...field.AssignExpr) IPastureOapGciDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureOapGciDo) Assign(attrs ...field.AssignExpr) IPastureOapGciDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureOapGciDo) Joins(fields ...field.RelationField) IPastureOapGciDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureOapGciDo) Preload(fields ...field.RelationField) IPastureOapGciDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureOapGciDo) FirstOrInit() (*pasture.PastureOapGci, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureOapGci), nil
	}
}

func (p pastureOapGciDo) FirstOrCreate() (*pasture.PastureOapGci, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureOapGci), nil
	}
}

func (p pastureOapGciDo) FindByPage(offset int, limit int) (result []*pasture.PastureOapGci, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureOapGciDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureOapGciDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureOapGciDo) Delete(models ...*pasture.PastureOapGci) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureOapGciDo) withDO(do gen.Dao) *pastureOapGciDo {
	p.DO = *do.(*gen.DO)
	return p
}
