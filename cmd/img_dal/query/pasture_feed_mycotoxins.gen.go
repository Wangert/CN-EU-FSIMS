// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureFeedMycotoxins(db *gorm.DB, opts ...gen.DOOption) pastureFeedMycotoxins {
	_pastureFeedMycotoxins := pastureFeedMycotoxins{}

	_pastureFeedMycotoxins.pastureFeedMycotoxinsDo.UseDB(db, opts...)
	_pastureFeedMycotoxins.pastureFeedMycotoxinsDo.UseModel(&pasture.PastureFeedMycotoxins{})

	tableName := _pastureFeedMycotoxins.pastureFeedMycotoxinsDo.TableName()
	_pastureFeedMycotoxins.ALL = field.NewAsterisk(tableName)
	_pastureFeedMycotoxins.ID = field.NewUint(tableName, "id")
	_pastureFeedMycotoxins.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureFeedMycotoxins.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureFeedMycotoxins.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureFeedMycotoxins.TimeRecordAt = field.NewTime(tableName, "time_record_at")
	_pastureFeedMycotoxins.HouseNumber = field.NewString(tableName, "house_number")
	_pastureFeedMycotoxins.Afb1 = pastureFeedMycotoxinsHasOneAfb1{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Afb1", "pasture.Afb1"),
	}

	_pastureFeedMycotoxins.Don = pastureFeedMycotoxinsHasOneDon{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Don", "pasture.Don"),
	}

	_pastureFeedMycotoxins.T2toxin = pastureFeedMycotoxinsHasOneT2toxin{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("T2toxin", "pasture.T2toxin"),
	}

	_pastureFeedMycotoxins.T2VomZea = pastureFeedMycotoxinsHasOneT2VomZea{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("T2VomZea", "pasture.T2VomZea"),
	}

	_pastureFeedMycotoxins.fillFieldMap()

	return _pastureFeedMycotoxins
}

type pastureFeedMycotoxins struct {
	pastureFeedMycotoxinsDo pastureFeedMycotoxinsDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	TimeRecordAt field.Time
	HouseNumber  field.String
	Afb1         pastureFeedMycotoxinsHasOneAfb1

	Don pastureFeedMycotoxinsHasOneDon

	T2toxin pastureFeedMycotoxinsHasOneT2toxin

	T2VomZea pastureFeedMycotoxinsHasOneT2VomZea

	fieldMap map[string]field.Expr
}

func (p pastureFeedMycotoxins) Table(newTableName string) *pastureFeedMycotoxins {
	p.pastureFeedMycotoxinsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureFeedMycotoxins) As(alias string) *pastureFeedMycotoxins {
	p.pastureFeedMycotoxinsDo.DO = *(p.pastureFeedMycotoxinsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureFeedMycotoxins) updateTableName(table string) *pastureFeedMycotoxins {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.TimeRecordAt = field.NewTime(table, "time_record_at")
	p.HouseNumber = field.NewString(table, "house_number")

	p.fillFieldMap()

	return p
}

func (p *pastureFeedMycotoxins) WithContext(ctx context.Context) IPastureFeedMycotoxinsDo {
	return p.pastureFeedMycotoxinsDo.WithContext(ctx)
}

func (p pastureFeedMycotoxins) TableName() string { return p.pastureFeedMycotoxinsDo.TableName() }

func (p pastureFeedMycotoxins) Alias() string { return p.pastureFeedMycotoxinsDo.Alias() }

func (p pastureFeedMycotoxins) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureFeedMycotoxinsDo.Columns(cols...)
}

func (p *pastureFeedMycotoxins) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureFeedMycotoxins) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["time_record_at"] = p.TimeRecordAt
	p.fieldMap["house_number"] = p.HouseNumber

}

func (p pastureFeedMycotoxins) clone(db *gorm.DB) pastureFeedMycotoxins {
	p.pastureFeedMycotoxinsDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureFeedMycotoxins) replaceDB(db *gorm.DB) pastureFeedMycotoxins {
	p.pastureFeedMycotoxinsDo.ReplaceDB(db)
	return p
}

type pastureFeedMycotoxinsHasOneAfb1 struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFeedMycotoxinsHasOneAfb1) Where(conds ...field.Expr) *pastureFeedMycotoxinsHasOneAfb1 {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFeedMycotoxinsHasOneAfb1) WithContext(ctx context.Context) *pastureFeedMycotoxinsHasOneAfb1 {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFeedMycotoxinsHasOneAfb1) Session(session *gorm.Session) *pastureFeedMycotoxinsHasOneAfb1 {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFeedMycotoxinsHasOneAfb1) Model(m *pasture.PastureFeedMycotoxins) *pastureFeedMycotoxinsHasOneAfb1Tx {
	return &pastureFeedMycotoxinsHasOneAfb1Tx{a.db.Model(m).Association(a.Name())}
}

type pastureFeedMycotoxinsHasOneAfb1Tx struct{ tx *gorm.Association }

func (a pastureFeedMycotoxinsHasOneAfb1Tx) Find() (result *pasture.Afb1, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFeedMycotoxinsHasOneAfb1Tx) Append(values ...*pasture.Afb1) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneAfb1Tx) Replace(values ...*pasture.Afb1) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneAfb1Tx) Delete(values ...*pasture.Afb1) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneAfb1Tx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFeedMycotoxinsHasOneAfb1Tx) Count() int64 {
	return a.tx.Count()
}

type pastureFeedMycotoxinsHasOneDon struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFeedMycotoxinsHasOneDon) Where(conds ...field.Expr) *pastureFeedMycotoxinsHasOneDon {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFeedMycotoxinsHasOneDon) WithContext(ctx context.Context) *pastureFeedMycotoxinsHasOneDon {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFeedMycotoxinsHasOneDon) Session(session *gorm.Session) *pastureFeedMycotoxinsHasOneDon {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFeedMycotoxinsHasOneDon) Model(m *pasture.PastureFeedMycotoxins) *pastureFeedMycotoxinsHasOneDonTx {
	return &pastureFeedMycotoxinsHasOneDonTx{a.db.Model(m).Association(a.Name())}
}

type pastureFeedMycotoxinsHasOneDonTx struct{ tx *gorm.Association }

func (a pastureFeedMycotoxinsHasOneDonTx) Find() (result *pasture.Don, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFeedMycotoxinsHasOneDonTx) Append(values ...*pasture.Don) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneDonTx) Replace(values ...*pasture.Don) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneDonTx) Delete(values ...*pasture.Don) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneDonTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFeedMycotoxinsHasOneDonTx) Count() int64 {
	return a.tx.Count()
}

type pastureFeedMycotoxinsHasOneT2toxin struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFeedMycotoxinsHasOneT2toxin) Where(conds ...field.Expr) *pastureFeedMycotoxinsHasOneT2toxin {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFeedMycotoxinsHasOneT2toxin) WithContext(ctx context.Context) *pastureFeedMycotoxinsHasOneT2toxin {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFeedMycotoxinsHasOneT2toxin) Session(session *gorm.Session) *pastureFeedMycotoxinsHasOneT2toxin {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFeedMycotoxinsHasOneT2toxin) Model(m *pasture.PastureFeedMycotoxins) *pastureFeedMycotoxinsHasOneT2toxinTx {
	return &pastureFeedMycotoxinsHasOneT2toxinTx{a.db.Model(m).Association(a.Name())}
}

type pastureFeedMycotoxinsHasOneT2toxinTx struct{ tx *gorm.Association }

func (a pastureFeedMycotoxinsHasOneT2toxinTx) Find() (result *pasture.T2toxin, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFeedMycotoxinsHasOneT2toxinTx) Append(values ...*pasture.T2toxin) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneT2toxinTx) Replace(values ...*pasture.T2toxin) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneT2toxinTx) Delete(values ...*pasture.T2toxin) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneT2toxinTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFeedMycotoxinsHasOneT2toxinTx) Count() int64 {
	return a.tx.Count()
}

type pastureFeedMycotoxinsHasOneT2VomZea struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureFeedMycotoxinsHasOneT2VomZea) Where(conds ...field.Expr) *pastureFeedMycotoxinsHasOneT2VomZea {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureFeedMycotoxinsHasOneT2VomZea) WithContext(ctx context.Context) *pastureFeedMycotoxinsHasOneT2VomZea {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureFeedMycotoxinsHasOneT2VomZea) Session(session *gorm.Session) *pastureFeedMycotoxinsHasOneT2VomZea {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureFeedMycotoxinsHasOneT2VomZea) Model(m *pasture.PastureFeedMycotoxins) *pastureFeedMycotoxinsHasOneT2VomZeaTx {
	return &pastureFeedMycotoxinsHasOneT2VomZeaTx{a.db.Model(m).Association(a.Name())}
}

type pastureFeedMycotoxinsHasOneT2VomZeaTx struct{ tx *gorm.Association }

func (a pastureFeedMycotoxinsHasOneT2VomZeaTx) Find() (result *pasture.T2VomZea, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureFeedMycotoxinsHasOneT2VomZeaTx) Append(values ...*pasture.T2VomZea) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneT2VomZeaTx) Replace(values ...*pasture.T2VomZea) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneT2VomZeaTx) Delete(values ...*pasture.T2VomZea) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureFeedMycotoxinsHasOneT2VomZeaTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureFeedMycotoxinsHasOneT2VomZeaTx) Count() int64 {
	return a.tx.Count()
}

type pastureFeedMycotoxinsDo struct{ gen.DO }

type IPastureFeedMycotoxinsDo interface {
	gen.SubQuery
	Debug() IPastureFeedMycotoxinsDo
	WithContext(ctx context.Context) IPastureFeedMycotoxinsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureFeedMycotoxinsDo
	WriteDB() IPastureFeedMycotoxinsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureFeedMycotoxinsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureFeedMycotoxinsDo
	Not(conds ...gen.Condition) IPastureFeedMycotoxinsDo
	Or(conds ...gen.Condition) IPastureFeedMycotoxinsDo
	Select(conds ...field.Expr) IPastureFeedMycotoxinsDo
	Where(conds ...gen.Condition) IPastureFeedMycotoxinsDo
	Order(conds ...field.Expr) IPastureFeedMycotoxinsDo
	Distinct(cols ...field.Expr) IPastureFeedMycotoxinsDo
	Omit(cols ...field.Expr) IPastureFeedMycotoxinsDo
	Join(table schema.Tabler, on ...field.Expr) IPastureFeedMycotoxinsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFeedMycotoxinsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureFeedMycotoxinsDo
	Group(cols ...field.Expr) IPastureFeedMycotoxinsDo
	Having(conds ...gen.Condition) IPastureFeedMycotoxinsDo
	Limit(limit int) IPastureFeedMycotoxinsDo
	Offset(offset int) IPastureFeedMycotoxinsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFeedMycotoxinsDo
	Unscoped() IPastureFeedMycotoxinsDo
	Create(values ...*pasture.PastureFeedMycotoxins) error
	CreateInBatches(values []*pasture.PastureFeedMycotoxins, batchSize int) error
	Save(values ...*pasture.PastureFeedMycotoxins) error
	First() (*pasture.PastureFeedMycotoxins, error)
	Take() (*pasture.PastureFeedMycotoxins, error)
	Last() (*pasture.PastureFeedMycotoxins, error)
	Find() ([]*pasture.PastureFeedMycotoxins, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFeedMycotoxins, err error)
	FindInBatches(result *[]*pasture.PastureFeedMycotoxins, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureFeedMycotoxins) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureFeedMycotoxinsDo
	Assign(attrs ...field.AssignExpr) IPastureFeedMycotoxinsDo
	Joins(fields ...field.RelationField) IPastureFeedMycotoxinsDo
	Preload(fields ...field.RelationField) IPastureFeedMycotoxinsDo
	FirstOrInit() (*pasture.PastureFeedMycotoxins, error)
	FirstOrCreate() (*pasture.PastureFeedMycotoxins, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureFeedMycotoxins, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureFeedMycotoxinsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureFeedMycotoxinsDo) Debug() IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureFeedMycotoxinsDo) WithContext(ctx context.Context) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureFeedMycotoxinsDo) ReadDB() IPastureFeedMycotoxinsDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureFeedMycotoxinsDo) WriteDB() IPastureFeedMycotoxinsDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureFeedMycotoxinsDo) Session(config *gorm.Session) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureFeedMycotoxinsDo) Clauses(conds ...clause.Expression) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureFeedMycotoxinsDo) Returning(value interface{}, columns ...string) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureFeedMycotoxinsDo) Not(conds ...gen.Condition) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureFeedMycotoxinsDo) Or(conds ...gen.Condition) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureFeedMycotoxinsDo) Select(conds ...field.Expr) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureFeedMycotoxinsDo) Where(conds ...gen.Condition) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureFeedMycotoxinsDo) Order(conds ...field.Expr) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureFeedMycotoxinsDo) Distinct(cols ...field.Expr) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureFeedMycotoxinsDo) Omit(cols ...field.Expr) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureFeedMycotoxinsDo) Join(table schema.Tabler, on ...field.Expr) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureFeedMycotoxinsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureFeedMycotoxinsDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureFeedMycotoxinsDo) Group(cols ...field.Expr) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureFeedMycotoxinsDo) Having(conds ...gen.Condition) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureFeedMycotoxinsDo) Limit(limit int) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureFeedMycotoxinsDo) Offset(offset int) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureFeedMycotoxinsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureFeedMycotoxinsDo) Unscoped() IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureFeedMycotoxinsDo) Create(values ...*pasture.PastureFeedMycotoxins) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureFeedMycotoxinsDo) CreateInBatches(values []*pasture.PastureFeedMycotoxins, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureFeedMycotoxinsDo) Save(values ...*pasture.PastureFeedMycotoxins) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureFeedMycotoxinsDo) First() (*pasture.PastureFeedMycotoxins, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedMycotoxins), nil
	}
}

func (p pastureFeedMycotoxinsDo) Take() (*pasture.PastureFeedMycotoxins, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedMycotoxins), nil
	}
}

func (p pastureFeedMycotoxinsDo) Last() (*pasture.PastureFeedMycotoxins, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedMycotoxins), nil
	}
}

func (p pastureFeedMycotoxinsDo) Find() ([]*pasture.PastureFeedMycotoxins, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureFeedMycotoxins), err
}

func (p pastureFeedMycotoxinsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFeedMycotoxins, err error) {
	buf := make([]*pasture.PastureFeedMycotoxins, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureFeedMycotoxinsDo) FindInBatches(result *[]*pasture.PastureFeedMycotoxins, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureFeedMycotoxinsDo) Attrs(attrs ...field.AssignExpr) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureFeedMycotoxinsDo) Assign(attrs ...field.AssignExpr) IPastureFeedMycotoxinsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureFeedMycotoxinsDo) Joins(fields ...field.RelationField) IPastureFeedMycotoxinsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureFeedMycotoxinsDo) Preload(fields ...field.RelationField) IPastureFeedMycotoxinsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureFeedMycotoxinsDo) FirstOrInit() (*pasture.PastureFeedMycotoxins, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedMycotoxins), nil
	}
}

func (p pastureFeedMycotoxinsDo) FirstOrCreate() (*pasture.PastureFeedMycotoxins, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedMycotoxins), nil
	}
}

func (p pastureFeedMycotoxinsDo) FindByPage(offset int, limit int) (result []*pasture.PastureFeedMycotoxins, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureFeedMycotoxinsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureFeedMycotoxinsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureFeedMycotoxinsDo) Delete(models ...*pasture.PastureFeedMycotoxins) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureFeedMycotoxinsDo) withDO(do gen.Dao) *pastureFeedMycotoxinsDo {
	p.DO = *do.(*gen.DO)
	return p
}
