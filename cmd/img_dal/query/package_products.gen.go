// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/product"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPackageProduct(db *gorm.DB, opts ...gen.DOOption) packageProduct {
	_packageProduct := packageProduct{}

	_packageProduct.packageProductDo.UseDB(db, opts...)
	_packageProduct.packageProductDo.UseModel(&product.PackageProduct{})

	tableName := _packageProduct.packageProductDo.TableName()
	_packageProduct.ALL = field.NewAsterisk(tableName)
	_packageProduct.ID = field.NewUint(tableName, "id")
	_packageProduct.CreatedAt = field.NewTime(tableName, "created_at")
	_packageProduct.UpdatedAt = field.NewTime(tableName, "updated_at")
	_packageProduct.DeletedAt = field.NewField(tableName, "deleted_at")
	_packageProduct.Number = field.NewString(tableName, "number")
	_packageProduct.Type = field.NewInt(tableName, "type")
	_packageProduct.TypeName = field.NewString(tableName, "type_name")
	_packageProduct.PackMethod = field.NewInt(tableName, "pack_method")
	_packageProduct.PackMethodName = field.NewString(tableName, "pack_method_name")
	_packageProduct.ShelfLife = field.NewString(tableName, "shelf_life")
	_packageProduct.Weight = field.NewFloat64(tableName, "weight")
	_packageProduct.State = field.NewInt(tableName, "state")
	_packageProduct.HouseNumber = field.NewString(tableName, "house_number")
	_packageProduct.BatchNumber = field.NewString(tableName, "batch_number")
	_packageProduct.TransportBatchNumber = field.NewString(tableName, "transport_batch_number")

	_packageProduct.fillFieldMap()

	return _packageProduct
}

type packageProduct struct {
	packageProductDo packageProductDo

	ALL                  field.Asterisk
	ID                   field.Uint
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	Number               field.String
	Type                 field.Int
	TypeName             field.String
	PackMethod           field.Int
	PackMethodName       field.String
	ShelfLife            field.String
	Weight               field.Float64
	State                field.Int
	HouseNumber          field.String
	BatchNumber          field.String
	TransportBatchNumber field.String

	fieldMap map[string]field.Expr
}

func (p packageProduct) Table(newTableName string) *packageProduct {
	p.packageProductDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p packageProduct) As(alias string) *packageProduct {
	p.packageProductDo.DO = *(p.packageProductDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *packageProduct) updateTableName(table string) *packageProduct {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Number = field.NewString(table, "number")
	p.Type = field.NewInt(table, "type")
	p.TypeName = field.NewString(table, "type_name")
	p.PackMethod = field.NewInt(table, "pack_method")
	p.PackMethodName = field.NewString(table, "pack_method_name")
	p.ShelfLife = field.NewString(table, "shelf_life")
	p.Weight = field.NewFloat64(table, "weight")
	p.State = field.NewInt(table, "state")
	p.HouseNumber = field.NewString(table, "house_number")
	p.BatchNumber = field.NewString(table, "batch_number")
	p.TransportBatchNumber = field.NewString(table, "transport_batch_number")

	p.fillFieldMap()

	return p
}

func (p *packageProduct) WithContext(ctx context.Context) IPackageProductDo {
	return p.packageProductDo.WithContext(ctx)
}

func (p packageProduct) TableName() string { return p.packageProductDo.TableName() }

func (p packageProduct) Alias() string { return p.packageProductDo.Alias() }

func (p packageProduct) Columns(cols ...field.Expr) gen.Columns {
	return p.packageProductDo.Columns(cols...)
}

func (p *packageProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *packageProduct) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 15)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["number"] = p.Number
	p.fieldMap["type"] = p.Type
	p.fieldMap["type_name"] = p.TypeName
	p.fieldMap["pack_method"] = p.PackMethod
	p.fieldMap["pack_method_name"] = p.PackMethodName
	p.fieldMap["shelf_life"] = p.ShelfLife
	p.fieldMap["weight"] = p.Weight
	p.fieldMap["state"] = p.State
	p.fieldMap["house_number"] = p.HouseNumber
	p.fieldMap["batch_number"] = p.BatchNumber
	p.fieldMap["transport_batch_number"] = p.TransportBatchNumber
}

func (p packageProduct) clone(db *gorm.DB) packageProduct {
	p.packageProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p packageProduct) replaceDB(db *gorm.DB) packageProduct {
	p.packageProductDo.ReplaceDB(db)
	return p
}

type packageProductDo struct{ gen.DO }

type IPackageProductDo interface {
	gen.SubQuery
	Debug() IPackageProductDo
	WithContext(ctx context.Context) IPackageProductDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPackageProductDo
	WriteDB() IPackageProductDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPackageProductDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPackageProductDo
	Not(conds ...gen.Condition) IPackageProductDo
	Or(conds ...gen.Condition) IPackageProductDo
	Select(conds ...field.Expr) IPackageProductDo
	Where(conds ...gen.Condition) IPackageProductDo
	Order(conds ...field.Expr) IPackageProductDo
	Distinct(cols ...field.Expr) IPackageProductDo
	Omit(cols ...field.Expr) IPackageProductDo
	Join(table schema.Tabler, on ...field.Expr) IPackageProductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPackageProductDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPackageProductDo
	Group(cols ...field.Expr) IPackageProductDo
	Having(conds ...gen.Condition) IPackageProductDo
	Limit(limit int) IPackageProductDo
	Offset(offset int) IPackageProductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPackageProductDo
	Unscoped() IPackageProductDo
	Create(values ...*product.PackageProduct) error
	CreateInBatches(values []*product.PackageProduct, batchSize int) error
	Save(values ...*product.PackageProduct) error
	First() (*product.PackageProduct, error)
	Take() (*product.PackageProduct, error)
	Last() (*product.PackageProduct, error)
	Find() ([]*product.PackageProduct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*product.PackageProduct, err error)
	FindInBatches(result *[]*product.PackageProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*product.PackageProduct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPackageProductDo
	Assign(attrs ...field.AssignExpr) IPackageProductDo
	Joins(fields ...field.RelationField) IPackageProductDo
	Preload(fields ...field.RelationField) IPackageProductDo
	FirstOrInit() (*product.PackageProduct, error)
	FirstOrCreate() (*product.PackageProduct, error)
	FindByPage(offset int, limit int) (result []*product.PackageProduct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPackageProductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p packageProductDo) Debug() IPackageProductDo {
	return p.withDO(p.DO.Debug())
}

func (p packageProductDo) WithContext(ctx context.Context) IPackageProductDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p packageProductDo) ReadDB() IPackageProductDo {
	return p.Clauses(dbresolver.Read)
}

func (p packageProductDo) WriteDB() IPackageProductDo {
	return p.Clauses(dbresolver.Write)
}

func (p packageProductDo) Session(config *gorm.Session) IPackageProductDo {
	return p.withDO(p.DO.Session(config))
}

func (p packageProductDo) Clauses(conds ...clause.Expression) IPackageProductDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p packageProductDo) Returning(value interface{}, columns ...string) IPackageProductDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p packageProductDo) Not(conds ...gen.Condition) IPackageProductDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p packageProductDo) Or(conds ...gen.Condition) IPackageProductDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p packageProductDo) Select(conds ...field.Expr) IPackageProductDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p packageProductDo) Where(conds ...gen.Condition) IPackageProductDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p packageProductDo) Order(conds ...field.Expr) IPackageProductDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p packageProductDo) Distinct(cols ...field.Expr) IPackageProductDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p packageProductDo) Omit(cols ...field.Expr) IPackageProductDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p packageProductDo) Join(table schema.Tabler, on ...field.Expr) IPackageProductDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p packageProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPackageProductDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p packageProductDo) RightJoin(table schema.Tabler, on ...field.Expr) IPackageProductDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p packageProductDo) Group(cols ...field.Expr) IPackageProductDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p packageProductDo) Having(conds ...gen.Condition) IPackageProductDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p packageProductDo) Limit(limit int) IPackageProductDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p packageProductDo) Offset(offset int) IPackageProductDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p packageProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPackageProductDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p packageProductDo) Unscoped() IPackageProductDo {
	return p.withDO(p.DO.Unscoped())
}

func (p packageProductDo) Create(values ...*product.PackageProduct) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p packageProductDo) CreateInBatches(values []*product.PackageProduct, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p packageProductDo) Save(values ...*product.PackageProduct) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p packageProductDo) First() (*product.PackageProduct, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*product.PackageProduct), nil
	}
}

func (p packageProductDo) Take() (*product.PackageProduct, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*product.PackageProduct), nil
	}
}

func (p packageProductDo) Last() (*product.PackageProduct, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*product.PackageProduct), nil
	}
}

func (p packageProductDo) Find() ([]*product.PackageProduct, error) {
	result, err := p.DO.Find()
	return result.([]*product.PackageProduct), err
}

func (p packageProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*product.PackageProduct, err error) {
	buf := make([]*product.PackageProduct, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p packageProductDo) FindInBatches(result *[]*product.PackageProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p packageProductDo) Attrs(attrs ...field.AssignExpr) IPackageProductDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p packageProductDo) Assign(attrs ...field.AssignExpr) IPackageProductDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p packageProductDo) Joins(fields ...field.RelationField) IPackageProductDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p packageProductDo) Preload(fields ...field.RelationField) IPackageProductDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p packageProductDo) FirstOrInit() (*product.PackageProduct, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*product.PackageProduct), nil
	}
}

func (p packageProductDo) FirstOrCreate() (*product.PackageProduct, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*product.PackageProduct), nil
	}
}

func (p packageProductDo) FindByPage(offset int, limit int) (result []*product.PackageProduct, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p packageProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p packageProductDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p packageProductDo) Delete(models ...*product.PackageProduct) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *packageProductDo) withDO(do gen.Dao) *packageProductDo {
	p.DO = *do.(*gen.DO)
	return p
}
