// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/product"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSlaughterProduct(db *gorm.DB, opts ...gen.DOOption) slaughterProduct {
	_slaughterProduct := slaughterProduct{}

	_slaughterProduct.slaughterProductDo.UseDB(db, opts...)
	_slaughterProduct.slaughterProductDo.UseModel(&product.SlaughterProduct{})

	tableName := _slaughterProduct.slaughterProductDo.TableName()
	_slaughterProduct.ALL = field.NewAsterisk(tableName)
	_slaughterProduct.ID = field.NewUint(tableName, "id")
	_slaughterProduct.CreatedAt = field.NewTime(tableName, "created_at")
	_slaughterProduct.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slaughterProduct.DeletedAt = field.NewField(tableName, "deleted_at")
	_slaughterProduct.Number = field.NewString(tableName, "number")
	_slaughterProduct.Type = field.NewInt(tableName, "type")
	_slaughterProduct.TypeName = field.NewString(tableName, "type_name")
	_slaughterProduct.Weight = field.NewFloat64(tableName, "weight")
	_slaughterProduct.State = field.NewInt(tableName, "state")
	_slaughterProduct.HouseNumber = field.NewString(tableName, "house_number")
	_slaughterProduct.BatchNumber = field.NewString(tableName, "batch_number")

	_slaughterProduct.fillFieldMap()

	return _slaughterProduct
}

type slaughterProduct struct {
	slaughterProductDo slaughterProductDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Number      field.String
	Type        field.Int
	TypeName    field.String
	Weight      field.Float64
	State       field.Int
	HouseNumber field.String
	BatchNumber field.String

	fieldMap map[string]field.Expr
}

func (s slaughterProduct) Table(newTableName string) *slaughterProduct {
	s.slaughterProductDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slaughterProduct) As(alias string) *slaughterProduct {
	s.slaughterProductDo.DO = *(s.slaughterProductDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slaughterProduct) updateTableName(table string) *slaughterProduct {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.Number = field.NewString(table, "number")
	s.Type = field.NewInt(table, "type")
	s.TypeName = field.NewString(table, "type_name")
	s.Weight = field.NewFloat64(table, "weight")
	s.State = field.NewInt(table, "state")
	s.HouseNumber = field.NewString(table, "house_number")
	s.BatchNumber = field.NewString(table, "batch_number")

	s.fillFieldMap()

	return s
}

func (s *slaughterProduct) WithContext(ctx context.Context) ISlaughterProductDo {
	return s.slaughterProductDo.WithContext(ctx)
}

func (s slaughterProduct) TableName() string { return s.slaughterProductDo.TableName() }

func (s slaughterProduct) Alias() string { return s.slaughterProductDo.Alias() }

func (s slaughterProduct) Columns(cols ...field.Expr) gen.Columns {
	return s.slaughterProductDo.Columns(cols...)
}

func (s *slaughterProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slaughterProduct) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["number"] = s.Number
	s.fieldMap["type"] = s.Type
	s.fieldMap["type_name"] = s.TypeName
	s.fieldMap["weight"] = s.Weight
	s.fieldMap["state"] = s.State
	s.fieldMap["house_number"] = s.HouseNumber
	s.fieldMap["batch_number"] = s.BatchNumber
}

func (s slaughterProduct) clone(db *gorm.DB) slaughterProduct {
	s.slaughterProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slaughterProduct) replaceDB(db *gorm.DB) slaughterProduct {
	s.slaughterProductDo.ReplaceDB(db)
	return s
}

type slaughterProductDo struct{ gen.DO }

type ISlaughterProductDo interface {
	gen.SubQuery
	Debug() ISlaughterProductDo
	WithContext(ctx context.Context) ISlaughterProductDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlaughterProductDo
	WriteDB() ISlaughterProductDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlaughterProductDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlaughterProductDo
	Not(conds ...gen.Condition) ISlaughterProductDo
	Or(conds ...gen.Condition) ISlaughterProductDo
	Select(conds ...field.Expr) ISlaughterProductDo
	Where(conds ...gen.Condition) ISlaughterProductDo
	Order(conds ...field.Expr) ISlaughterProductDo
	Distinct(cols ...field.Expr) ISlaughterProductDo
	Omit(cols ...field.Expr) ISlaughterProductDo
	Join(table schema.Tabler, on ...field.Expr) ISlaughterProductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterProductDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterProductDo
	Group(cols ...field.Expr) ISlaughterProductDo
	Having(conds ...gen.Condition) ISlaughterProductDo
	Limit(limit int) ISlaughterProductDo
	Offset(offset int) ISlaughterProductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterProductDo
	Unscoped() ISlaughterProductDo
	Create(values ...*product.SlaughterProduct) error
	CreateInBatches(values []*product.SlaughterProduct, batchSize int) error
	Save(values ...*product.SlaughterProduct) error
	First() (*product.SlaughterProduct, error)
	Take() (*product.SlaughterProduct, error)
	Last() (*product.SlaughterProduct, error)
	Find() ([]*product.SlaughterProduct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*product.SlaughterProduct, err error)
	FindInBatches(result *[]*product.SlaughterProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*product.SlaughterProduct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlaughterProductDo
	Assign(attrs ...field.AssignExpr) ISlaughterProductDo
	Joins(fields ...field.RelationField) ISlaughterProductDo
	Preload(fields ...field.RelationField) ISlaughterProductDo
	FirstOrInit() (*product.SlaughterProduct, error)
	FirstOrCreate() (*product.SlaughterProduct, error)
	FindByPage(offset int, limit int) (result []*product.SlaughterProduct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlaughterProductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slaughterProductDo) Debug() ISlaughterProductDo {
	return s.withDO(s.DO.Debug())
}

func (s slaughterProductDo) WithContext(ctx context.Context) ISlaughterProductDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slaughterProductDo) ReadDB() ISlaughterProductDo {
	return s.Clauses(dbresolver.Read)
}

func (s slaughterProductDo) WriteDB() ISlaughterProductDo {
	return s.Clauses(dbresolver.Write)
}

func (s slaughterProductDo) Session(config *gorm.Session) ISlaughterProductDo {
	return s.withDO(s.DO.Session(config))
}

func (s slaughterProductDo) Clauses(conds ...clause.Expression) ISlaughterProductDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slaughterProductDo) Returning(value interface{}, columns ...string) ISlaughterProductDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slaughterProductDo) Not(conds ...gen.Condition) ISlaughterProductDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slaughterProductDo) Or(conds ...gen.Condition) ISlaughterProductDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slaughterProductDo) Select(conds ...field.Expr) ISlaughterProductDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slaughterProductDo) Where(conds ...gen.Condition) ISlaughterProductDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slaughterProductDo) Order(conds ...field.Expr) ISlaughterProductDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slaughterProductDo) Distinct(cols ...field.Expr) ISlaughterProductDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slaughterProductDo) Omit(cols ...field.Expr) ISlaughterProductDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slaughterProductDo) Join(table schema.Tabler, on ...field.Expr) ISlaughterProductDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slaughterProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterProductDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slaughterProductDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterProductDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slaughterProductDo) Group(cols ...field.Expr) ISlaughterProductDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slaughterProductDo) Having(conds ...gen.Condition) ISlaughterProductDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slaughterProductDo) Limit(limit int) ISlaughterProductDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slaughterProductDo) Offset(offset int) ISlaughterProductDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slaughterProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterProductDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slaughterProductDo) Unscoped() ISlaughterProductDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slaughterProductDo) Create(values ...*product.SlaughterProduct) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slaughterProductDo) CreateInBatches(values []*product.SlaughterProduct, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slaughterProductDo) Save(values ...*product.SlaughterProduct) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slaughterProductDo) First() (*product.SlaughterProduct, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*product.SlaughterProduct), nil
	}
}

func (s slaughterProductDo) Take() (*product.SlaughterProduct, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*product.SlaughterProduct), nil
	}
}

func (s slaughterProductDo) Last() (*product.SlaughterProduct, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*product.SlaughterProduct), nil
	}
}

func (s slaughterProductDo) Find() ([]*product.SlaughterProduct, error) {
	result, err := s.DO.Find()
	return result.([]*product.SlaughterProduct), err
}

func (s slaughterProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*product.SlaughterProduct, err error) {
	buf := make([]*product.SlaughterProduct, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slaughterProductDo) FindInBatches(result *[]*product.SlaughterProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slaughterProductDo) Attrs(attrs ...field.AssignExpr) ISlaughterProductDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slaughterProductDo) Assign(attrs ...field.AssignExpr) ISlaughterProductDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slaughterProductDo) Joins(fields ...field.RelationField) ISlaughterProductDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slaughterProductDo) Preload(fields ...field.RelationField) ISlaughterProductDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slaughterProductDo) FirstOrInit() (*product.SlaughterProduct, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*product.SlaughterProduct), nil
	}
}

func (s slaughterProductDo) FirstOrCreate() (*product.SlaughterProduct, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*product.SlaughterProduct), nil
	}
}

func (s slaughterProductDo) FindByPage(offset int, limit int) (result []*product.SlaughterProduct, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slaughterProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slaughterProductDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slaughterProductDo) Delete(models ...*product.SlaughterProduct) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slaughterProductDo) withDO(do gen.Dao) *slaughterProductDo {
	s.DO = *do.(*gen.DO)
	return s
}
