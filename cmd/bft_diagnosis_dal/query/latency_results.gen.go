// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"CN-EU-FSIMS/cmd/bft_diagnosis_dal/model"
)

func newLatencyResult(db *gorm.DB, opts ...gen.DOOption) latencyResult {
	_latencyResult := latencyResult{}

	_latencyResult.latencyResultDo.UseDB(db, opts...)
	_latencyResult.latencyResultDo.UseModel(&model.LatencyResult{})

	tableName := _latencyResult.latencyResultDo.TableName()
	_latencyResult.ALL = field.NewAsterisk(tableName)
	_latencyResult.ID = field.NewInt32(tableName, "id")
	_latencyResult.PeerID = field.NewString(tableName, "peer_id")
	_latencyResult.RequestCmd = field.NewString(tableName, "request_cmd")
	_latencyResult.RequestTimestamp = field.NewInt64(tableName, "request_timestamp")
	_latencyResult.Latency = field.NewInt32(tableName, "latency")

	_latencyResult.fillFieldMap()

	return _latencyResult
}

type latencyResult struct {
	latencyResultDo latencyResultDo

	ALL              field.Asterisk
	ID               field.Int32
	PeerID           field.String
	RequestCmd       field.String
	RequestTimestamp field.Int64
	Latency          field.Int32

	fieldMap map[string]field.Expr
}

func (l latencyResult) Table(newTableName string) *latencyResult {
	l.latencyResultDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l latencyResult) As(alias string) *latencyResult {
	l.latencyResultDo.DO = *(l.latencyResultDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *latencyResult) updateTableName(table string) *latencyResult {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.PeerID = field.NewString(table, "peer_id")
	l.RequestCmd = field.NewString(table, "request_cmd")
	l.RequestTimestamp = field.NewInt64(table, "request_timestamp")
	l.Latency = field.NewInt32(table, "latency")

	l.fillFieldMap()

	return l
}

func (l *latencyResult) WithContext(ctx context.Context) ILatencyResultDo {
	return l.latencyResultDo.WithContext(ctx)
}

func (l latencyResult) TableName() string { return l.latencyResultDo.TableName() }

func (l latencyResult) Alias() string { return l.latencyResultDo.Alias() }

func (l latencyResult) Columns(cols ...field.Expr) gen.Columns {
	return l.latencyResultDo.Columns(cols...)
}

func (l *latencyResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *latencyResult) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 5)
	l.fieldMap["id"] = l.ID
	l.fieldMap["peer_id"] = l.PeerID
	l.fieldMap["request_cmd"] = l.RequestCmd
	l.fieldMap["request_timestamp"] = l.RequestTimestamp
	l.fieldMap["latency"] = l.Latency
}

func (l latencyResult) clone(db *gorm.DB) latencyResult {
	l.latencyResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l latencyResult) replaceDB(db *gorm.DB) latencyResult {
	l.latencyResultDo.ReplaceDB(db)
	return l
}

type latencyResultDo struct{ gen.DO }

type ILatencyResultDo interface {
	gen.SubQuery
	Debug() ILatencyResultDo
	WithContext(ctx context.Context) ILatencyResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILatencyResultDo
	WriteDB() ILatencyResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILatencyResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILatencyResultDo
	Not(conds ...gen.Condition) ILatencyResultDo
	Or(conds ...gen.Condition) ILatencyResultDo
	Select(conds ...field.Expr) ILatencyResultDo
	Where(conds ...gen.Condition) ILatencyResultDo
	Order(conds ...field.Expr) ILatencyResultDo
	Distinct(cols ...field.Expr) ILatencyResultDo
	Omit(cols ...field.Expr) ILatencyResultDo
	Join(table schema.Tabler, on ...field.Expr) ILatencyResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILatencyResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILatencyResultDo
	Group(cols ...field.Expr) ILatencyResultDo
	Having(conds ...gen.Condition) ILatencyResultDo
	Limit(limit int) ILatencyResultDo
	Offset(offset int) ILatencyResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILatencyResultDo
	Unscoped() ILatencyResultDo
	Create(values ...*model.LatencyResult) error
	CreateInBatches(values []*model.LatencyResult, batchSize int) error
	Save(values ...*model.LatencyResult) error
	First() (*model.LatencyResult, error)
	Take() (*model.LatencyResult, error)
	Last() (*model.LatencyResult, error)
	Find() ([]*model.LatencyResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LatencyResult, err error)
	FindInBatches(result *[]*model.LatencyResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LatencyResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILatencyResultDo
	Assign(attrs ...field.AssignExpr) ILatencyResultDo
	Joins(fields ...field.RelationField) ILatencyResultDo
	Preload(fields ...field.RelationField) ILatencyResultDo
	FirstOrInit() (*model.LatencyResult, error)
	FirstOrCreate() (*model.LatencyResult, error)
	FindByPage(offset int, limit int) (result []*model.LatencyResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILatencyResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l latencyResultDo) Debug() ILatencyResultDo {
	return l.withDO(l.DO.Debug())
}

func (l latencyResultDo) WithContext(ctx context.Context) ILatencyResultDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l latencyResultDo) ReadDB() ILatencyResultDo {
	return l.Clauses(dbresolver.Read)
}

func (l latencyResultDo) WriteDB() ILatencyResultDo {
	return l.Clauses(dbresolver.Write)
}

func (l latencyResultDo) Session(config *gorm.Session) ILatencyResultDo {
	return l.withDO(l.DO.Session(config))
}

func (l latencyResultDo) Clauses(conds ...clause.Expression) ILatencyResultDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l latencyResultDo) Returning(value interface{}, columns ...string) ILatencyResultDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l latencyResultDo) Not(conds ...gen.Condition) ILatencyResultDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l latencyResultDo) Or(conds ...gen.Condition) ILatencyResultDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l latencyResultDo) Select(conds ...field.Expr) ILatencyResultDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l latencyResultDo) Where(conds ...gen.Condition) ILatencyResultDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l latencyResultDo) Order(conds ...field.Expr) ILatencyResultDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l latencyResultDo) Distinct(cols ...field.Expr) ILatencyResultDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l latencyResultDo) Omit(cols ...field.Expr) ILatencyResultDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l latencyResultDo) Join(table schema.Tabler, on ...field.Expr) ILatencyResultDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l latencyResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILatencyResultDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l latencyResultDo) RightJoin(table schema.Tabler, on ...field.Expr) ILatencyResultDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l latencyResultDo) Group(cols ...field.Expr) ILatencyResultDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l latencyResultDo) Having(conds ...gen.Condition) ILatencyResultDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l latencyResultDo) Limit(limit int) ILatencyResultDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l latencyResultDo) Offset(offset int) ILatencyResultDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l latencyResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILatencyResultDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l latencyResultDo) Unscoped() ILatencyResultDo {
	return l.withDO(l.DO.Unscoped())
}

func (l latencyResultDo) Create(values ...*model.LatencyResult) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l latencyResultDo) CreateInBatches(values []*model.LatencyResult, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l latencyResultDo) Save(values ...*model.LatencyResult) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l latencyResultDo) First() (*model.LatencyResult, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LatencyResult), nil
	}
}

func (l latencyResultDo) Take() (*model.LatencyResult, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LatencyResult), nil
	}
}

func (l latencyResultDo) Last() (*model.LatencyResult, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LatencyResult), nil
	}
}

func (l latencyResultDo) Find() ([]*model.LatencyResult, error) {
	result, err := l.DO.Find()
	return result.([]*model.LatencyResult), err
}

func (l latencyResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LatencyResult, err error) {
	buf := make([]*model.LatencyResult, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l latencyResultDo) FindInBatches(result *[]*model.LatencyResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l latencyResultDo) Attrs(attrs ...field.AssignExpr) ILatencyResultDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l latencyResultDo) Assign(attrs ...field.AssignExpr) ILatencyResultDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l latencyResultDo) Joins(fields ...field.RelationField) ILatencyResultDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l latencyResultDo) Preload(fields ...field.RelationField) ILatencyResultDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l latencyResultDo) FirstOrInit() (*model.LatencyResult, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LatencyResult), nil
	}
}

func (l latencyResultDo) FirstOrCreate() (*model.LatencyResult, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LatencyResult), nil
	}
}

func (l latencyResultDo) FindByPage(offset int, limit int) (result []*model.LatencyResult, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l latencyResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l latencyResultDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l latencyResultDo) Delete(models ...*model.LatencyResult) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *latencyResultDo) withDO(do gen.Dao) *latencyResultDo {
	l.DO = *do.(*gen.DO)
	return l
}
