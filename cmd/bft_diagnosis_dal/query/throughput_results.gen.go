// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"CN-EU-FSIMS/cmd/bft_diagnosis_dal/model"
)

func newThroughputResult(db *gorm.DB, opts ...gen.DOOption) throughputResult {
	_throughputResult := throughputResult{}

	_throughputResult.throughputResultDo.UseDB(db, opts...)
	_throughputResult.throughputResultDo.UseModel(&model.ThroughputResult{})

	tableName := _throughputResult.throughputResultDo.TableName()
	_throughputResult.ALL = field.NewAsterisk(tableName)
	_throughputResult.ID = field.NewInt32(tableName, "id")
	_throughputResult.Round = field.NewInt32(tableName, "round")
	_throughputResult.PeerID = field.NewString(tableName, "peer_id")
	_throughputResult.Throughput = field.NewInt32(tableName, "throughput")

	_throughputResult.fillFieldMap()

	return _throughputResult
}

type throughputResult struct {
	throughputResultDo throughputResultDo

	ALL        field.Asterisk
	ID         field.Int32
	Round      field.Int32
	PeerID     field.String
	Throughput field.Int32

	fieldMap map[string]field.Expr
}

func (t throughputResult) Table(newTableName string) *throughputResult {
	t.throughputResultDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t throughputResult) As(alias string) *throughputResult {
	t.throughputResultDo.DO = *(t.throughputResultDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *throughputResult) updateTableName(table string) *throughputResult {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Round = field.NewInt32(table, "round")
	t.PeerID = field.NewString(table, "peer_id")
	t.Throughput = field.NewInt32(table, "throughput")

	t.fillFieldMap()

	return t
}

func (t *throughputResult) WithContext(ctx context.Context) IThroughputResultDo {
	return t.throughputResultDo.WithContext(ctx)
}

func (t throughputResult) TableName() string { return t.throughputResultDo.TableName() }

func (t throughputResult) Alias() string { return t.throughputResultDo.Alias() }

func (t throughputResult) Columns(cols ...field.Expr) gen.Columns {
	return t.throughputResultDo.Columns(cols...)
}

func (t *throughputResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *throughputResult) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["id"] = t.ID
	t.fieldMap["round"] = t.Round
	t.fieldMap["peer_id"] = t.PeerID
	t.fieldMap["throughput"] = t.Throughput
}

func (t throughputResult) clone(db *gorm.DB) throughputResult {
	t.throughputResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t throughputResult) replaceDB(db *gorm.DB) throughputResult {
	t.throughputResultDo.ReplaceDB(db)
	return t
}

type throughputResultDo struct{ gen.DO }

type IThroughputResultDo interface {
	gen.SubQuery
	Debug() IThroughputResultDo
	WithContext(ctx context.Context) IThroughputResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IThroughputResultDo
	WriteDB() IThroughputResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IThroughputResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IThroughputResultDo
	Not(conds ...gen.Condition) IThroughputResultDo
	Or(conds ...gen.Condition) IThroughputResultDo
	Select(conds ...field.Expr) IThroughputResultDo
	Where(conds ...gen.Condition) IThroughputResultDo
	Order(conds ...field.Expr) IThroughputResultDo
	Distinct(cols ...field.Expr) IThroughputResultDo
	Omit(cols ...field.Expr) IThroughputResultDo
	Join(table schema.Tabler, on ...field.Expr) IThroughputResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IThroughputResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) IThroughputResultDo
	Group(cols ...field.Expr) IThroughputResultDo
	Having(conds ...gen.Condition) IThroughputResultDo
	Limit(limit int) IThroughputResultDo
	Offset(offset int) IThroughputResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IThroughputResultDo
	Unscoped() IThroughputResultDo
	Create(values ...*model.ThroughputResult) error
	CreateInBatches(values []*model.ThroughputResult, batchSize int) error
	Save(values ...*model.ThroughputResult) error
	First() (*model.ThroughputResult, error)
	Take() (*model.ThroughputResult, error)
	Last() (*model.ThroughputResult, error)
	Find() ([]*model.ThroughputResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThroughputResult, err error)
	FindInBatches(result *[]*model.ThroughputResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ThroughputResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IThroughputResultDo
	Assign(attrs ...field.AssignExpr) IThroughputResultDo
	Joins(fields ...field.RelationField) IThroughputResultDo
	Preload(fields ...field.RelationField) IThroughputResultDo
	FirstOrInit() (*model.ThroughputResult, error)
	FirstOrCreate() (*model.ThroughputResult, error)
	FindByPage(offset int, limit int) (result []*model.ThroughputResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IThroughputResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t throughputResultDo) Debug() IThroughputResultDo {
	return t.withDO(t.DO.Debug())
}

func (t throughputResultDo) WithContext(ctx context.Context) IThroughputResultDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t throughputResultDo) ReadDB() IThroughputResultDo {
	return t.Clauses(dbresolver.Read)
}

func (t throughputResultDo) WriteDB() IThroughputResultDo {
	return t.Clauses(dbresolver.Write)
}

func (t throughputResultDo) Session(config *gorm.Session) IThroughputResultDo {
	return t.withDO(t.DO.Session(config))
}

func (t throughputResultDo) Clauses(conds ...clause.Expression) IThroughputResultDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t throughputResultDo) Returning(value interface{}, columns ...string) IThroughputResultDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t throughputResultDo) Not(conds ...gen.Condition) IThroughputResultDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t throughputResultDo) Or(conds ...gen.Condition) IThroughputResultDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t throughputResultDo) Select(conds ...field.Expr) IThroughputResultDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t throughputResultDo) Where(conds ...gen.Condition) IThroughputResultDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t throughputResultDo) Order(conds ...field.Expr) IThroughputResultDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t throughputResultDo) Distinct(cols ...field.Expr) IThroughputResultDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t throughputResultDo) Omit(cols ...field.Expr) IThroughputResultDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t throughputResultDo) Join(table schema.Tabler, on ...field.Expr) IThroughputResultDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t throughputResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) IThroughputResultDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t throughputResultDo) RightJoin(table schema.Tabler, on ...field.Expr) IThroughputResultDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t throughputResultDo) Group(cols ...field.Expr) IThroughputResultDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t throughputResultDo) Having(conds ...gen.Condition) IThroughputResultDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t throughputResultDo) Limit(limit int) IThroughputResultDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t throughputResultDo) Offset(offset int) IThroughputResultDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t throughputResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IThroughputResultDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t throughputResultDo) Unscoped() IThroughputResultDo {
	return t.withDO(t.DO.Unscoped())
}

func (t throughputResultDo) Create(values ...*model.ThroughputResult) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t throughputResultDo) CreateInBatches(values []*model.ThroughputResult, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t throughputResultDo) Save(values ...*model.ThroughputResult) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t throughputResultDo) First() (*model.ThroughputResult, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThroughputResult), nil
	}
}

func (t throughputResultDo) Take() (*model.ThroughputResult, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThroughputResult), nil
	}
}

func (t throughputResultDo) Last() (*model.ThroughputResult, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThroughputResult), nil
	}
}

func (t throughputResultDo) Find() ([]*model.ThroughputResult, error) {
	result, err := t.DO.Find()
	return result.([]*model.ThroughputResult), err
}

func (t throughputResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ThroughputResult, err error) {
	buf := make([]*model.ThroughputResult, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t throughputResultDo) FindInBatches(result *[]*model.ThroughputResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t throughputResultDo) Attrs(attrs ...field.AssignExpr) IThroughputResultDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t throughputResultDo) Assign(attrs ...field.AssignExpr) IThroughputResultDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t throughputResultDo) Joins(fields ...field.RelationField) IThroughputResultDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t throughputResultDo) Preload(fields ...field.RelationField) IThroughputResultDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t throughputResultDo) FirstOrInit() (*model.ThroughputResult, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThroughputResult), nil
	}
}

func (t throughputResultDo) FirstOrCreate() (*model.ThroughputResult, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ThroughputResult), nil
	}
}

func (t throughputResultDo) FindByPage(offset int, limit int) (result []*model.ThroughputResult, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t throughputResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t throughputResultDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t throughputResultDo) Delete(models ...*model.ThroughputResult) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *throughputResultDo) withDO(do gen.Dao) *throughputResultDo {
	t.DO = *do.(*gen.DO)
	return t
}
