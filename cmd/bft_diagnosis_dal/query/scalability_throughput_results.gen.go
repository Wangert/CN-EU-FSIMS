// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"CN-EU-FSIMS/cmd/bft_diagnosis_dal/model"
)

func newScalabilityThroughputResult(db *gorm.DB, opts ...gen.DOOption) scalabilityThroughputResult {
	_scalabilityThroughputResult := scalabilityThroughputResult{}

	_scalabilityThroughputResult.scalabilityThroughputResultDo.UseDB(db, opts...)
	_scalabilityThroughputResult.scalabilityThroughputResultDo.UseModel(&model.ScalabilityThroughputResult{})

	tableName := _scalabilityThroughputResult.scalabilityThroughputResultDo.TableName()
	_scalabilityThroughputResult.ALL = field.NewAsterisk(tableName)
	_scalabilityThroughputResult.ID = field.NewInt32(tableName, "id")
	_scalabilityThroughputResult.Item = field.NewString(tableName, "item")
	_scalabilityThroughputResult.Round = field.NewInt32(tableName, "round")
	_scalabilityThroughputResult.PeerID = field.NewString(tableName, "peer_id")
	_scalabilityThroughputResult.Throughput = field.NewInt32(tableName, "throughput")

	_scalabilityThroughputResult.fillFieldMap()

	return _scalabilityThroughputResult
}

type scalabilityThroughputResult struct {
	scalabilityThroughputResultDo scalabilityThroughputResultDo

	ALL        field.Asterisk
	ID         field.Int32
	Item       field.String
	Round      field.Int32
	PeerID     field.String
	Throughput field.Int32

	fieldMap map[string]field.Expr
}

func (s scalabilityThroughputResult) Table(newTableName string) *scalabilityThroughputResult {
	s.scalabilityThroughputResultDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scalabilityThroughputResult) As(alias string) *scalabilityThroughputResult {
	s.scalabilityThroughputResultDo.DO = *(s.scalabilityThroughputResultDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scalabilityThroughputResult) updateTableName(table string) *scalabilityThroughputResult {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Item = field.NewString(table, "item")
	s.Round = field.NewInt32(table, "round")
	s.PeerID = field.NewString(table, "peer_id")
	s.Throughput = field.NewInt32(table, "throughput")

	s.fillFieldMap()

	return s
}

func (s *scalabilityThroughputResult) WithContext(ctx context.Context) IScalabilityThroughputResultDo {
	return s.scalabilityThroughputResultDo.WithContext(ctx)
}

func (s scalabilityThroughputResult) TableName() string {
	return s.scalabilityThroughputResultDo.TableName()
}

func (s scalabilityThroughputResult) Alias() string { return s.scalabilityThroughputResultDo.Alias() }

func (s scalabilityThroughputResult) Columns(cols ...field.Expr) gen.Columns {
	return s.scalabilityThroughputResultDo.Columns(cols...)
}

func (s *scalabilityThroughputResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scalabilityThroughputResult) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["item"] = s.Item
	s.fieldMap["round"] = s.Round
	s.fieldMap["peer_id"] = s.PeerID
	s.fieldMap["throughput"] = s.Throughput
}

func (s scalabilityThroughputResult) clone(db *gorm.DB) scalabilityThroughputResult {
	s.scalabilityThroughputResultDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scalabilityThroughputResult) replaceDB(db *gorm.DB) scalabilityThroughputResult {
	s.scalabilityThroughputResultDo.ReplaceDB(db)
	return s
}

type scalabilityThroughputResultDo struct{ gen.DO }

type IScalabilityThroughputResultDo interface {
	gen.SubQuery
	Debug() IScalabilityThroughputResultDo
	WithContext(ctx context.Context) IScalabilityThroughputResultDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScalabilityThroughputResultDo
	WriteDB() IScalabilityThroughputResultDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScalabilityThroughputResultDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScalabilityThroughputResultDo
	Not(conds ...gen.Condition) IScalabilityThroughputResultDo
	Or(conds ...gen.Condition) IScalabilityThroughputResultDo
	Select(conds ...field.Expr) IScalabilityThroughputResultDo
	Where(conds ...gen.Condition) IScalabilityThroughputResultDo
	Order(conds ...field.Expr) IScalabilityThroughputResultDo
	Distinct(cols ...field.Expr) IScalabilityThroughputResultDo
	Omit(cols ...field.Expr) IScalabilityThroughputResultDo
	Join(table schema.Tabler, on ...field.Expr) IScalabilityThroughputResultDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScalabilityThroughputResultDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScalabilityThroughputResultDo
	Group(cols ...field.Expr) IScalabilityThroughputResultDo
	Having(conds ...gen.Condition) IScalabilityThroughputResultDo
	Limit(limit int) IScalabilityThroughputResultDo
	Offset(offset int) IScalabilityThroughputResultDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScalabilityThroughputResultDo
	Unscoped() IScalabilityThroughputResultDo
	Create(values ...*model.ScalabilityThroughputResult) error
	CreateInBatches(values []*model.ScalabilityThroughputResult, batchSize int) error
	Save(values ...*model.ScalabilityThroughputResult) error
	First() (*model.ScalabilityThroughputResult, error)
	Take() (*model.ScalabilityThroughputResult, error)
	Last() (*model.ScalabilityThroughputResult, error)
	Find() ([]*model.ScalabilityThroughputResult, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScalabilityThroughputResult, err error)
	FindInBatches(result *[]*model.ScalabilityThroughputResult, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScalabilityThroughputResult) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScalabilityThroughputResultDo
	Assign(attrs ...field.AssignExpr) IScalabilityThroughputResultDo
	Joins(fields ...field.RelationField) IScalabilityThroughputResultDo
	Preload(fields ...field.RelationField) IScalabilityThroughputResultDo
	FirstOrInit() (*model.ScalabilityThroughputResult, error)
	FirstOrCreate() (*model.ScalabilityThroughputResult, error)
	FindByPage(offset int, limit int) (result []*model.ScalabilityThroughputResult, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScalabilityThroughputResultDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scalabilityThroughputResultDo) Debug() IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Debug())
}

func (s scalabilityThroughputResultDo) WithContext(ctx context.Context) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scalabilityThroughputResultDo) ReadDB() IScalabilityThroughputResultDo {
	return s.Clauses(dbresolver.Read)
}

func (s scalabilityThroughputResultDo) WriteDB() IScalabilityThroughputResultDo {
	return s.Clauses(dbresolver.Write)
}

func (s scalabilityThroughputResultDo) Session(config *gorm.Session) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Session(config))
}

func (s scalabilityThroughputResultDo) Clauses(conds ...clause.Expression) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scalabilityThroughputResultDo) Returning(value interface{}, columns ...string) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scalabilityThroughputResultDo) Not(conds ...gen.Condition) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scalabilityThroughputResultDo) Or(conds ...gen.Condition) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scalabilityThroughputResultDo) Select(conds ...field.Expr) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scalabilityThroughputResultDo) Where(conds ...gen.Condition) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scalabilityThroughputResultDo) Order(conds ...field.Expr) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scalabilityThroughputResultDo) Distinct(cols ...field.Expr) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scalabilityThroughputResultDo) Omit(cols ...field.Expr) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scalabilityThroughputResultDo) Join(table schema.Tabler, on ...field.Expr) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scalabilityThroughputResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scalabilityThroughputResultDo) RightJoin(table schema.Tabler, on ...field.Expr) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scalabilityThroughputResultDo) Group(cols ...field.Expr) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scalabilityThroughputResultDo) Having(conds ...gen.Condition) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scalabilityThroughputResultDo) Limit(limit int) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scalabilityThroughputResultDo) Offset(offset int) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scalabilityThroughputResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scalabilityThroughputResultDo) Unscoped() IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scalabilityThroughputResultDo) Create(values ...*model.ScalabilityThroughputResult) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scalabilityThroughputResultDo) CreateInBatches(values []*model.ScalabilityThroughputResult, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scalabilityThroughputResultDo) Save(values ...*model.ScalabilityThroughputResult) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scalabilityThroughputResultDo) First() (*model.ScalabilityThroughputResult, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScalabilityThroughputResult), nil
	}
}

func (s scalabilityThroughputResultDo) Take() (*model.ScalabilityThroughputResult, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScalabilityThroughputResult), nil
	}
}

func (s scalabilityThroughputResultDo) Last() (*model.ScalabilityThroughputResult, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScalabilityThroughputResult), nil
	}
}

func (s scalabilityThroughputResultDo) Find() ([]*model.ScalabilityThroughputResult, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScalabilityThroughputResult), err
}

func (s scalabilityThroughputResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScalabilityThroughputResult, err error) {
	buf := make([]*model.ScalabilityThroughputResult, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scalabilityThroughputResultDo) FindInBatches(result *[]*model.ScalabilityThroughputResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scalabilityThroughputResultDo) Attrs(attrs ...field.AssignExpr) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scalabilityThroughputResultDo) Assign(attrs ...field.AssignExpr) IScalabilityThroughputResultDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scalabilityThroughputResultDo) Joins(fields ...field.RelationField) IScalabilityThroughputResultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scalabilityThroughputResultDo) Preload(fields ...field.RelationField) IScalabilityThroughputResultDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scalabilityThroughputResultDo) FirstOrInit() (*model.ScalabilityThroughputResult, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScalabilityThroughputResult), nil
	}
}

func (s scalabilityThroughputResultDo) FirstOrCreate() (*model.ScalabilityThroughputResult, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScalabilityThroughputResult), nil
	}
}

func (s scalabilityThroughputResultDo) FindByPage(offset int, limit int) (result []*model.ScalabilityThroughputResult, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scalabilityThroughputResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scalabilityThroughputResultDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scalabilityThroughputResultDo) Delete(models ...*model.ScalabilityThroughputResult) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scalabilityThroughputResultDo) withDO(do gen.Dao) *scalabilityThroughputResultDo {
	s.DO = *do.(*gen.DO)
	return s
}
