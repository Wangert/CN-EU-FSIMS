// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/warehouse"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPackReceive(db *gorm.DB, opts ...gen.DOOption) packReceive {
	_packReceive := packReceive{}

	_packReceive.packReceiveDo.UseDB(db, opts...)
	_packReceive.packReceiveDo.UseModel(&warehouse.PackReceive{})

	tableName := _packReceive.packReceiveDo.TableName()
	_packReceive.ALL = field.NewAsterisk(tableName)
	_packReceive.ID = field.NewUint(tableName, "id")
	_packReceive.CreatedAt = field.NewTime(tableName, "created_at")
	_packReceive.UpdatedAt = field.NewTime(tableName, "updated_at")
	_packReceive.DeletedAt = field.NewField(tableName, "deleted_at")
	_packReceive.ProductNumber = field.NewString(tableName, "product_number")
	_packReceive.ProductPID = field.NewString(tableName, "product_p_id")
	_packReceive.ProductType = field.NewString(tableName, "product_type")
	_packReceive.Operator = field.NewString(tableName, "operator")
	_packReceive.ReceiveTimestamp = field.NewTime(tableName, "receive_timestamp")

	_packReceive.fillFieldMap()

	return _packReceive
}

type packReceive struct {
	packReceiveDo packReceiveDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	ProductNumber    field.String
	ProductPID       field.String
	ProductType      field.String
	Operator         field.String
	ReceiveTimestamp field.Time

	fieldMap map[string]field.Expr
}

func (p packReceive) Table(newTableName string) *packReceive {
	p.packReceiveDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p packReceive) As(alias string) *packReceive {
	p.packReceiveDo.DO = *(p.packReceiveDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *packReceive) updateTableName(table string) *packReceive {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ProductNumber = field.NewString(table, "product_number")
	p.ProductPID = field.NewString(table, "product_p_id")
	p.ProductType = field.NewString(table, "product_type")
	p.Operator = field.NewString(table, "operator")
	p.ReceiveTimestamp = field.NewTime(table, "receive_timestamp")

	p.fillFieldMap()

	return p
}

func (p *packReceive) WithContext(ctx context.Context) IPackReceiveDo {
	return p.packReceiveDo.WithContext(ctx)
}

func (p packReceive) TableName() string { return p.packReceiveDo.TableName() }

func (p packReceive) Alias() string { return p.packReceiveDo.Alias() }

func (p packReceive) Columns(cols ...field.Expr) gen.Columns { return p.packReceiveDo.Columns(cols...) }

func (p *packReceive) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *packReceive) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["product_number"] = p.ProductNumber
	p.fieldMap["product_p_id"] = p.ProductPID
	p.fieldMap["product_type"] = p.ProductType
	p.fieldMap["operator"] = p.Operator
	p.fieldMap["receive_timestamp"] = p.ReceiveTimestamp
}

func (p packReceive) clone(db *gorm.DB) packReceive {
	p.packReceiveDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p packReceive) replaceDB(db *gorm.DB) packReceive {
	p.packReceiveDo.ReplaceDB(db)
	return p
}

type packReceiveDo struct{ gen.DO }

type IPackReceiveDo interface {
	gen.SubQuery
	Debug() IPackReceiveDo
	WithContext(ctx context.Context) IPackReceiveDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPackReceiveDo
	WriteDB() IPackReceiveDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPackReceiveDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPackReceiveDo
	Not(conds ...gen.Condition) IPackReceiveDo
	Or(conds ...gen.Condition) IPackReceiveDo
	Select(conds ...field.Expr) IPackReceiveDo
	Where(conds ...gen.Condition) IPackReceiveDo
	Order(conds ...field.Expr) IPackReceiveDo
	Distinct(cols ...field.Expr) IPackReceiveDo
	Omit(cols ...field.Expr) IPackReceiveDo
	Join(table schema.Tabler, on ...field.Expr) IPackReceiveDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPackReceiveDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPackReceiveDo
	Group(cols ...field.Expr) IPackReceiveDo
	Having(conds ...gen.Condition) IPackReceiveDo
	Limit(limit int) IPackReceiveDo
	Offset(offset int) IPackReceiveDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPackReceiveDo
	Unscoped() IPackReceiveDo
	Create(values ...*warehouse.PackReceive) error
	CreateInBatches(values []*warehouse.PackReceive, batchSize int) error
	Save(values ...*warehouse.PackReceive) error
	First() (*warehouse.PackReceive, error)
	Take() (*warehouse.PackReceive, error)
	Last() (*warehouse.PackReceive, error)
	Find() ([]*warehouse.PackReceive, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.PackReceive, err error)
	FindInBatches(result *[]*warehouse.PackReceive, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*warehouse.PackReceive) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPackReceiveDo
	Assign(attrs ...field.AssignExpr) IPackReceiveDo
	Joins(fields ...field.RelationField) IPackReceiveDo
	Preload(fields ...field.RelationField) IPackReceiveDo
	FirstOrInit() (*warehouse.PackReceive, error)
	FirstOrCreate() (*warehouse.PackReceive, error)
	FindByPage(offset int, limit int) (result []*warehouse.PackReceive, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPackReceiveDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p packReceiveDo) Debug() IPackReceiveDo {
	return p.withDO(p.DO.Debug())
}

func (p packReceiveDo) WithContext(ctx context.Context) IPackReceiveDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p packReceiveDo) ReadDB() IPackReceiveDo {
	return p.Clauses(dbresolver.Read)
}

func (p packReceiveDo) WriteDB() IPackReceiveDo {
	return p.Clauses(dbresolver.Write)
}

func (p packReceiveDo) Session(config *gorm.Session) IPackReceiveDo {
	return p.withDO(p.DO.Session(config))
}

func (p packReceiveDo) Clauses(conds ...clause.Expression) IPackReceiveDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p packReceiveDo) Returning(value interface{}, columns ...string) IPackReceiveDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p packReceiveDo) Not(conds ...gen.Condition) IPackReceiveDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p packReceiveDo) Or(conds ...gen.Condition) IPackReceiveDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p packReceiveDo) Select(conds ...field.Expr) IPackReceiveDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p packReceiveDo) Where(conds ...gen.Condition) IPackReceiveDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p packReceiveDo) Order(conds ...field.Expr) IPackReceiveDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p packReceiveDo) Distinct(cols ...field.Expr) IPackReceiveDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p packReceiveDo) Omit(cols ...field.Expr) IPackReceiveDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p packReceiveDo) Join(table schema.Tabler, on ...field.Expr) IPackReceiveDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p packReceiveDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPackReceiveDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p packReceiveDo) RightJoin(table schema.Tabler, on ...field.Expr) IPackReceiveDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p packReceiveDo) Group(cols ...field.Expr) IPackReceiveDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p packReceiveDo) Having(conds ...gen.Condition) IPackReceiveDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p packReceiveDo) Limit(limit int) IPackReceiveDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p packReceiveDo) Offset(offset int) IPackReceiveDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p packReceiveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPackReceiveDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p packReceiveDo) Unscoped() IPackReceiveDo {
	return p.withDO(p.DO.Unscoped())
}

func (p packReceiveDo) Create(values ...*warehouse.PackReceive) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p packReceiveDo) CreateInBatches(values []*warehouse.PackReceive, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p packReceiveDo) Save(values ...*warehouse.PackReceive) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p packReceiveDo) First() (*warehouse.PackReceive, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PackReceive), nil
	}
}

func (p packReceiveDo) Take() (*warehouse.PackReceive, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PackReceive), nil
	}
}

func (p packReceiveDo) Last() (*warehouse.PackReceive, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PackReceive), nil
	}
}

func (p packReceiveDo) Find() ([]*warehouse.PackReceive, error) {
	result, err := p.DO.Find()
	return result.([]*warehouse.PackReceive), err
}

func (p packReceiveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.PackReceive, err error) {
	buf := make([]*warehouse.PackReceive, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p packReceiveDo) FindInBatches(result *[]*warehouse.PackReceive, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p packReceiveDo) Attrs(attrs ...field.AssignExpr) IPackReceiveDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p packReceiveDo) Assign(attrs ...field.AssignExpr) IPackReceiveDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p packReceiveDo) Joins(fields ...field.RelationField) IPackReceiveDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p packReceiveDo) Preload(fields ...field.RelationField) IPackReceiveDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p packReceiveDo) FirstOrInit() (*warehouse.PackReceive, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PackReceive), nil
	}
}

func (p packReceiveDo) FirstOrCreate() (*warehouse.PackReceive, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.PackReceive), nil
	}
}

func (p packReceiveDo) FindByPage(offset int, limit int) (result []*warehouse.PackReceive, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p packReceiveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p packReceiveDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p packReceiveDo) Delete(models ...*warehouse.PackReceive) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *packReceiveDo) withDO(do gen.Dao) *packReceiveDo {
	p.DO = *do.(*gen.DO)
	return p
}
