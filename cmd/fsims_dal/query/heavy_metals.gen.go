// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newHeavyMetal(db *gorm.DB, opts ...gen.DOOption) heavyMetal {
	_heavyMetal := heavyMetal{}

	_heavyMetal.heavyMetalDo.UseDB(db, opts...)
	_heavyMetal.heavyMetalDo.UseModel(&pasture.HeavyMetal{})

	tableName := _heavyMetal.heavyMetalDo.TableName()
	_heavyMetal.ALL = field.NewAsterisk(tableName)
	_heavyMetal.ID = field.NewUint(tableName, "id")
	_heavyMetal.CreatedAt = field.NewTime(tableName, "created_at")
	_heavyMetal.UpdatedAt = field.NewTime(tableName, "updated_at")
	_heavyMetal.DeletedAt = field.NewField(tableName, "deleted_at")
	_heavyMetal.TimeRecordAt = field.NewTime(tableName, "time_record_at")
	_heavyMetal.HouseNumber = field.NewString(tableName, "house_number")
	_heavyMetal.Ass = heavyMetalHasOneAss{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Ass", "pasture.As"),
	}

	_heavyMetal.Pb = heavyMetalHasOnePb{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Pb", "pasture.Pb"),
	}

	_heavyMetal.Cd = heavyMetalHasOneCd{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Cd", "pasture.Cd"),
	}

	_heavyMetal.Cr = heavyMetalHasOneCr{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Cr", "pasture.Cr"),
	}

	_heavyMetal.fillFieldMap()

	return _heavyMetal
}

type heavyMetal struct {
	heavyMetalDo heavyMetalDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	TimeRecordAt field.Time
	HouseNumber  field.String
	Ass          heavyMetalHasOneAss

	Pb heavyMetalHasOnePb

	Cd heavyMetalHasOneCd

	Cr heavyMetalHasOneCr

	fieldMap map[string]field.Expr
}

func (h heavyMetal) Table(newTableName string) *heavyMetal {
	h.heavyMetalDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h heavyMetal) As(alias string) *heavyMetal {
	h.heavyMetalDo.DO = *(h.heavyMetalDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *heavyMetal) updateTableName(table string) *heavyMetal {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewUint(table, "id")
	h.CreatedAt = field.NewTime(table, "created_at")
	h.UpdatedAt = field.NewTime(table, "updated_at")
	h.DeletedAt = field.NewField(table, "deleted_at")
	h.TimeRecordAt = field.NewTime(table, "time_record_at")
	h.HouseNumber = field.NewString(table, "house_number")

	h.fillFieldMap()

	return h
}

func (h *heavyMetal) WithContext(ctx context.Context) IHeavyMetalDo {
	return h.heavyMetalDo.WithContext(ctx)
}

func (h heavyMetal) TableName() string { return h.heavyMetalDo.TableName() }

func (h heavyMetal) Alias() string { return h.heavyMetalDo.Alias() }

func (h heavyMetal) Columns(cols ...field.Expr) gen.Columns { return h.heavyMetalDo.Columns(cols...) }

func (h *heavyMetal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *heavyMetal) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 10)
	h.fieldMap["id"] = h.ID
	h.fieldMap["created_at"] = h.CreatedAt
	h.fieldMap["updated_at"] = h.UpdatedAt
	h.fieldMap["deleted_at"] = h.DeletedAt
	h.fieldMap["time_record_at"] = h.TimeRecordAt
	h.fieldMap["house_number"] = h.HouseNumber

}

func (h heavyMetal) clone(db *gorm.DB) heavyMetal {
	h.heavyMetalDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h heavyMetal) replaceDB(db *gorm.DB) heavyMetal {
	h.heavyMetalDo.ReplaceDB(db)
	return h
}

type heavyMetalHasOneAss struct {
	db *gorm.DB

	field.RelationField
}

func (a heavyMetalHasOneAss) Where(conds ...field.Expr) *heavyMetalHasOneAss {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a heavyMetalHasOneAss) WithContext(ctx context.Context) *heavyMetalHasOneAss {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a heavyMetalHasOneAss) Session(session *gorm.Session) *heavyMetalHasOneAss {
	a.db = a.db.Session(session)
	return &a
}

func (a heavyMetalHasOneAss) Model(m *pasture.HeavyMetal) *heavyMetalHasOneAssTx {
	return &heavyMetalHasOneAssTx{a.db.Model(m).Association(a.Name())}
}

type heavyMetalHasOneAssTx struct{ tx *gorm.Association }

func (a heavyMetalHasOneAssTx) Find() (result *pasture.As, err error) {
	return result, a.tx.Find(&result)
}

func (a heavyMetalHasOneAssTx) Append(values ...*pasture.As) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a heavyMetalHasOneAssTx) Replace(values ...*pasture.As) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a heavyMetalHasOneAssTx) Delete(values ...*pasture.As) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a heavyMetalHasOneAssTx) Clear() error {
	return a.tx.Clear()
}

func (a heavyMetalHasOneAssTx) Count() int64 {
	return a.tx.Count()
}

type heavyMetalHasOnePb struct {
	db *gorm.DB

	field.RelationField
}

func (a heavyMetalHasOnePb) Where(conds ...field.Expr) *heavyMetalHasOnePb {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a heavyMetalHasOnePb) WithContext(ctx context.Context) *heavyMetalHasOnePb {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a heavyMetalHasOnePb) Session(session *gorm.Session) *heavyMetalHasOnePb {
	a.db = a.db.Session(session)
	return &a
}

func (a heavyMetalHasOnePb) Model(m *pasture.HeavyMetal) *heavyMetalHasOnePbTx {
	return &heavyMetalHasOnePbTx{a.db.Model(m).Association(a.Name())}
}

type heavyMetalHasOnePbTx struct{ tx *gorm.Association }

func (a heavyMetalHasOnePbTx) Find() (result *pasture.Pb, err error) {
	return result, a.tx.Find(&result)
}

func (a heavyMetalHasOnePbTx) Append(values ...*pasture.Pb) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a heavyMetalHasOnePbTx) Replace(values ...*pasture.Pb) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a heavyMetalHasOnePbTx) Delete(values ...*pasture.Pb) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a heavyMetalHasOnePbTx) Clear() error {
	return a.tx.Clear()
}

func (a heavyMetalHasOnePbTx) Count() int64 {
	return a.tx.Count()
}

type heavyMetalHasOneCd struct {
	db *gorm.DB

	field.RelationField
}

func (a heavyMetalHasOneCd) Where(conds ...field.Expr) *heavyMetalHasOneCd {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a heavyMetalHasOneCd) WithContext(ctx context.Context) *heavyMetalHasOneCd {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a heavyMetalHasOneCd) Session(session *gorm.Session) *heavyMetalHasOneCd {
	a.db = a.db.Session(session)
	return &a
}

func (a heavyMetalHasOneCd) Model(m *pasture.HeavyMetal) *heavyMetalHasOneCdTx {
	return &heavyMetalHasOneCdTx{a.db.Model(m).Association(a.Name())}
}

type heavyMetalHasOneCdTx struct{ tx *gorm.Association }

func (a heavyMetalHasOneCdTx) Find() (result *pasture.Cd, err error) {
	return result, a.tx.Find(&result)
}

func (a heavyMetalHasOneCdTx) Append(values ...*pasture.Cd) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a heavyMetalHasOneCdTx) Replace(values ...*pasture.Cd) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a heavyMetalHasOneCdTx) Delete(values ...*pasture.Cd) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a heavyMetalHasOneCdTx) Clear() error {
	return a.tx.Clear()
}

func (a heavyMetalHasOneCdTx) Count() int64 {
	return a.tx.Count()
}

type heavyMetalHasOneCr struct {
	db *gorm.DB

	field.RelationField
}

func (a heavyMetalHasOneCr) Where(conds ...field.Expr) *heavyMetalHasOneCr {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a heavyMetalHasOneCr) WithContext(ctx context.Context) *heavyMetalHasOneCr {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a heavyMetalHasOneCr) Session(session *gorm.Session) *heavyMetalHasOneCr {
	a.db = a.db.Session(session)
	return &a
}

func (a heavyMetalHasOneCr) Model(m *pasture.HeavyMetal) *heavyMetalHasOneCrTx {
	return &heavyMetalHasOneCrTx{a.db.Model(m).Association(a.Name())}
}

type heavyMetalHasOneCrTx struct{ tx *gorm.Association }

func (a heavyMetalHasOneCrTx) Find() (result *pasture.Cr, err error) {
	return result, a.tx.Find(&result)
}

func (a heavyMetalHasOneCrTx) Append(values ...*pasture.Cr) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a heavyMetalHasOneCrTx) Replace(values ...*pasture.Cr) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a heavyMetalHasOneCrTx) Delete(values ...*pasture.Cr) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a heavyMetalHasOneCrTx) Clear() error {
	return a.tx.Clear()
}

func (a heavyMetalHasOneCrTx) Count() int64 {
	return a.tx.Count()
}

type heavyMetalDo struct{ gen.DO }

type IHeavyMetalDo interface {
	gen.SubQuery
	Debug() IHeavyMetalDo
	WithContext(ctx context.Context) IHeavyMetalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHeavyMetalDo
	WriteDB() IHeavyMetalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHeavyMetalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHeavyMetalDo
	Not(conds ...gen.Condition) IHeavyMetalDo
	Or(conds ...gen.Condition) IHeavyMetalDo
	Select(conds ...field.Expr) IHeavyMetalDo
	Where(conds ...gen.Condition) IHeavyMetalDo
	Order(conds ...field.Expr) IHeavyMetalDo
	Distinct(cols ...field.Expr) IHeavyMetalDo
	Omit(cols ...field.Expr) IHeavyMetalDo
	Join(table schema.Tabler, on ...field.Expr) IHeavyMetalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHeavyMetalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHeavyMetalDo
	Group(cols ...field.Expr) IHeavyMetalDo
	Having(conds ...gen.Condition) IHeavyMetalDo
	Limit(limit int) IHeavyMetalDo
	Offset(offset int) IHeavyMetalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHeavyMetalDo
	Unscoped() IHeavyMetalDo
	Create(values ...*pasture.HeavyMetal) error
	CreateInBatches(values []*pasture.HeavyMetal, batchSize int) error
	Save(values ...*pasture.HeavyMetal) error
	First() (*pasture.HeavyMetal, error)
	Take() (*pasture.HeavyMetal, error)
	Last() (*pasture.HeavyMetal, error)
	Find() ([]*pasture.HeavyMetal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.HeavyMetal, err error)
	FindInBatches(result *[]*pasture.HeavyMetal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.HeavyMetal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHeavyMetalDo
	Assign(attrs ...field.AssignExpr) IHeavyMetalDo
	Joins(fields ...field.RelationField) IHeavyMetalDo
	Preload(fields ...field.RelationField) IHeavyMetalDo
	FirstOrInit() (*pasture.HeavyMetal, error)
	FirstOrCreate() (*pasture.HeavyMetal, error)
	FindByPage(offset int, limit int) (result []*pasture.HeavyMetal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHeavyMetalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h heavyMetalDo) Debug() IHeavyMetalDo {
	return h.withDO(h.DO.Debug())
}

func (h heavyMetalDo) WithContext(ctx context.Context) IHeavyMetalDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h heavyMetalDo) ReadDB() IHeavyMetalDo {
	return h.Clauses(dbresolver.Read)
}

func (h heavyMetalDo) WriteDB() IHeavyMetalDo {
	return h.Clauses(dbresolver.Write)
}

func (h heavyMetalDo) Session(config *gorm.Session) IHeavyMetalDo {
	return h.withDO(h.DO.Session(config))
}

func (h heavyMetalDo) Clauses(conds ...clause.Expression) IHeavyMetalDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h heavyMetalDo) Returning(value interface{}, columns ...string) IHeavyMetalDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h heavyMetalDo) Not(conds ...gen.Condition) IHeavyMetalDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h heavyMetalDo) Or(conds ...gen.Condition) IHeavyMetalDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h heavyMetalDo) Select(conds ...field.Expr) IHeavyMetalDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h heavyMetalDo) Where(conds ...gen.Condition) IHeavyMetalDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h heavyMetalDo) Order(conds ...field.Expr) IHeavyMetalDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h heavyMetalDo) Distinct(cols ...field.Expr) IHeavyMetalDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h heavyMetalDo) Omit(cols ...field.Expr) IHeavyMetalDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h heavyMetalDo) Join(table schema.Tabler, on ...field.Expr) IHeavyMetalDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h heavyMetalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHeavyMetalDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h heavyMetalDo) RightJoin(table schema.Tabler, on ...field.Expr) IHeavyMetalDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h heavyMetalDo) Group(cols ...field.Expr) IHeavyMetalDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h heavyMetalDo) Having(conds ...gen.Condition) IHeavyMetalDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h heavyMetalDo) Limit(limit int) IHeavyMetalDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h heavyMetalDo) Offset(offset int) IHeavyMetalDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h heavyMetalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHeavyMetalDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h heavyMetalDo) Unscoped() IHeavyMetalDo {
	return h.withDO(h.DO.Unscoped())
}

func (h heavyMetalDo) Create(values ...*pasture.HeavyMetal) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h heavyMetalDo) CreateInBatches(values []*pasture.HeavyMetal, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h heavyMetalDo) Save(values ...*pasture.HeavyMetal) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h heavyMetalDo) First() (*pasture.HeavyMetal, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.HeavyMetal), nil
	}
}

func (h heavyMetalDo) Take() (*pasture.HeavyMetal, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.HeavyMetal), nil
	}
}

func (h heavyMetalDo) Last() (*pasture.HeavyMetal, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.HeavyMetal), nil
	}
}

func (h heavyMetalDo) Find() ([]*pasture.HeavyMetal, error) {
	result, err := h.DO.Find()
	return result.([]*pasture.HeavyMetal), err
}

func (h heavyMetalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.HeavyMetal, err error) {
	buf := make([]*pasture.HeavyMetal, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h heavyMetalDo) FindInBatches(result *[]*pasture.HeavyMetal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h heavyMetalDo) Attrs(attrs ...field.AssignExpr) IHeavyMetalDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h heavyMetalDo) Assign(attrs ...field.AssignExpr) IHeavyMetalDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h heavyMetalDo) Joins(fields ...field.RelationField) IHeavyMetalDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h heavyMetalDo) Preload(fields ...field.RelationField) IHeavyMetalDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h heavyMetalDo) FirstOrInit() (*pasture.HeavyMetal, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.HeavyMetal), nil
	}
}

func (h heavyMetalDo) FirstOrCreate() (*pasture.HeavyMetal, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.HeavyMetal), nil
	}
}

func (h heavyMetalDo) FindByPage(offset int, limit int) (result []*pasture.HeavyMetal, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h heavyMetalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h heavyMetalDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h heavyMetalDo) Delete(models ...*pasture.HeavyMetal) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *heavyMetalDo) withDO(do gen.Dao) *heavyMetalDo {
	h.DO = *do.(*gen.DO)
	return h
}
