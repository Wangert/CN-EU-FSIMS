// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWaterQualityMon(db *gorm.DB, opts ...gen.DOOption) waterQualityMon {
	_waterQualityMon := waterQualityMon{}

	_waterQualityMon.waterQualityMonDo.UseDB(db, opts...)
	_waterQualityMon.waterQualityMonDo.UseModel(&slaughter.WaterQualityMon{})

	tableName := _waterQualityMon.waterQualityMonDo.TableName()
	_waterQualityMon.ALL = field.NewAsterisk(tableName)
	_waterQualityMon.ID = field.NewUint(tableName, "id")
	_waterQualityMon.CreatedAt = field.NewTime(tableName, "created_at")
	_waterQualityMon.UpdatedAt = field.NewTime(tableName, "updated_at")
	_waterQualityMon.DeletedAt = field.NewField(tableName, "deleted_at")
	_waterQualityMon.SlaInfoMonID = field.NewUint(tableName, "sla_info_mon_id")
	_waterQualityMon.MicroIndex = waterQualityMonHasOneMicroIndex{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MicroIndex", "slaughter.SlaughterWaterMicroIndex"),
	}

	_waterQualityMon.ToxIndex = waterQualityMonHasOneToxIndex{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ToxIndex", "slaughter.SlaughterWaterToxIndex"),
	}

	_waterQualityMon.OapGciSla = waterQualityMonHasOneOapGciSla{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("OapGciSla", "slaughter.OapGciSla"),
	}

	_waterQualityMon.MicroIndexWaterMonSla = waterQualityMonHasOneMicroIndexWaterMonSla{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MicroIndexWaterMonSla", "slaughter.MicroIndexWaterMonSla"),
	}

	_waterQualityMon.ToxinIndexSla = waterQualityMonHasOneToxinIndexSla{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ToxinIndexSla", "slaughter.ToxinIndexSla"),
	}

	_waterQualityMon.fillFieldMap()

	return _waterQualityMon
}

type waterQualityMon struct {
	waterQualityMonDo waterQualityMonDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	SlaInfoMonID field.Uint
	MicroIndex   waterQualityMonHasOneMicroIndex

	ToxIndex waterQualityMonHasOneToxIndex

	OapGciSla waterQualityMonHasOneOapGciSla

	MicroIndexWaterMonSla waterQualityMonHasOneMicroIndexWaterMonSla

	ToxinIndexSla waterQualityMonHasOneToxinIndexSla

	fieldMap map[string]field.Expr
}

func (w waterQualityMon) Table(newTableName string) *waterQualityMon {
	w.waterQualityMonDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w waterQualityMon) As(alias string) *waterQualityMon {
	w.waterQualityMonDo.DO = *(w.waterQualityMonDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *waterQualityMon) updateTableName(table string) *waterQualityMon {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewUint(table, "id")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")
	w.SlaInfoMonID = field.NewUint(table, "sla_info_mon_id")

	w.fillFieldMap()

	return w
}

func (w *waterQualityMon) WithContext(ctx context.Context) IWaterQualityMonDo {
	return w.waterQualityMonDo.WithContext(ctx)
}

func (w waterQualityMon) TableName() string { return w.waterQualityMonDo.TableName() }

func (w waterQualityMon) Alias() string { return w.waterQualityMonDo.Alias() }

func (w waterQualityMon) Columns(cols ...field.Expr) gen.Columns {
	return w.waterQualityMonDo.Columns(cols...)
}

func (w *waterQualityMon) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *waterQualityMon) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["sla_info_mon_id"] = w.SlaInfoMonID

}

func (w waterQualityMon) clone(db *gorm.DB) waterQualityMon {
	w.waterQualityMonDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w waterQualityMon) replaceDB(db *gorm.DB) waterQualityMon {
	w.waterQualityMonDo.ReplaceDB(db)
	return w
}

type waterQualityMonHasOneMicroIndex struct {
	db *gorm.DB

	field.RelationField
}

func (a waterQualityMonHasOneMicroIndex) Where(conds ...field.Expr) *waterQualityMonHasOneMicroIndex {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a waterQualityMonHasOneMicroIndex) WithContext(ctx context.Context) *waterQualityMonHasOneMicroIndex {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a waterQualityMonHasOneMicroIndex) Session(session *gorm.Session) *waterQualityMonHasOneMicroIndex {
	a.db = a.db.Session(session)
	return &a
}

func (a waterQualityMonHasOneMicroIndex) Model(m *slaughter.WaterQualityMon) *waterQualityMonHasOneMicroIndexTx {
	return &waterQualityMonHasOneMicroIndexTx{a.db.Model(m).Association(a.Name())}
}

type waterQualityMonHasOneMicroIndexTx struct{ tx *gorm.Association }

func (a waterQualityMonHasOneMicroIndexTx) Find() (result *slaughter.SlaughterWaterMicroIndex, err error) {
	return result, a.tx.Find(&result)
}

func (a waterQualityMonHasOneMicroIndexTx) Append(values ...*slaughter.SlaughterWaterMicroIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a waterQualityMonHasOneMicroIndexTx) Replace(values ...*slaughter.SlaughterWaterMicroIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a waterQualityMonHasOneMicroIndexTx) Delete(values ...*slaughter.SlaughterWaterMicroIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a waterQualityMonHasOneMicroIndexTx) Clear() error {
	return a.tx.Clear()
}

func (a waterQualityMonHasOneMicroIndexTx) Count() int64 {
	return a.tx.Count()
}

type waterQualityMonHasOneToxIndex struct {
	db *gorm.DB

	field.RelationField
}

func (a waterQualityMonHasOneToxIndex) Where(conds ...field.Expr) *waterQualityMonHasOneToxIndex {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a waterQualityMonHasOneToxIndex) WithContext(ctx context.Context) *waterQualityMonHasOneToxIndex {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a waterQualityMonHasOneToxIndex) Session(session *gorm.Session) *waterQualityMonHasOneToxIndex {
	a.db = a.db.Session(session)
	return &a
}

func (a waterQualityMonHasOneToxIndex) Model(m *slaughter.WaterQualityMon) *waterQualityMonHasOneToxIndexTx {
	return &waterQualityMonHasOneToxIndexTx{a.db.Model(m).Association(a.Name())}
}

type waterQualityMonHasOneToxIndexTx struct{ tx *gorm.Association }

func (a waterQualityMonHasOneToxIndexTx) Find() (result *slaughter.SlaughterWaterToxIndex, err error) {
	return result, a.tx.Find(&result)
}

func (a waterQualityMonHasOneToxIndexTx) Append(values ...*slaughter.SlaughterWaterToxIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a waterQualityMonHasOneToxIndexTx) Replace(values ...*slaughter.SlaughterWaterToxIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a waterQualityMonHasOneToxIndexTx) Delete(values ...*slaughter.SlaughterWaterToxIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a waterQualityMonHasOneToxIndexTx) Clear() error {
	return a.tx.Clear()
}

func (a waterQualityMonHasOneToxIndexTx) Count() int64 {
	return a.tx.Count()
}

type waterQualityMonHasOneOapGciSla struct {
	db *gorm.DB

	field.RelationField
}

func (a waterQualityMonHasOneOapGciSla) Where(conds ...field.Expr) *waterQualityMonHasOneOapGciSla {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a waterQualityMonHasOneOapGciSla) WithContext(ctx context.Context) *waterQualityMonHasOneOapGciSla {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a waterQualityMonHasOneOapGciSla) Session(session *gorm.Session) *waterQualityMonHasOneOapGciSla {
	a.db = a.db.Session(session)
	return &a
}

func (a waterQualityMonHasOneOapGciSla) Model(m *slaughter.WaterQualityMon) *waterQualityMonHasOneOapGciSlaTx {
	return &waterQualityMonHasOneOapGciSlaTx{a.db.Model(m).Association(a.Name())}
}

type waterQualityMonHasOneOapGciSlaTx struct{ tx *gorm.Association }

func (a waterQualityMonHasOneOapGciSlaTx) Find() (result *slaughter.OapGciSla, err error) {
	return result, a.tx.Find(&result)
}

func (a waterQualityMonHasOneOapGciSlaTx) Append(values ...*slaughter.OapGciSla) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a waterQualityMonHasOneOapGciSlaTx) Replace(values ...*slaughter.OapGciSla) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a waterQualityMonHasOneOapGciSlaTx) Delete(values ...*slaughter.OapGciSla) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a waterQualityMonHasOneOapGciSlaTx) Clear() error {
	return a.tx.Clear()
}

func (a waterQualityMonHasOneOapGciSlaTx) Count() int64 {
	return a.tx.Count()
}

type waterQualityMonHasOneMicroIndexWaterMonSla struct {
	db *gorm.DB

	field.RelationField
}

func (a waterQualityMonHasOneMicroIndexWaterMonSla) Where(conds ...field.Expr) *waterQualityMonHasOneMicroIndexWaterMonSla {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a waterQualityMonHasOneMicroIndexWaterMonSla) WithContext(ctx context.Context) *waterQualityMonHasOneMicroIndexWaterMonSla {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a waterQualityMonHasOneMicroIndexWaterMonSla) Session(session *gorm.Session) *waterQualityMonHasOneMicroIndexWaterMonSla {
	a.db = a.db.Session(session)
	return &a
}

func (a waterQualityMonHasOneMicroIndexWaterMonSla) Model(m *slaughter.WaterQualityMon) *waterQualityMonHasOneMicroIndexWaterMonSlaTx {
	return &waterQualityMonHasOneMicroIndexWaterMonSlaTx{a.db.Model(m).Association(a.Name())}
}

type waterQualityMonHasOneMicroIndexWaterMonSlaTx struct{ tx *gorm.Association }

func (a waterQualityMonHasOneMicroIndexWaterMonSlaTx) Find() (result *slaughter.MicroIndexWaterMonSla, err error) {
	return result, a.tx.Find(&result)
}

func (a waterQualityMonHasOneMicroIndexWaterMonSlaTx) Append(values ...*slaughter.MicroIndexWaterMonSla) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a waterQualityMonHasOneMicroIndexWaterMonSlaTx) Replace(values ...*slaughter.MicroIndexWaterMonSla) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a waterQualityMonHasOneMicroIndexWaterMonSlaTx) Delete(values ...*slaughter.MicroIndexWaterMonSla) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a waterQualityMonHasOneMicroIndexWaterMonSlaTx) Clear() error {
	return a.tx.Clear()
}

func (a waterQualityMonHasOneMicroIndexWaterMonSlaTx) Count() int64 {
	return a.tx.Count()
}

type waterQualityMonHasOneToxinIndexSla struct {
	db *gorm.DB

	field.RelationField
}

func (a waterQualityMonHasOneToxinIndexSla) Where(conds ...field.Expr) *waterQualityMonHasOneToxinIndexSla {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a waterQualityMonHasOneToxinIndexSla) WithContext(ctx context.Context) *waterQualityMonHasOneToxinIndexSla {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a waterQualityMonHasOneToxinIndexSla) Session(session *gorm.Session) *waterQualityMonHasOneToxinIndexSla {
	a.db = a.db.Session(session)
	return &a
}

func (a waterQualityMonHasOneToxinIndexSla) Model(m *slaughter.WaterQualityMon) *waterQualityMonHasOneToxinIndexSlaTx {
	return &waterQualityMonHasOneToxinIndexSlaTx{a.db.Model(m).Association(a.Name())}
}

type waterQualityMonHasOneToxinIndexSlaTx struct{ tx *gorm.Association }

func (a waterQualityMonHasOneToxinIndexSlaTx) Find() (result *slaughter.ToxinIndexSla, err error) {
	return result, a.tx.Find(&result)
}

func (a waterQualityMonHasOneToxinIndexSlaTx) Append(values ...*slaughter.ToxinIndexSla) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a waterQualityMonHasOneToxinIndexSlaTx) Replace(values ...*slaughter.ToxinIndexSla) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a waterQualityMonHasOneToxinIndexSlaTx) Delete(values ...*slaughter.ToxinIndexSla) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a waterQualityMonHasOneToxinIndexSlaTx) Clear() error {
	return a.tx.Clear()
}

func (a waterQualityMonHasOneToxinIndexSlaTx) Count() int64 {
	return a.tx.Count()
}

type waterQualityMonDo struct{ gen.DO }

type IWaterQualityMonDo interface {
	gen.SubQuery
	Debug() IWaterQualityMonDo
	WithContext(ctx context.Context) IWaterQualityMonDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWaterQualityMonDo
	WriteDB() IWaterQualityMonDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWaterQualityMonDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWaterQualityMonDo
	Not(conds ...gen.Condition) IWaterQualityMonDo
	Or(conds ...gen.Condition) IWaterQualityMonDo
	Select(conds ...field.Expr) IWaterQualityMonDo
	Where(conds ...gen.Condition) IWaterQualityMonDo
	Order(conds ...field.Expr) IWaterQualityMonDo
	Distinct(cols ...field.Expr) IWaterQualityMonDo
	Omit(cols ...field.Expr) IWaterQualityMonDo
	Join(table schema.Tabler, on ...field.Expr) IWaterQualityMonDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWaterQualityMonDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWaterQualityMonDo
	Group(cols ...field.Expr) IWaterQualityMonDo
	Having(conds ...gen.Condition) IWaterQualityMonDo
	Limit(limit int) IWaterQualityMonDo
	Offset(offset int) IWaterQualityMonDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWaterQualityMonDo
	Unscoped() IWaterQualityMonDo
	Create(values ...*slaughter.WaterQualityMon) error
	CreateInBatches(values []*slaughter.WaterQualityMon, batchSize int) error
	Save(values ...*slaughter.WaterQualityMon) error
	First() (*slaughter.WaterQualityMon, error)
	Take() (*slaughter.WaterQualityMon, error)
	Last() (*slaughter.WaterQualityMon, error)
	Find() ([]*slaughter.WaterQualityMon, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.WaterQualityMon, err error)
	FindInBatches(result *[]*slaughter.WaterQualityMon, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.WaterQualityMon) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWaterQualityMonDo
	Assign(attrs ...field.AssignExpr) IWaterQualityMonDo
	Joins(fields ...field.RelationField) IWaterQualityMonDo
	Preload(fields ...field.RelationField) IWaterQualityMonDo
	FirstOrInit() (*slaughter.WaterQualityMon, error)
	FirstOrCreate() (*slaughter.WaterQualityMon, error)
	FindByPage(offset int, limit int) (result []*slaughter.WaterQualityMon, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWaterQualityMonDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w waterQualityMonDo) Debug() IWaterQualityMonDo {
	return w.withDO(w.DO.Debug())
}

func (w waterQualityMonDo) WithContext(ctx context.Context) IWaterQualityMonDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w waterQualityMonDo) ReadDB() IWaterQualityMonDo {
	return w.Clauses(dbresolver.Read)
}

func (w waterQualityMonDo) WriteDB() IWaterQualityMonDo {
	return w.Clauses(dbresolver.Write)
}

func (w waterQualityMonDo) Session(config *gorm.Session) IWaterQualityMonDo {
	return w.withDO(w.DO.Session(config))
}

func (w waterQualityMonDo) Clauses(conds ...clause.Expression) IWaterQualityMonDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w waterQualityMonDo) Returning(value interface{}, columns ...string) IWaterQualityMonDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w waterQualityMonDo) Not(conds ...gen.Condition) IWaterQualityMonDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w waterQualityMonDo) Or(conds ...gen.Condition) IWaterQualityMonDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w waterQualityMonDo) Select(conds ...field.Expr) IWaterQualityMonDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w waterQualityMonDo) Where(conds ...gen.Condition) IWaterQualityMonDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w waterQualityMonDo) Order(conds ...field.Expr) IWaterQualityMonDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w waterQualityMonDo) Distinct(cols ...field.Expr) IWaterQualityMonDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w waterQualityMonDo) Omit(cols ...field.Expr) IWaterQualityMonDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w waterQualityMonDo) Join(table schema.Tabler, on ...field.Expr) IWaterQualityMonDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w waterQualityMonDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWaterQualityMonDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w waterQualityMonDo) RightJoin(table schema.Tabler, on ...field.Expr) IWaterQualityMonDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w waterQualityMonDo) Group(cols ...field.Expr) IWaterQualityMonDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w waterQualityMonDo) Having(conds ...gen.Condition) IWaterQualityMonDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w waterQualityMonDo) Limit(limit int) IWaterQualityMonDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w waterQualityMonDo) Offset(offset int) IWaterQualityMonDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w waterQualityMonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWaterQualityMonDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w waterQualityMonDo) Unscoped() IWaterQualityMonDo {
	return w.withDO(w.DO.Unscoped())
}

func (w waterQualityMonDo) Create(values ...*slaughter.WaterQualityMon) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w waterQualityMonDo) CreateInBatches(values []*slaughter.WaterQualityMon, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w waterQualityMonDo) Save(values ...*slaughter.WaterQualityMon) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w waterQualityMonDo) First() (*slaughter.WaterQualityMon, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.WaterQualityMon), nil
	}
}

func (w waterQualityMonDo) Take() (*slaughter.WaterQualityMon, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.WaterQualityMon), nil
	}
}

func (w waterQualityMonDo) Last() (*slaughter.WaterQualityMon, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.WaterQualityMon), nil
	}
}

func (w waterQualityMonDo) Find() ([]*slaughter.WaterQualityMon, error) {
	result, err := w.DO.Find()
	return result.([]*slaughter.WaterQualityMon), err
}

func (w waterQualityMonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.WaterQualityMon, err error) {
	buf := make([]*slaughter.WaterQualityMon, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w waterQualityMonDo) FindInBatches(result *[]*slaughter.WaterQualityMon, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w waterQualityMonDo) Attrs(attrs ...field.AssignExpr) IWaterQualityMonDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w waterQualityMonDo) Assign(attrs ...field.AssignExpr) IWaterQualityMonDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w waterQualityMonDo) Joins(fields ...field.RelationField) IWaterQualityMonDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w waterQualityMonDo) Preload(fields ...field.RelationField) IWaterQualityMonDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w waterQualityMonDo) FirstOrInit() (*slaughter.WaterQualityMon, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.WaterQualityMon), nil
	}
}

func (w waterQualityMonDo) FirstOrCreate() (*slaughter.WaterQualityMon, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.WaterQualityMon), nil
	}
}

func (w waterQualityMonDo) FindByPage(offset int, limit int) (result []*slaughter.WaterQualityMon, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w waterQualityMonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w waterQualityMonDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w waterQualityMonDo) Delete(models ...*slaughter.WaterQualityMon) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *waterQualityMonDo) withDO(do gen.Dao) *waterQualityMonDo {
	w.DO = *do.(*gen.DO)
	return w
}
