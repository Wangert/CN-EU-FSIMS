// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFSIMSUser(db *gorm.DB, opts ...gen.DOOption) fSIMSUser {
	_fSIMSUser := fSIMSUser{}

	_fSIMSUser.fSIMSUserDo.UseDB(db, opts...)
	_fSIMSUser.fSIMSUserDo.UseModel(&models.FSIMSUser{})

	tableName := _fSIMSUser.fSIMSUserDo.TableName()
	_fSIMSUser.ALL = field.NewAsterisk(tableName)
	_fSIMSUser.ID = field.NewUint(tableName, "id")
	_fSIMSUser.CreatedAt = field.NewTime(tableName, "created_at")
	_fSIMSUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fSIMSUser.DeletedAt = field.NewField(tableName, "deleted_at")
	_fSIMSUser.UUID = field.NewString(tableName, "uuid")
	_fSIMSUser.Name = field.NewString(tableName, "name")
	_fSIMSUser.Account = field.NewString(tableName, "account")
	_fSIMSUser.PasswordHash = field.NewString(tableName, "password_hash")
	_fSIMSUser.Type = field.NewInt(tableName, "type")
	_fSIMSUser.Role = field.NewString(tableName, "role")
	_fSIMSUser.HouseNumber = field.NewString(tableName, "house_number")
	_fSIMSUser.Status = field.NewInt(tableName, "status")
	_fSIMSUser.Company = field.NewString(tableName, "company")
	_fSIMSUser.Phone = field.NewString(tableName, "phone")

	_fSIMSUser.fillFieldMap()

	return _fSIMSUser
}

type fSIMSUser struct {
	fSIMSUserDo fSIMSUserDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	UUID         field.String
	Name         field.String
	Account      field.String
	PasswordHash field.String
	Type         field.Int
	Role         field.String
	HouseNumber  field.String
	Status       field.Int
	Company      field.String
	Phone        field.String

	fieldMap map[string]field.Expr
}

func (f fSIMSUser) Table(newTableName string) *fSIMSUser {
	f.fSIMSUserDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fSIMSUser) As(alias string) *fSIMSUser {
	f.fSIMSUserDo.DO = *(f.fSIMSUserDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fSIMSUser) updateTableName(table string) *fSIMSUser {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.UUID = field.NewString(table, "uuid")
	f.Name = field.NewString(table, "name")
	f.Account = field.NewString(table, "account")
	f.PasswordHash = field.NewString(table, "password_hash")
	f.Type = field.NewInt(table, "type")
	f.Role = field.NewString(table, "role")
	f.HouseNumber = field.NewString(table, "house_number")
	f.Status = field.NewInt(table, "status")
	f.Company = field.NewString(table, "company")
	f.Phone = field.NewString(table, "phone")

	f.fillFieldMap()

	return f
}

func (f *fSIMSUser) WithContext(ctx context.Context) IFSIMSUserDo {
	return f.fSIMSUserDo.WithContext(ctx)
}

func (f fSIMSUser) TableName() string { return f.fSIMSUserDo.TableName() }

func (f fSIMSUser) Alias() string { return f.fSIMSUserDo.Alias() }

func (f fSIMSUser) Columns(cols ...field.Expr) gen.Columns { return f.fSIMSUserDo.Columns(cols...) }

func (f *fSIMSUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fSIMSUser) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 14)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["uuid"] = f.UUID
	f.fieldMap["name"] = f.Name
	f.fieldMap["account"] = f.Account
	f.fieldMap["password_hash"] = f.PasswordHash
	f.fieldMap["type"] = f.Type
	f.fieldMap["role"] = f.Role
	f.fieldMap["house_number"] = f.HouseNumber
	f.fieldMap["status"] = f.Status
	f.fieldMap["company"] = f.Company
	f.fieldMap["phone"] = f.Phone
}

func (f fSIMSUser) clone(db *gorm.DB) fSIMSUser {
	f.fSIMSUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fSIMSUser) replaceDB(db *gorm.DB) fSIMSUser {
	f.fSIMSUserDo.ReplaceDB(db)
	return f
}

type fSIMSUserDo struct{ gen.DO }

type IFSIMSUserDo interface {
	gen.SubQuery
	Debug() IFSIMSUserDo
	WithContext(ctx context.Context) IFSIMSUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFSIMSUserDo
	WriteDB() IFSIMSUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFSIMSUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFSIMSUserDo
	Not(conds ...gen.Condition) IFSIMSUserDo
	Or(conds ...gen.Condition) IFSIMSUserDo
	Select(conds ...field.Expr) IFSIMSUserDo
	Where(conds ...gen.Condition) IFSIMSUserDo
	Order(conds ...field.Expr) IFSIMSUserDo
	Distinct(cols ...field.Expr) IFSIMSUserDo
	Omit(cols ...field.Expr) IFSIMSUserDo
	Join(table schema.Tabler, on ...field.Expr) IFSIMSUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFSIMSUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFSIMSUserDo
	Group(cols ...field.Expr) IFSIMSUserDo
	Having(conds ...gen.Condition) IFSIMSUserDo
	Limit(limit int) IFSIMSUserDo
	Offset(offset int) IFSIMSUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFSIMSUserDo
	Unscoped() IFSIMSUserDo
	Create(values ...*models.FSIMSUser) error
	CreateInBatches(values []*models.FSIMSUser, batchSize int) error
	Save(values ...*models.FSIMSUser) error
	First() (*models.FSIMSUser, error)
	Take() (*models.FSIMSUser, error)
	Last() (*models.FSIMSUser, error)
	Find() ([]*models.FSIMSUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FSIMSUser, err error)
	FindInBatches(result *[]*models.FSIMSUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.FSIMSUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFSIMSUserDo
	Assign(attrs ...field.AssignExpr) IFSIMSUserDo
	Joins(fields ...field.RelationField) IFSIMSUserDo
	Preload(fields ...field.RelationField) IFSIMSUserDo
	FirstOrInit() (*models.FSIMSUser, error)
	FirstOrCreate() (*models.FSIMSUser, error)
	FindByPage(offset int, limit int) (result []*models.FSIMSUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFSIMSUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fSIMSUserDo) Debug() IFSIMSUserDo {
	return f.withDO(f.DO.Debug())
}

func (f fSIMSUserDo) WithContext(ctx context.Context) IFSIMSUserDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fSIMSUserDo) ReadDB() IFSIMSUserDo {
	return f.Clauses(dbresolver.Read)
}

func (f fSIMSUserDo) WriteDB() IFSIMSUserDo {
	return f.Clauses(dbresolver.Write)
}

func (f fSIMSUserDo) Session(config *gorm.Session) IFSIMSUserDo {
	return f.withDO(f.DO.Session(config))
}

func (f fSIMSUserDo) Clauses(conds ...clause.Expression) IFSIMSUserDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fSIMSUserDo) Returning(value interface{}, columns ...string) IFSIMSUserDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fSIMSUserDo) Not(conds ...gen.Condition) IFSIMSUserDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fSIMSUserDo) Or(conds ...gen.Condition) IFSIMSUserDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fSIMSUserDo) Select(conds ...field.Expr) IFSIMSUserDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fSIMSUserDo) Where(conds ...gen.Condition) IFSIMSUserDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fSIMSUserDo) Order(conds ...field.Expr) IFSIMSUserDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fSIMSUserDo) Distinct(cols ...field.Expr) IFSIMSUserDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fSIMSUserDo) Omit(cols ...field.Expr) IFSIMSUserDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fSIMSUserDo) Join(table schema.Tabler, on ...field.Expr) IFSIMSUserDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fSIMSUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFSIMSUserDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fSIMSUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IFSIMSUserDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fSIMSUserDo) Group(cols ...field.Expr) IFSIMSUserDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fSIMSUserDo) Having(conds ...gen.Condition) IFSIMSUserDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fSIMSUserDo) Limit(limit int) IFSIMSUserDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fSIMSUserDo) Offset(offset int) IFSIMSUserDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fSIMSUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFSIMSUserDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fSIMSUserDo) Unscoped() IFSIMSUserDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fSIMSUserDo) Create(values ...*models.FSIMSUser) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fSIMSUserDo) CreateInBatches(values []*models.FSIMSUser, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fSIMSUserDo) Save(values ...*models.FSIMSUser) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fSIMSUserDo) First() (*models.FSIMSUser, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.FSIMSUser), nil
	}
}

func (f fSIMSUserDo) Take() (*models.FSIMSUser, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.FSIMSUser), nil
	}
}

func (f fSIMSUserDo) Last() (*models.FSIMSUser, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.FSIMSUser), nil
	}
}

func (f fSIMSUserDo) Find() ([]*models.FSIMSUser, error) {
	result, err := f.DO.Find()
	return result.([]*models.FSIMSUser), err
}

func (f fSIMSUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FSIMSUser, err error) {
	buf := make([]*models.FSIMSUser, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fSIMSUserDo) FindInBatches(result *[]*models.FSIMSUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fSIMSUserDo) Attrs(attrs ...field.AssignExpr) IFSIMSUserDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fSIMSUserDo) Assign(attrs ...field.AssignExpr) IFSIMSUserDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fSIMSUserDo) Joins(fields ...field.RelationField) IFSIMSUserDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fSIMSUserDo) Preload(fields ...field.RelationField) IFSIMSUserDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fSIMSUserDo) FirstOrInit() (*models.FSIMSUser, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.FSIMSUser), nil
	}
}

func (f fSIMSUserDo) FirstOrCreate() (*models.FSIMSUser, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.FSIMSUser), nil
	}
}

func (f fSIMSUserDo) FindByPage(offset int, limit int) (result []*models.FSIMSUser, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fSIMSUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fSIMSUserDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fSIMSUserDo) Delete(models ...*models.FSIMSUser) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fSIMSUserDo) withDO(do gen.Dao) *fSIMSUserDo {
	f.DO = *do.(*gen.DO)
	return f
}
