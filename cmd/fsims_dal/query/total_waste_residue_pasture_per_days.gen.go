// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTotalWasteResiduePasturePerDay(db *gorm.DB, opts ...gen.DOOption) totalWasteResiduePasturePerDay {
	_totalWasteResiduePasturePerDay := totalWasteResiduePasturePerDay{}

	_totalWasteResiduePasturePerDay.totalWasteResiduePasturePerDayDo.UseDB(db, opts...)
	_totalWasteResiduePasturePerDay.totalWasteResiduePasturePerDayDo.UseModel(&pasture.TotalWasteResiduePasturePerDay{})

	tableName := _totalWasteResiduePasturePerDay.totalWasteResiduePasturePerDayDo.TableName()
	_totalWasteResiduePasturePerDay.ALL = field.NewAsterisk(tableName)
	_totalWasteResiduePasturePerDay.ID = field.NewUint(tableName, "id")
	_totalWasteResiduePasturePerDay.CreatedAt = field.NewTime(tableName, "created_at")
	_totalWasteResiduePasturePerDay.UpdatedAt = field.NewTime(tableName, "updated_at")
	_totalWasteResiduePasturePerDay.DeletedAt = field.NewField(tableName, "deleted_at")
	_totalWasteResiduePasturePerDay.TimeStamp = field.NewTime(tableName, "time_stamp")
	_totalWasteResiduePasturePerDay.HouseNumber = field.NewString(tableName, "house_number")
	_totalWasteResiduePasturePerDay.TotalWastedWaterPerDay1 = field.NewFloat64(tableName, "total_wasted_water_per_day1")
	_totalWasteResiduePasturePerDay.TotalWastedWaterPerDay2 = field.NewFloat64(tableName, "total_wasted_water_per_day2")
	_totalWasteResiduePasturePerDay.TotalWastedWaterPerDay3 = field.NewFloat64(tableName, "total_wasted_water_per_day3")
	_totalWasteResiduePasturePerDay.TotalWastedWaterPerDay4 = field.NewFloat64(tableName, "total_wasted_water_per_day4")

	_totalWasteResiduePasturePerDay.fillFieldMap()

	return _totalWasteResiduePasturePerDay
}

type totalWasteResiduePasturePerDay struct {
	totalWasteResiduePasturePerDayDo totalWasteResiduePasturePerDayDo

	ALL                     field.Asterisk
	ID                      field.Uint
	CreatedAt               field.Time
	UpdatedAt               field.Time
	DeletedAt               field.Field
	TimeStamp               field.Time
	HouseNumber             field.String
	TotalWastedWaterPerDay1 field.Float64
	TotalWastedWaterPerDay2 field.Float64
	TotalWastedWaterPerDay3 field.Float64
	TotalWastedWaterPerDay4 field.Float64

	fieldMap map[string]field.Expr
}

func (t totalWasteResiduePasturePerDay) Table(newTableName string) *totalWasteResiduePasturePerDay {
	t.totalWasteResiduePasturePerDayDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t totalWasteResiduePasturePerDay) As(alias string) *totalWasteResiduePasturePerDay {
	t.totalWasteResiduePasturePerDayDo.DO = *(t.totalWasteResiduePasturePerDayDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *totalWasteResiduePasturePerDay) updateTableName(table string) *totalWasteResiduePasturePerDay {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.TimeStamp = field.NewTime(table, "time_stamp")
	t.HouseNumber = field.NewString(table, "house_number")
	t.TotalWastedWaterPerDay1 = field.NewFloat64(table, "total_wasted_water_per_day1")
	t.TotalWastedWaterPerDay2 = field.NewFloat64(table, "total_wasted_water_per_day2")
	t.TotalWastedWaterPerDay3 = field.NewFloat64(table, "total_wasted_water_per_day3")
	t.TotalWastedWaterPerDay4 = field.NewFloat64(table, "total_wasted_water_per_day4")

	t.fillFieldMap()

	return t
}

func (t *totalWasteResiduePasturePerDay) WithContext(ctx context.Context) ITotalWasteResiduePasturePerDayDo {
	return t.totalWasteResiduePasturePerDayDo.WithContext(ctx)
}

func (t totalWasteResiduePasturePerDay) TableName() string {
	return t.totalWasteResiduePasturePerDayDo.TableName()
}

func (t totalWasteResiduePasturePerDay) Alias() string {
	return t.totalWasteResiduePasturePerDayDo.Alias()
}

func (t totalWasteResiduePasturePerDay) Columns(cols ...field.Expr) gen.Columns {
	return t.totalWasteResiduePasturePerDayDo.Columns(cols...)
}

func (t *totalWasteResiduePasturePerDay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *totalWasteResiduePasturePerDay) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["time_stamp"] = t.TimeStamp
	t.fieldMap["house_number"] = t.HouseNumber
	t.fieldMap["total_wasted_water_per_day1"] = t.TotalWastedWaterPerDay1
	t.fieldMap["total_wasted_water_per_day2"] = t.TotalWastedWaterPerDay2
	t.fieldMap["total_wasted_water_per_day3"] = t.TotalWastedWaterPerDay3
	t.fieldMap["total_wasted_water_per_day4"] = t.TotalWastedWaterPerDay4
}

func (t totalWasteResiduePasturePerDay) clone(db *gorm.DB) totalWasteResiduePasturePerDay {
	t.totalWasteResiduePasturePerDayDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t totalWasteResiduePasturePerDay) replaceDB(db *gorm.DB) totalWasteResiduePasturePerDay {
	t.totalWasteResiduePasturePerDayDo.ReplaceDB(db)
	return t
}

type totalWasteResiduePasturePerDayDo struct{ gen.DO }

type ITotalWasteResiduePasturePerDayDo interface {
	gen.SubQuery
	Debug() ITotalWasteResiduePasturePerDayDo
	WithContext(ctx context.Context) ITotalWasteResiduePasturePerDayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITotalWasteResiduePasturePerDayDo
	WriteDB() ITotalWasteResiduePasturePerDayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITotalWasteResiduePasturePerDayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITotalWasteResiduePasturePerDayDo
	Not(conds ...gen.Condition) ITotalWasteResiduePasturePerDayDo
	Or(conds ...gen.Condition) ITotalWasteResiduePasturePerDayDo
	Select(conds ...field.Expr) ITotalWasteResiduePasturePerDayDo
	Where(conds ...gen.Condition) ITotalWasteResiduePasturePerDayDo
	Order(conds ...field.Expr) ITotalWasteResiduePasturePerDayDo
	Distinct(cols ...field.Expr) ITotalWasteResiduePasturePerDayDo
	Omit(cols ...field.Expr) ITotalWasteResiduePasturePerDayDo
	Join(table schema.Tabler, on ...field.Expr) ITotalWasteResiduePasturePerDayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITotalWasteResiduePasturePerDayDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITotalWasteResiduePasturePerDayDo
	Group(cols ...field.Expr) ITotalWasteResiduePasturePerDayDo
	Having(conds ...gen.Condition) ITotalWasteResiduePasturePerDayDo
	Limit(limit int) ITotalWasteResiduePasturePerDayDo
	Offset(offset int) ITotalWasteResiduePasturePerDayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITotalWasteResiduePasturePerDayDo
	Unscoped() ITotalWasteResiduePasturePerDayDo
	Create(values ...*pasture.TotalWasteResiduePasturePerDay) error
	CreateInBatches(values []*pasture.TotalWasteResiduePasturePerDay, batchSize int) error
	Save(values ...*pasture.TotalWasteResiduePasturePerDay) error
	First() (*pasture.TotalWasteResiduePasturePerDay, error)
	Take() (*pasture.TotalWasteResiduePasturePerDay, error)
	Last() (*pasture.TotalWasteResiduePasturePerDay, error)
	Find() ([]*pasture.TotalWasteResiduePasturePerDay, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.TotalWasteResiduePasturePerDay, err error)
	FindInBatches(result *[]*pasture.TotalWasteResiduePasturePerDay, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.TotalWasteResiduePasturePerDay) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITotalWasteResiduePasturePerDayDo
	Assign(attrs ...field.AssignExpr) ITotalWasteResiduePasturePerDayDo
	Joins(fields ...field.RelationField) ITotalWasteResiduePasturePerDayDo
	Preload(fields ...field.RelationField) ITotalWasteResiduePasturePerDayDo
	FirstOrInit() (*pasture.TotalWasteResiduePasturePerDay, error)
	FirstOrCreate() (*pasture.TotalWasteResiduePasturePerDay, error)
	FindByPage(offset int, limit int) (result []*pasture.TotalWasteResiduePasturePerDay, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITotalWasteResiduePasturePerDayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t totalWasteResiduePasturePerDayDo) Debug() ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Debug())
}

func (t totalWasteResiduePasturePerDayDo) WithContext(ctx context.Context) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t totalWasteResiduePasturePerDayDo) ReadDB() ITotalWasteResiduePasturePerDayDo {
	return t.Clauses(dbresolver.Read)
}

func (t totalWasteResiduePasturePerDayDo) WriteDB() ITotalWasteResiduePasturePerDayDo {
	return t.Clauses(dbresolver.Write)
}

func (t totalWasteResiduePasturePerDayDo) Session(config *gorm.Session) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Session(config))
}

func (t totalWasteResiduePasturePerDayDo) Clauses(conds ...clause.Expression) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t totalWasteResiduePasturePerDayDo) Returning(value interface{}, columns ...string) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t totalWasteResiduePasturePerDayDo) Not(conds ...gen.Condition) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t totalWasteResiduePasturePerDayDo) Or(conds ...gen.Condition) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t totalWasteResiduePasturePerDayDo) Select(conds ...field.Expr) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t totalWasteResiduePasturePerDayDo) Where(conds ...gen.Condition) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t totalWasteResiduePasturePerDayDo) Order(conds ...field.Expr) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t totalWasteResiduePasturePerDayDo) Distinct(cols ...field.Expr) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t totalWasteResiduePasturePerDayDo) Omit(cols ...field.Expr) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t totalWasteResiduePasturePerDayDo) Join(table schema.Tabler, on ...field.Expr) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t totalWasteResiduePasturePerDayDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t totalWasteResiduePasturePerDayDo) RightJoin(table schema.Tabler, on ...field.Expr) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t totalWasteResiduePasturePerDayDo) Group(cols ...field.Expr) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t totalWasteResiduePasturePerDayDo) Having(conds ...gen.Condition) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t totalWasteResiduePasturePerDayDo) Limit(limit int) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t totalWasteResiduePasturePerDayDo) Offset(offset int) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t totalWasteResiduePasturePerDayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t totalWasteResiduePasturePerDayDo) Unscoped() ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Unscoped())
}

func (t totalWasteResiduePasturePerDayDo) Create(values ...*pasture.TotalWasteResiduePasturePerDay) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t totalWasteResiduePasturePerDayDo) CreateInBatches(values []*pasture.TotalWasteResiduePasturePerDay, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t totalWasteResiduePasturePerDayDo) Save(values ...*pasture.TotalWasteResiduePasturePerDay) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t totalWasteResiduePasturePerDayDo) First() (*pasture.TotalWasteResiduePasturePerDay, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.TotalWasteResiduePasturePerDay), nil
	}
}

func (t totalWasteResiduePasturePerDayDo) Take() (*pasture.TotalWasteResiduePasturePerDay, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.TotalWasteResiduePasturePerDay), nil
	}
}

func (t totalWasteResiduePasturePerDayDo) Last() (*pasture.TotalWasteResiduePasturePerDay, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.TotalWasteResiduePasturePerDay), nil
	}
}

func (t totalWasteResiduePasturePerDayDo) Find() ([]*pasture.TotalWasteResiduePasturePerDay, error) {
	result, err := t.DO.Find()
	return result.([]*pasture.TotalWasteResiduePasturePerDay), err
}

func (t totalWasteResiduePasturePerDayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.TotalWasteResiduePasturePerDay, err error) {
	buf := make([]*pasture.TotalWasteResiduePasturePerDay, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t totalWasteResiduePasturePerDayDo) FindInBatches(result *[]*pasture.TotalWasteResiduePasturePerDay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t totalWasteResiduePasturePerDayDo) Attrs(attrs ...field.AssignExpr) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t totalWasteResiduePasturePerDayDo) Assign(attrs ...field.AssignExpr) ITotalWasteResiduePasturePerDayDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t totalWasteResiduePasturePerDayDo) Joins(fields ...field.RelationField) ITotalWasteResiduePasturePerDayDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t totalWasteResiduePasturePerDayDo) Preload(fields ...field.RelationField) ITotalWasteResiduePasturePerDayDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t totalWasteResiduePasturePerDayDo) FirstOrInit() (*pasture.TotalWasteResiduePasturePerDay, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.TotalWasteResiduePasturePerDay), nil
	}
}

func (t totalWasteResiduePasturePerDayDo) FirstOrCreate() (*pasture.TotalWasteResiduePasturePerDay, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.TotalWasteResiduePasturePerDay), nil
	}
}

func (t totalWasteResiduePasturePerDayDo) FindByPage(offset int, limit int) (result []*pasture.TotalWasteResiduePasturePerDay, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t totalWasteResiduePasturePerDayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t totalWasteResiduePasturePerDayDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t totalWasteResiduePasturePerDayDo) Delete(models ...*pasture.TotalWasteResiduePasturePerDay) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *totalWasteResiduePasturePerDayDo) withDO(do gen.Dao) *totalWasteResiduePasturePerDayDo {
	t.DO = *do.(*gen.DO)
	return t
}
