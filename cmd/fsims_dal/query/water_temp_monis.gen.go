// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newWaterTempMoni(db *gorm.DB, opts ...gen.DOOption) waterTempMoni {
	_waterTempMoni := waterTempMoni{}

	_waterTempMoni.waterTempMoniDo.UseDB(db, opts...)
	_waterTempMoni.waterTempMoniDo.UseModel(&slaughter.WaterTempMoni{})

	tableName := _waterTempMoni.waterTempMoniDo.TableName()
	_waterTempMoni.ALL = field.NewAsterisk(tableName)
	_waterTempMoni.ID = field.NewUint(tableName, "id")
	_waterTempMoni.CreatedAt = field.NewTime(tableName, "created_at")
	_waterTempMoni.UpdatedAt = field.NewTime(tableName, "updated_at")
	_waterTempMoni.DeletedAt = field.NewField(tableName, "deleted_at")
	_waterTempMoni.SlaInfoMonID = field.NewUint(tableName, "sla_info_mon_id")
	_waterTempMoni.WaterTempMoni1 = field.NewFloat32(tableName, "water_temp_moni1")
	_waterTempMoni.WaterTempMoni2 = field.NewFloat32(tableName, "water_temp_moni2")
	_waterTempMoni.WaterTempMoni3 = field.NewFloat32(tableName, "water_temp_moni3")
	_waterTempMoni.WaterTempMoni4 = field.NewFloat32(tableName, "water_temp_moni4")
	_waterTempMoni.WaterTempMoni5 = field.NewFloat32(tableName, "water_temp_moni5")
	_waterTempMoni.WaterTempMoni6 = field.NewFloat32(tableName, "water_temp_moni6")

	_waterTempMoni.fillFieldMap()

	return _waterTempMoni
}

type waterTempMoni struct {
	waterTempMoniDo waterTempMoniDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	SlaInfoMonID   field.Uint
	WaterTempMoni1 field.Float32
	WaterTempMoni2 field.Float32
	WaterTempMoni3 field.Float32
	WaterTempMoni4 field.Float32
	WaterTempMoni5 field.Float32
	WaterTempMoni6 field.Float32

	fieldMap map[string]field.Expr
}

func (w waterTempMoni) Table(newTableName string) *waterTempMoni {
	w.waterTempMoniDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w waterTempMoni) As(alias string) *waterTempMoni {
	w.waterTempMoniDo.DO = *(w.waterTempMoniDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *waterTempMoni) updateTableName(table string) *waterTempMoni {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewUint(table, "id")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")
	w.SlaInfoMonID = field.NewUint(table, "sla_info_mon_id")
	w.WaterTempMoni1 = field.NewFloat32(table, "water_temp_moni1")
	w.WaterTempMoni2 = field.NewFloat32(table, "water_temp_moni2")
	w.WaterTempMoni3 = field.NewFloat32(table, "water_temp_moni3")
	w.WaterTempMoni4 = field.NewFloat32(table, "water_temp_moni4")
	w.WaterTempMoni5 = field.NewFloat32(table, "water_temp_moni5")
	w.WaterTempMoni6 = field.NewFloat32(table, "water_temp_moni6")

	w.fillFieldMap()

	return w
}

func (w *waterTempMoni) WithContext(ctx context.Context) IWaterTempMoniDo {
	return w.waterTempMoniDo.WithContext(ctx)
}

func (w waterTempMoni) TableName() string { return w.waterTempMoniDo.TableName() }

func (w waterTempMoni) Alias() string { return w.waterTempMoniDo.Alias() }

func (w waterTempMoni) Columns(cols ...field.Expr) gen.Columns {
	return w.waterTempMoniDo.Columns(cols...)
}

func (w *waterTempMoni) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *waterTempMoni) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["sla_info_mon_id"] = w.SlaInfoMonID
	w.fieldMap["water_temp_moni1"] = w.WaterTempMoni1
	w.fieldMap["water_temp_moni2"] = w.WaterTempMoni2
	w.fieldMap["water_temp_moni3"] = w.WaterTempMoni3
	w.fieldMap["water_temp_moni4"] = w.WaterTempMoni4
	w.fieldMap["water_temp_moni5"] = w.WaterTempMoni5
	w.fieldMap["water_temp_moni6"] = w.WaterTempMoni6
}

func (w waterTempMoni) clone(db *gorm.DB) waterTempMoni {
	w.waterTempMoniDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w waterTempMoni) replaceDB(db *gorm.DB) waterTempMoni {
	w.waterTempMoniDo.ReplaceDB(db)
	return w
}

type waterTempMoniDo struct{ gen.DO }

type IWaterTempMoniDo interface {
	gen.SubQuery
	Debug() IWaterTempMoniDo
	WithContext(ctx context.Context) IWaterTempMoniDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWaterTempMoniDo
	WriteDB() IWaterTempMoniDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWaterTempMoniDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWaterTempMoniDo
	Not(conds ...gen.Condition) IWaterTempMoniDo
	Or(conds ...gen.Condition) IWaterTempMoniDo
	Select(conds ...field.Expr) IWaterTempMoniDo
	Where(conds ...gen.Condition) IWaterTempMoniDo
	Order(conds ...field.Expr) IWaterTempMoniDo
	Distinct(cols ...field.Expr) IWaterTempMoniDo
	Omit(cols ...field.Expr) IWaterTempMoniDo
	Join(table schema.Tabler, on ...field.Expr) IWaterTempMoniDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWaterTempMoniDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWaterTempMoniDo
	Group(cols ...field.Expr) IWaterTempMoniDo
	Having(conds ...gen.Condition) IWaterTempMoniDo
	Limit(limit int) IWaterTempMoniDo
	Offset(offset int) IWaterTempMoniDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWaterTempMoniDo
	Unscoped() IWaterTempMoniDo
	Create(values ...*slaughter.WaterTempMoni) error
	CreateInBatches(values []*slaughter.WaterTempMoni, batchSize int) error
	Save(values ...*slaughter.WaterTempMoni) error
	First() (*slaughter.WaterTempMoni, error)
	Take() (*slaughter.WaterTempMoni, error)
	Last() (*slaughter.WaterTempMoni, error)
	Find() ([]*slaughter.WaterTempMoni, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.WaterTempMoni, err error)
	FindInBatches(result *[]*slaughter.WaterTempMoni, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.WaterTempMoni) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWaterTempMoniDo
	Assign(attrs ...field.AssignExpr) IWaterTempMoniDo
	Joins(fields ...field.RelationField) IWaterTempMoniDo
	Preload(fields ...field.RelationField) IWaterTempMoniDo
	FirstOrInit() (*slaughter.WaterTempMoni, error)
	FirstOrCreate() (*slaughter.WaterTempMoni, error)
	FindByPage(offset int, limit int) (result []*slaughter.WaterTempMoni, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWaterTempMoniDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w waterTempMoniDo) Debug() IWaterTempMoniDo {
	return w.withDO(w.DO.Debug())
}

func (w waterTempMoniDo) WithContext(ctx context.Context) IWaterTempMoniDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w waterTempMoniDo) ReadDB() IWaterTempMoniDo {
	return w.Clauses(dbresolver.Read)
}

func (w waterTempMoniDo) WriteDB() IWaterTempMoniDo {
	return w.Clauses(dbresolver.Write)
}

func (w waterTempMoniDo) Session(config *gorm.Session) IWaterTempMoniDo {
	return w.withDO(w.DO.Session(config))
}

func (w waterTempMoniDo) Clauses(conds ...clause.Expression) IWaterTempMoniDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w waterTempMoniDo) Returning(value interface{}, columns ...string) IWaterTempMoniDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w waterTempMoniDo) Not(conds ...gen.Condition) IWaterTempMoniDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w waterTempMoniDo) Or(conds ...gen.Condition) IWaterTempMoniDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w waterTempMoniDo) Select(conds ...field.Expr) IWaterTempMoniDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w waterTempMoniDo) Where(conds ...gen.Condition) IWaterTempMoniDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w waterTempMoniDo) Order(conds ...field.Expr) IWaterTempMoniDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w waterTempMoniDo) Distinct(cols ...field.Expr) IWaterTempMoniDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w waterTempMoniDo) Omit(cols ...field.Expr) IWaterTempMoniDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w waterTempMoniDo) Join(table schema.Tabler, on ...field.Expr) IWaterTempMoniDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w waterTempMoniDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWaterTempMoniDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w waterTempMoniDo) RightJoin(table schema.Tabler, on ...field.Expr) IWaterTempMoniDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w waterTempMoniDo) Group(cols ...field.Expr) IWaterTempMoniDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w waterTempMoniDo) Having(conds ...gen.Condition) IWaterTempMoniDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w waterTempMoniDo) Limit(limit int) IWaterTempMoniDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w waterTempMoniDo) Offset(offset int) IWaterTempMoniDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w waterTempMoniDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWaterTempMoniDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w waterTempMoniDo) Unscoped() IWaterTempMoniDo {
	return w.withDO(w.DO.Unscoped())
}

func (w waterTempMoniDo) Create(values ...*slaughter.WaterTempMoni) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w waterTempMoniDo) CreateInBatches(values []*slaughter.WaterTempMoni, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w waterTempMoniDo) Save(values ...*slaughter.WaterTempMoni) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w waterTempMoniDo) First() (*slaughter.WaterTempMoni, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.WaterTempMoni), nil
	}
}

func (w waterTempMoniDo) Take() (*slaughter.WaterTempMoni, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.WaterTempMoni), nil
	}
}

func (w waterTempMoniDo) Last() (*slaughter.WaterTempMoni, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.WaterTempMoni), nil
	}
}

func (w waterTempMoniDo) Find() ([]*slaughter.WaterTempMoni, error) {
	result, err := w.DO.Find()
	return result.([]*slaughter.WaterTempMoni), err
}

func (w waterTempMoniDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.WaterTempMoni, err error) {
	buf := make([]*slaughter.WaterTempMoni, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w waterTempMoniDo) FindInBatches(result *[]*slaughter.WaterTempMoni, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w waterTempMoniDo) Attrs(attrs ...field.AssignExpr) IWaterTempMoniDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w waterTempMoniDo) Assign(attrs ...field.AssignExpr) IWaterTempMoniDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w waterTempMoniDo) Joins(fields ...field.RelationField) IWaterTempMoniDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w waterTempMoniDo) Preload(fields ...field.RelationField) IWaterTempMoniDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w waterTempMoniDo) FirstOrInit() (*slaughter.WaterTempMoni, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.WaterTempMoni), nil
	}
}

func (w waterTempMoniDo) FirstOrCreate() (*slaughter.WaterTempMoni, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.WaterTempMoni), nil
	}
}

func (w waterTempMoniDo) FindByPage(offset int, limit int) (result []*slaughter.WaterTempMoni, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w waterTempMoniDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w waterTempMoniDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w waterTempMoniDo) Delete(models ...*slaughter.WaterTempMoni) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *waterTempMoniDo) withDO(do gen.Dao) *waterTempMoniDo {
	w.DO = *do.(*gen.DO)
	return w
}
