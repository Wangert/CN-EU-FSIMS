// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/premortem"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPreSlaPicAndEn(db *gorm.DB, opts ...gen.DOOption) preSlaPicAndEn {
	_preSlaPicAndEn := preSlaPicAndEn{}

	_preSlaPicAndEn.preSlaPicAndEnDo.UseDB(db, opts...)
	_preSlaPicAndEn.preSlaPicAndEnDo.UseModel(&premortem.PreSlaPicAndEn{})

	tableName := _preSlaPicAndEn.preSlaPicAndEnDo.TableName()
	_preSlaPicAndEn.ALL = field.NewAsterisk(tableName)
	_preSlaPicAndEn.ID = field.NewUint(tableName, "id")
	_preSlaPicAndEn.CreatedAt = field.NewTime(tableName, "created_at")
	_preSlaPicAndEn.UpdatedAt = field.NewTime(tableName, "updated_at")
	_preSlaPicAndEn.DeletedAt = field.NewField(tableName, "deleted_at")
	_preSlaPicAndEn.PreSlaInfoRecID = field.NewUint(tableName, "pre_sla_info_rec_id")
	_preSlaPicAndEn.PreSlaPicAndEn1 = field.NewString(tableName, "pre_sla_pic_and_en1")
	_preSlaPicAndEn.PreSlaPicAndEn2 = field.NewString(tableName, "pre_sla_pic_and_en2")
	_preSlaPicAndEn.PreSlaPicAndEn3 = field.NewString(tableName, "pre_sla_pic_and_en3")
	_preSlaPicAndEn.PreSlaPicAndEn4 = field.NewString(tableName, "pre_sla_pic_and_en4")
	_preSlaPicAndEn.PreSlaPicAndEn5 = field.NewString(tableName, "pre_sla_pic_and_en5")
	_preSlaPicAndEn.PreSlaPicAndEn6 = field.NewString(tableName, "pre_sla_pic_and_en6")

	_preSlaPicAndEn.fillFieldMap()

	return _preSlaPicAndEn
}

type preSlaPicAndEn struct {
	preSlaPicAndEnDo preSlaPicAndEnDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	PreSlaInfoRecID field.Uint
	PreSlaPicAndEn1 field.String
	PreSlaPicAndEn2 field.String
	PreSlaPicAndEn3 field.String
	PreSlaPicAndEn4 field.String
	PreSlaPicAndEn5 field.String
	PreSlaPicAndEn6 field.String

	fieldMap map[string]field.Expr
}

func (p preSlaPicAndEn) Table(newTableName string) *preSlaPicAndEn {
	p.preSlaPicAndEnDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p preSlaPicAndEn) As(alias string) *preSlaPicAndEn {
	p.preSlaPicAndEnDo.DO = *(p.preSlaPicAndEnDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *preSlaPicAndEn) updateTableName(table string) *preSlaPicAndEn {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PreSlaInfoRecID = field.NewUint(table, "pre_sla_info_rec_id")
	p.PreSlaPicAndEn1 = field.NewString(table, "pre_sla_pic_and_en1")
	p.PreSlaPicAndEn2 = field.NewString(table, "pre_sla_pic_and_en2")
	p.PreSlaPicAndEn3 = field.NewString(table, "pre_sla_pic_and_en3")
	p.PreSlaPicAndEn4 = field.NewString(table, "pre_sla_pic_and_en4")
	p.PreSlaPicAndEn5 = field.NewString(table, "pre_sla_pic_and_en5")
	p.PreSlaPicAndEn6 = field.NewString(table, "pre_sla_pic_and_en6")

	p.fillFieldMap()

	return p
}

func (p *preSlaPicAndEn) WithContext(ctx context.Context) IPreSlaPicAndEnDo {
	return p.preSlaPicAndEnDo.WithContext(ctx)
}

func (p preSlaPicAndEn) TableName() string { return p.preSlaPicAndEnDo.TableName() }

func (p preSlaPicAndEn) Alias() string { return p.preSlaPicAndEnDo.Alias() }

func (p preSlaPicAndEn) Columns(cols ...field.Expr) gen.Columns {
	return p.preSlaPicAndEnDo.Columns(cols...)
}

func (p *preSlaPicAndEn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *preSlaPicAndEn) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["pre_sla_info_rec_id"] = p.PreSlaInfoRecID
	p.fieldMap["pre_sla_pic_and_en1"] = p.PreSlaPicAndEn1
	p.fieldMap["pre_sla_pic_and_en2"] = p.PreSlaPicAndEn2
	p.fieldMap["pre_sla_pic_and_en3"] = p.PreSlaPicAndEn3
	p.fieldMap["pre_sla_pic_and_en4"] = p.PreSlaPicAndEn4
	p.fieldMap["pre_sla_pic_and_en5"] = p.PreSlaPicAndEn5
	p.fieldMap["pre_sla_pic_and_en6"] = p.PreSlaPicAndEn6
}

func (p preSlaPicAndEn) clone(db *gorm.DB) preSlaPicAndEn {
	p.preSlaPicAndEnDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p preSlaPicAndEn) replaceDB(db *gorm.DB) preSlaPicAndEn {
	p.preSlaPicAndEnDo.ReplaceDB(db)
	return p
}

type preSlaPicAndEnDo struct{ gen.DO }

type IPreSlaPicAndEnDo interface {
	gen.SubQuery
	Debug() IPreSlaPicAndEnDo
	WithContext(ctx context.Context) IPreSlaPicAndEnDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPreSlaPicAndEnDo
	WriteDB() IPreSlaPicAndEnDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPreSlaPicAndEnDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPreSlaPicAndEnDo
	Not(conds ...gen.Condition) IPreSlaPicAndEnDo
	Or(conds ...gen.Condition) IPreSlaPicAndEnDo
	Select(conds ...field.Expr) IPreSlaPicAndEnDo
	Where(conds ...gen.Condition) IPreSlaPicAndEnDo
	Order(conds ...field.Expr) IPreSlaPicAndEnDo
	Distinct(cols ...field.Expr) IPreSlaPicAndEnDo
	Omit(cols ...field.Expr) IPreSlaPicAndEnDo
	Join(table schema.Tabler, on ...field.Expr) IPreSlaPicAndEnDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPreSlaPicAndEnDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPreSlaPicAndEnDo
	Group(cols ...field.Expr) IPreSlaPicAndEnDo
	Having(conds ...gen.Condition) IPreSlaPicAndEnDo
	Limit(limit int) IPreSlaPicAndEnDo
	Offset(offset int) IPreSlaPicAndEnDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPreSlaPicAndEnDo
	Unscoped() IPreSlaPicAndEnDo
	Create(values ...*premortem.PreSlaPicAndEn) error
	CreateInBatches(values []*premortem.PreSlaPicAndEn, batchSize int) error
	Save(values ...*premortem.PreSlaPicAndEn) error
	First() (*premortem.PreSlaPicAndEn, error)
	Take() (*premortem.PreSlaPicAndEn, error)
	Last() (*premortem.PreSlaPicAndEn, error)
	Find() ([]*premortem.PreSlaPicAndEn, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*premortem.PreSlaPicAndEn, err error)
	FindInBatches(result *[]*premortem.PreSlaPicAndEn, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*premortem.PreSlaPicAndEn) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPreSlaPicAndEnDo
	Assign(attrs ...field.AssignExpr) IPreSlaPicAndEnDo
	Joins(fields ...field.RelationField) IPreSlaPicAndEnDo
	Preload(fields ...field.RelationField) IPreSlaPicAndEnDo
	FirstOrInit() (*premortem.PreSlaPicAndEn, error)
	FirstOrCreate() (*premortem.PreSlaPicAndEn, error)
	FindByPage(offset int, limit int) (result []*premortem.PreSlaPicAndEn, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPreSlaPicAndEnDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p preSlaPicAndEnDo) Debug() IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Debug())
}

func (p preSlaPicAndEnDo) WithContext(ctx context.Context) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p preSlaPicAndEnDo) ReadDB() IPreSlaPicAndEnDo {
	return p.Clauses(dbresolver.Read)
}

func (p preSlaPicAndEnDo) WriteDB() IPreSlaPicAndEnDo {
	return p.Clauses(dbresolver.Write)
}

func (p preSlaPicAndEnDo) Session(config *gorm.Session) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Session(config))
}

func (p preSlaPicAndEnDo) Clauses(conds ...clause.Expression) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p preSlaPicAndEnDo) Returning(value interface{}, columns ...string) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p preSlaPicAndEnDo) Not(conds ...gen.Condition) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p preSlaPicAndEnDo) Or(conds ...gen.Condition) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p preSlaPicAndEnDo) Select(conds ...field.Expr) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p preSlaPicAndEnDo) Where(conds ...gen.Condition) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p preSlaPicAndEnDo) Order(conds ...field.Expr) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p preSlaPicAndEnDo) Distinct(cols ...field.Expr) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p preSlaPicAndEnDo) Omit(cols ...field.Expr) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p preSlaPicAndEnDo) Join(table schema.Tabler, on ...field.Expr) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p preSlaPicAndEnDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p preSlaPicAndEnDo) RightJoin(table schema.Tabler, on ...field.Expr) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p preSlaPicAndEnDo) Group(cols ...field.Expr) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p preSlaPicAndEnDo) Having(conds ...gen.Condition) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p preSlaPicAndEnDo) Limit(limit int) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p preSlaPicAndEnDo) Offset(offset int) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p preSlaPicAndEnDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p preSlaPicAndEnDo) Unscoped() IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Unscoped())
}

func (p preSlaPicAndEnDo) Create(values ...*premortem.PreSlaPicAndEn) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p preSlaPicAndEnDo) CreateInBatches(values []*premortem.PreSlaPicAndEn, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p preSlaPicAndEnDo) Save(values ...*premortem.PreSlaPicAndEn) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p preSlaPicAndEnDo) First() (*premortem.PreSlaPicAndEn, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaPicAndEn), nil
	}
}

func (p preSlaPicAndEnDo) Take() (*premortem.PreSlaPicAndEn, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaPicAndEn), nil
	}
}

func (p preSlaPicAndEnDo) Last() (*premortem.PreSlaPicAndEn, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaPicAndEn), nil
	}
}

func (p preSlaPicAndEnDo) Find() ([]*premortem.PreSlaPicAndEn, error) {
	result, err := p.DO.Find()
	return result.([]*premortem.PreSlaPicAndEn), err
}

func (p preSlaPicAndEnDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*premortem.PreSlaPicAndEn, err error) {
	buf := make([]*premortem.PreSlaPicAndEn, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p preSlaPicAndEnDo) FindInBatches(result *[]*premortem.PreSlaPicAndEn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p preSlaPicAndEnDo) Attrs(attrs ...field.AssignExpr) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p preSlaPicAndEnDo) Assign(attrs ...field.AssignExpr) IPreSlaPicAndEnDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p preSlaPicAndEnDo) Joins(fields ...field.RelationField) IPreSlaPicAndEnDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p preSlaPicAndEnDo) Preload(fields ...field.RelationField) IPreSlaPicAndEnDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p preSlaPicAndEnDo) FirstOrInit() (*premortem.PreSlaPicAndEn, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaPicAndEn), nil
	}
}

func (p preSlaPicAndEnDo) FirstOrCreate() (*premortem.PreSlaPicAndEn, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaPicAndEn), nil
	}
}

func (p preSlaPicAndEnDo) FindByPage(offset int, limit int) (result []*premortem.PreSlaPicAndEn, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p preSlaPicAndEnDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p preSlaPicAndEnDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p preSlaPicAndEnDo) Delete(models ...*premortem.PreSlaPicAndEn) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *preSlaPicAndEnDo) withDO(do gen.Dao) *preSlaPicAndEnDo {
	p.DO = *do.(*gen.DO)
	return p
}
