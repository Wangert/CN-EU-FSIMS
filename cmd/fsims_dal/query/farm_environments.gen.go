// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFarmEnvironment(db *gorm.DB, opts ...gen.DOOption) farmEnvironment {
	_farmEnvironment := farmEnvironment{}

	_farmEnvironment.farmEnvironmentDo.UseDB(db, opts...)
	_farmEnvironment.farmEnvironmentDo.UseModel(&pasture.FarmEnvironment{})

	tableName := _farmEnvironment.farmEnvironmentDo.TableName()
	_farmEnvironment.ALL = field.NewAsterisk(tableName)
	_farmEnvironment.ID = field.NewUint(tableName, "id")
	_farmEnvironment.CreatedAt = field.NewTime(tableName, "created_at")
	_farmEnvironment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_farmEnvironment.DeletedAt = field.NewField(tableName, "deleted_at")
	_farmEnvironment.TimeRecordAt = field.NewString(tableName, "time_record_at")
	_farmEnvironment.Buffer = farmEnvironmentHasOneBuffer{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Buffer", "pasture.Buffer"),
	}

	_farmEnvironment.CattleFarm = farmEnvironmentHasOneCattleFarm{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("CattleFarm", "pasture.CattleFarm"),
	}

	_farmEnvironment.Environment = farmEnvironmentHasOneEnvironment{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Environment", "pasture.Environment"),
	}

	_farmEnvironment.PaddingRequire = farmEnvironmentHasOnePaddingRequire{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PaddingRequire", "pasture.PaddingRequire"),
	}

	_farmEnvironment.WastedWaterIndex = farmEnvironmentHasOneWastedWaterIndex{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("WastedWaterIndex", "pasture.WastedWaterIndex"),
	}

	_farmEnvironment.FarmDisRecord = farmEnvironmentHasOneFarmDisRecord{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("FarmDisRecord", "pasture.FarmDisRecord"),
	}

	_farmEnvironment.fillFieldMap()

	return _farmEnvironment
}

type farmEnvironment struct {
	farmEnvironmentDo farmEnvironmentDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	TimeRecordAt field.String
	Buffer       farmEnvironmentHasOneBuffer

	CattleFarm farmEnvironmentHasOneCattleFarm

	Environment farmEnvironmentHasOneEnvironment

	PaddingRequire farmEnvironmentHasOnePaddingRequire

	WastedWaterIndex farmEnvironmentHasOneWastedWaterIndex

	FarmDisRecord farmEnvironmentHasOneFarmDisRecord

	fieldMap map[string]field.Expr
}

func (f farmEnvironment) Table(newTableName string) *farmEnvironment {
	f.farmEnvironmentDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f farmEnvironment) As(alias string) *farmEnvironment {
	f.farmEnvironmentDo.DO = *(f.farmEnvironmentDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *farmEnvironment) updateTableName(table string) *farmEnvironment {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.TimeRecordAt = field.NewString(table, "time_record_at")

	f.fillFieldMap()

	return f
}

func (f *farmEnvironment) WithContext(ctx context.Context) IFarmEnvironmentDo {
	return f.farmEnvironmentDo.WithContext(ctx)
}

func (f farmEnvironment) TableName() string { return f.farmEnvironmentDo.TableName() }

func (f farmEnvironment) Alias() string { return f.farmEnvironmentDo.Alias() }

func (f farmEnvironment) Columns(cols ...field.Expr) gen.Columns {
	return f.farmEnvironmentDo.Columns(cols...)
}

func (f *farmEnvironment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *farmEnvironment) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["time_record_at"] = f.TimeRecordAt

}

func (f farmEnvironment) clone(db *gorm.DB) farmEnvironment {
	f.farmEnvironmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f farmEnvironment) replaceDB(db *gorm.DB) farmEnvironment {
	f.farmEnvironmentDo.ReplaceDB(db)
	return f
}

type farmEnvironmentHasOneBuffer struct {
	db *gorm.DB

	field.RelationField
}

func (a farmEnvironmentHasOneBuffer) Where(conds ...field.Expr) *farmEnvironmentHasOneBuffer {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a farmEnvironmentHasOneBuffer) WithContext(ctx context.Context) *farmEnvironmentHasOneBuffer {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a farmEnvironmentHasOneBuffer) Session(session *gorm.Session) *farmEnvironmentHasOneBuffer {
	a.db = a.db.Session(session)
	return &a
}

func (a farmEnvironmentHasOneBuffer) Model(m *pasture.FarmEnvironment) *farmEnvironmentHasOneBufferTx {
	return &farmEnvironmentHasOneBufferTx{a.db.Model(m).Association(a.Name())}
}

type farmEnvironmentHasOneBufferTx struct{ tx *gorm.Association }

func (a farmEnvironmentHasOneBufferTx) Find() (result *pasture.Buffer, err error) {
	return result, a.tx.Find(&result)
}

func (a farmEnvironmentHasOneBufferTx) Append(values ...*pasture.Buffer) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a farmEnvironmentHasOneBufferTx) Replace(values ...*pasture.Buffer) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a farmEnvironmentHasOneBufferTx) Delete(values ...*pasture.Buffer) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a farmEnvironmentHasOneBufferTx) Clear() error {
	return a.tx.Clear()
}

func (a farmEnvironmentHasOneBufferTx) Count() int64 {
	return a.tx.Count()
}

type farmEnvironmentHasOneCattleFarm struct {
	db *gorm.DB

	field.RelationField
}

func (a farmEnvironmentHasOneCattleFarm) Where(conds ...field.Expr) *farmEnvironmentHasOneCattleFarm {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a farmEnvironmentHasOneCattleFarm) WithContext(ctx context.Context) *farmEnvironmentHasOneCattleFarm {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a farmEnvironmentHasOneCattleFarm) Session(session *gorm.Session) *farmEnvironmentHasOneCattleFarm {
	a.db = a.db.Session(session)
	return &a
}

func (a farmEnvironmentHasOneCattleFarm) Model(m *pasture.FarmEnvironment) *farmEnvironmentHasOneCattleFarmTx {
	return &farmEnvironmentHasOneCattleFarmTx{a.db.Model(m).Association(a.Name())}
}

type farmEnvironmentHasOneCattleFarmTx struct{ tx *gorm.Association }

func (a farmEnvironmentHasOneCattleFarmTx) Find() (result *pasture.CattleFarm, err error) {
	return result, a.tx.Find(&result)
}

func (a farmEnvironmentHasOneCattleFarmTx) Append(values ...*pasture.CattleFarm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a farmEnvironmentHasOneCattleFarmTx) Replace(values ...*pasture.CattleFarm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a farmEnvironmentHasOneCattleFarmTx) Delete(values ...*pasture.CattleFarm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a farmEnvironmentHasOneCattleFarmTx) Clear() error {
	return a.tx.Clear()
}

func (a farmEnvironmentHasOneCattleFarmTx) Count() int64 {
	return a.tx.Count()
}

type farmEnvironmentHasOneEnvironment struct {
	db *gorm.DB

	field.RelationField
}

func (a farmEnvironmentHasOneEnvironment) Where(conds ...field.Expr) *farmEnvironmentHasOneEnvironment {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a farmEnvironmentHasOneEnvironment) WithContext(ctx context.Context) *farmEnvironmentHasOneEnvironment {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a farmEnvironmentHasOneEnvironment) Session(session *gorm.Session) *farmEnvironmentHasOneEnvironment {
	a.db = a.db.Session(session)
	return &a
}

func (a farmEnvironmentHasOneEnvironment) Model(m *pasture.FarmEnvironment) *farmEnvironmentHasOneEnvironmentTx {
	return &farmEnvironmentHasOneEnvironmentTx{a.db.Model(m).Association(a.Name())}
}

type farmEnvironmentHasOneEnvironmentTx struct{ tx *gorm.Association }

func (a farmEnvironmentHasOneEnvironmentTx) Find() (result *pasture.Environment, err error) {
	return result, a.tx.Find(&result)
}

func (a farmEnvironmentHasOneEnvironmentTx) Append(values ...*pasture.Environment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a farmEnvironmentHasOneEnvironmentTx) Replace(values ...*pasture.Environment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a farmEnvironmentHasOneEnvironmentTx) Delete(values ...*pasture.Environment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a farmEnvironmentHasOneEnvironmentTx) Clear() error {
	return a.tx.Clear()
}

func (a farmEnvironmentHasOneEnvironmentTx) Count() int64 {
	return a.tx.Count()
}

type farmEnvironmentHasOnePaddingRequire struct {
	db *gorm.DB

	field.RelationField
}

func (a farmEnvironmentHasOnePaddingRequire) Where(conds ...field.Expr) *farmEnvironmentHasOnePaddingRequire {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a farmEnvironmentHasOnePaddingRequire) WithContext(ctx context.Context) *farmEnvironmentHasOnePaddingRequire {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a farmEnvironmentHasOnePaddingRequire) Session(session *gorm.Session) *farmEnvironmentHasOnePaddingRequire {
	a.db = a.db.Session(session)
	return &a
}

func (a farmEnvironmentHasOnePaddingRequire) Model(m *pasture.FarmEnvironment) *farmEnvironmentHasOnePaddingRequireTx {
	return &farmEnvironmentHasOnePaddingRequireTx{a.db.Model(m).Association(a.Name())}
}

type farmEnvironmentHasOnePaddingRequireTx struct{ tx *gorm.Association }

func (a farmEnvironmentHasOnePaddingRequireTx) Find() (result *pasture.PaddingRequire, err error) {
	return result, a.tx.Find(&result)
}

func (a farmEnvironmentHasOnePaddingRequireTx) Append(values ...*pasture.PaddingRequire) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a farmEnvironmentHasOnePaddingRequireTx) Replace(values ...*pasture.PaddingRequire) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a farmEnvironmentHasOnePaddingRequireTx) Delete(values ...*pasture.PaddingRequire) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a farmEnvironmentHasOnePaddingRequireTx) Clear() error {
	return a.tx.Clear()
}

func (a farmEnvironmentHasOnePaddingRequireTx) Count() int64 {
	return a.tx.Count()
}

type farmEnvironmentHasOneWastedWaterIndex struct {
	db *gorm.DB

	field.RelationField
}

func (a farmEnvironmentHasOneWastedWaterIndex) Where(conds ...field.Expr) *farmEnvironmentHasOneWastedWaterIndex {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a farmEnvironmentHasOneWastedWaterIndex) WithContext(ctx context.Context) *farmEnvironmentHasOneWastedWaterIndex {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a farmEnvironmentHasOneWastedWaterIndex) Session(session *gorm.Session) *farmEnvironmentHasOneWastedWaterIndex {
	a.db = a.db.Session(session)
	return &a
}

func (a farmEnvironmentHasOneWastedWaterIndex) Model(m *pasture.FarmEnvironment) *farmEnvironmentHasOneWastedWaterIndexTx {
	return &farmEnvironmentHasOneWastedWaterIndexTx{a.db.Model(m).Association(a.Name())}
}

type farmEnvironmentHasOneWastedWaterIndexTx struct{ tx *gorm.Association }

func (a farmEnvironmentHasOneWastedWaterIndexTx) Find() (result *pasture.WastedWaterIndex, err error) {
	return result, a.tx.Find(&result)
}

func (a farmEnvironmentHasOneWastedWaterIndexTx) Append(values ...*pasture.WastedWaterIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a farmEnvironmentHasOneWastedWaterIndexTx) Replace(values ...*pasture.WastedWaterIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a farmEnvironmentHasOneWastedWaterIndexTx) Delete(values ...*pasture.WastedWaterIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a farmEnvironmentHasOneWastedWaterIndexTx) Clear() error {
	return a.tx.Clear()
}

func (a farmEnvironmentHasOneWastedWaterIndexTx) Count() int64 {
	return a.tx.Count()
}

type farmEnvironmentHasOneFarmDisRecord struct {
	db *gorm.DB

	field.RelationField
}

func (a farmEnvironmentHasOneFarmDisRecord) Where(conds ...field.Expr) *farmEnvironmentHasOneFarmDisRecord {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a farmEnvironmentHasOneFarmDisRecord) WithContext(ctx context.Context) *farmEnvironmentHasOneFarmDisRecord {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a farmEnvironmentHasOneFarmDisRecord) Session(session *gorm.Session) *farmEnvironmentHasOneFarmDisRecord {
	a.db = a.db.Session(session)
	return &a
}

func (a farmEnvironmentHasOneFarmDisRecord) Model(m *pasture.FarmEnvironment) *farmEnvironmentHasOneFarmDisRecordTx {
	return &farmEnvironmentHasOneFarmDisRecordTx{a.db.Model(m).Association(a.Name())}
}

type farmEnvironmentHasOneFarmDisRecordTx struct{ tx *gorm.Association }

func (a farmEnvironmentHasOneFarmDisRecordTx) Find() (result *pasture.FarmDisRecord, err error) {
	return result, a.tx.Find(&result)
}

func (a farmEnvironmentHasOneFarmDisRecordTx) Append(values ...*pasture.FarmDisRecord) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a farmEnvironmentHasOneFarmDisRecordTx) Replace(values ...*pasture.FarmDisRecord) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a farmEnvironmentHasOneFarmDisRecordTx) Delete(values ...*pasture.FarmDisRecord) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a farmEnvironmentHasOneFarmDisRecordTx) Clear() error {
	return a.tx.Clear()
}

func (a farmEnvironmentHasOneFarmDisRecordTx) Count() int64 {
	return a.tx.Count()
}

type farmEnvironmentDo struct{ gen.DO }

type IFarmEnvironmentDo interface {
	gen.SubQuery
	Debug() IFarmEnvironmentDo
	WithContext(ctx context.Context) IFarmEnvironmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFarmEnvironmentDo
	WriteDB() IFarmEnvironmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFarmEnvironmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFarmEnvironmentDo
	Not(conds ...gen.Condition) IFarmEnvironmentDo
	Or(conds ...gen.Condition) IFarmEnvironmentDo
	Select(conds ...field.Expr) IFarmEnvironmentDo
	Where(conds ...gen.Condition) IFarmEnvironmentDo
	Order(conds ...field.Expr) IFarmEnvironmentDo
	Distinct(cols ...field.Expr) IFarmEnvironmentDo
	Omit(cols ...field.Expr) IFarmEnvironmentDo
	Join(table schema.Tabler, on ...field.Expr) IFarmEnvironmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFarmEnvironmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFarmEnvironmentDo
	Group(cols ...field.Expr) IFarmEnvironmentDo
	Having(conds ...gen.Condition) IFarmEnvironmentDo
	Limit(limit int) IFarmEnvironmentDo
	Offset(offset int) IFarmEnvironmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFarmEnvironmentDo
	Unscoped() IFarmEnvironmentDo
	Create(values ...*pasture.FarmEnvironment) error
	CreateInBatches(values []*pasture.FarmEnvironment, batchSize int) error
	Save(values ...*pasture.FarmEnvironment) error
	First() (*pasture.FarmEnvironment, error)
	Take() (*pasture.FarmEnvironment, error)
	Last() (*pasture.FarmEnvironment, error)
	Find() ([]*pasture.FarmEnvironment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.FarmEnvironment, err error)
	FindInBatches(result *[]*pasture.FarmEnvironment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.FarmEnvironment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFarmEnvironmentDo
	Assign(attrs ...field.AssignExpr) IFarmEnvironmentDo
	Joins(fields ...field.RelationField) IFarmEnvironmentDo
	Preload(fields ...field.RelationField) IFarmEnvironmentDo
	FirstOrInit() (*pasture.FarmEnvironment, error)
	FirstOrCreate() (*pasture.FarmEnvironment, error)
	FindByPage(offset int, limit int) (result []*pasture.FarmEnvironment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFarmEnvironmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f farmEnvironmentDo) Debug() IFarmEnvironmentDo {
	return f.withDO(f.DO.Debug())
}

func (f farmEnvironmentDo) WithContext(ctx context.Context) IFarmEnvironmentDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f farmEnvironmentDo) ReadDB() IFarmEnvironmentDo {
	return f.Clauses(dbresolver.Read)
}

func (f farmEnvironmentDo) WriteDB() IFarmEnvironmentDo {
	return f.Clauses(dbresolver.Write)
}

func (f farmEnvironmentDo) Session(config *gorm.Session) IFarmEnvironmentDo {
	return f.withDO(f.DO.Session(config))
}

func (f farmEnvironmentDo) Clauses(conds ...clause.Expression) IFarmEnvironmentDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f farmEnvironmentDo) Returning(value interface{}, columns ...string) IFarmEnvironmentDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f farmEnvironmentDo) Not(conds ...gen.Condition) IFarmEnvironmentDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f farmEnvironmentDo) Or(conds ...gen.Condition) IFarmEnvironmentDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f farmEnvironmentDo) Select(conds ...field.Expr) IFarmEnvironmentDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f farmEnvironmentDo) Where(conds ...gen.Condition) IFarmEnvironmentDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f farmEnvironmentDo) Order(conds ...field.Expr) IFarmEnvironmentDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f farmEnvironmentDo) Distinct(cols ...field.Expr) IFarmEnvironmentDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f farmEnvironmentDo) Omit(cols ...field.Expr) IFarmEnvironmentDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f farmEnvironmentDo) Join(table schema.Tabler, on ...field.Expr) IFarmEnvironmentDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f farmEnvironmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFarmEnvironmentDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f farmEnvironmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IFarmEnvironmentDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f farmEnvironmentDo) Group(cols ...field.Expr) IFarmEnvironmentDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f farmEnvironmentDo) Having(conds ...gen.Condition) IFarmEnvironmentDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f farmEnvironmentDo) Limit(limit int) IFarmEnvironmentDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f farmEnvironmentDo) Offset(offset int) IFarmEnvironmentDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f farmEnvironmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFarmEnvironmentDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f farmEnvironmentDo) Unscoped() IFarmEnvironmentDo {
	return f.withDO(f.DO.Unscoped())
}

func (f farmEnvironmentDo) Create(values ...*pasture.FarmEnvironment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f farmEnvironmentDo) CreateInBatches(values []*pasture.FarmEnvironment, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f farmEnvironmentDo) Save(values ...*pasture.FarmEnvironment) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f farmEnvironmentDo) First() (*pasture.FarmEnvironment, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.FarmEnvironment), nil
	}
}

func (f farmEnvironmentDo) Take() (*pasture.FarmEnvironment, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.FarmEnvironment), nil
	}
}

func (f farmEnvironmentDo) Last() (*pasture.FarmEnvironment, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.FarmEnvironment), nil
	}
}

func (f farmEnvironmentDo) Find() ([]*pasture.FarmEnvironment, error) {
	result, err := f.DO.Find()
	return result.([]*pasture.FarmEnvironment), err
}

func (f farmEnvironmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.FarmEnvironment, err error) {
	buf := make([]*pasture.FarmEnvironment, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f farmEnvironmentDo) FindInBatches(result *[]*pasture.FarmEnvironment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f farmEnvironmentDo) Attrs(attrs ...field.AssignExpr) IFarmEnvironmentDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f farmEnvironmentDo) Assign(attrs ...field.AssignExpr) IFarmEnvironmentDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f farmEnvironmentDo) Joins(fields ...field.RelationField) IFarmEnvironmentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f farmEnvironmentDo) Preload(fields ...field.RelationField) IFarmEnvironmentDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f farmEnvironmentDo) FirstOrInit() (*pasture.FarmEnvironment, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.FarmEnvironment), nil
	}
}

func (f farmEnvironmentDo) FirstOrCreate() (*pasture.FarmEnvironment, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.FarmEnvironment), nil
	}
}

func (f farmEnvironmentDo) FindByPage(offset int, limit int) (result []*pasture.FarmEnvironment, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f farmEnvironmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f farmEnvironmentDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f farmEnvironmentDo) Delete(models ...*pasture.FarmEnvironment) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *farmEnvironmentDo) withDO(do gen.Dao) *farmEnvironmentDo {
	f.DO = *do.(*gen.DO)
	return f
}
