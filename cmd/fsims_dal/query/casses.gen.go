// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCass(db *gorm.DB, opts ...gen.DOOption) cass {
	_cass := cass{}

	_cass.cassDo.UseDB(db, opts...)
	_cass.cassDo.UseModel(&pasture.Cass{})

	tableName := _cass.cassDo.TableName()
	_cass.ALL = field.NewAsterisk(tableName)
	_cass.ID = field.NewUint(tableName, "id")
	_cass.CreatedAt = field.NewTime(tableName, "created_at")
	_cass.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cass.DeletedAt = field.NewField(tableName, "deleted_at")
	_cass.TimeRecordAt = field.NewString(tableName, "time_record_at")
	_cass.Afb1 = cassHasOneAfb1{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Afb1", "pasture.Afb1"),
	}

	_cass.Don = cassHasOneDon{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Don", "pasture.Don"),
	}

	_cass.T2toxin = cassHasOneT2toxin{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("T2toxin", "pasture.T2toxin"),
	}

	_cass.T2VomZea = cassHasOneT2VomZea{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("T2VomZea", "pasture.T2VomZea"),
	}

	_cass.fillFieldMap()

	return _cass
}

type cass struct {
	cassDo cassDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	TimeRecordAt field.String
	Afb1         cassHasOneAfb1

	Don cassHasOneDon

	T2toxin cassHasOneT2toxin

	T2VomZea cassHasOneT2VomZea

	fieldMap map[string]field.Expr
}

func (c cass) Table(newTableName string) *cass {
	c.cassDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cass) As(alias string) *cass {
	c.cassDo.DO = *(c.cassDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cass) updateTableName(table string) *cass {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.TimeRecordAt = field.NewString(table, "time_record_at")

	c.fillFieldMap()

	return c
}

func (c *cass) WithContext(ctx context.Context) ICassDo { return c.cassDo.WithContext(ctx) }

func (c cass) TableName() string { return c.cassDo.TableName() }

func (c cass) Alias() string { return c.cassDo.Alias() }

func (c cass) Columns(cols ...field.Expr) gen.Columns { return c.cassDo.Columns(cols...) }

func (c *cass) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cass) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["time_record_at"] = c.TimeRecordAt

}

func (c cass) clone(db *gorm.DB) cass {
	c.cassDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cass) replaceDB(db *gorm.DB) cass {
	c.cassDo.ReplaceDB(db)
	return c
}

type cassHasOneAfb1 struct {
	db *gorm.DB

	field.RelationField
}

func (a cassHasOneAfb1) Where(conds ...field.Expr) *cassHasOneAfb1 {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cassHasOneAfb1) WithContext(ctx context.Context) *cassHasOneAfb1 {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cassHasOneAfb1) Session(session *gorm.Session) *cassHasOneAfb1 {
	a.db = a.db.Session(session)
	return &a
}

func (a cassHasOneAfb1) Model(m *pasture.Cass) *cassHasOneAfb1Tx {
	return &cassHasOneAfb1Tx{a.db.Model(m).Association(a.Name())}
}

type cassHasOneAfb1Tx struct{ tx *gorm.Association }

func (a cassHasOneAfb1Tx) Find() (result *pasture.Afb1, err error) {
	return result, a.tx.Find(&result)
}

func (a cassHasOneAfb1Tx) Append(values ...*pasture.Afb1) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cassHasOneAfb1Tx) Replace(values ...*pasture.Afb1) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cassHasOneAfb1Tx) Delete(values ...*pasture.Afb1) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cassHasOneAfb1Tx) Clear() error {
	return a.tx.Clear()
}

func (a cassHasOneAfb1Tx) Count() int64 {
	return a.tx.Count()
}

type cassHasOneDon struct {
	db *gorm.DB

	field.RelationField
}

func (a cassHasOneDon) Where(conds ...field.Expr) *cassHasOneDon {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cassHasOneDon) WithContext(ctx context.Context) *cassHasOneDon {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cassHasOneDon) Session(session *gorm.Session) *cassHasOneDon {
	a.db = a.db.Session(session)
	return &a
}

func (a cassHasOneDon) Model(m *pasture.Cass) *cassHasOneDonTx {
	return &cassHasOneDonTx{a.db.Model(m).Association(a.Name())}
}

type cassHasOneDonTx struct{ tx *gorm.Association }

func (a cassHasOneDonTx) Find() (result *pasture.Don, err error) {
	return result, a.tx.Find(&result)
}

func (a cassHasOneDonTx) Append(values ...*pasture.Don) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cassHasOneDonTx) Replace(values ...*pasture.Don) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cassHasOneDonTx) Delete(values ...*pasture.Don) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cassHasOneDonTx) Clear() error {
	return a.tx.Clear()
}

func (a cassHasOneDonTx) Count() int64 {
	return a.tx.Count()
}

type cassHasOneT2toxin struct {
	db *gorm.DB

	field.RelationField
}

func (a cassHasOneT2toxin) Where(conds ...field.Expr) *cassHasOneT2toxin {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cassHasOneT2toxin) WithContext(ctx context.Context) *cassHasOneT2toxin {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cassHasOneT2toxin) Session(session *gorm.Session) *cassHasOneT2toxin {
	a.db = a.db.Session(session)
	return &a
}

func (a cassHasOneT2toxin) Model(m *pasture.Cass) *cassHasOneT2toxinTx {
	return &cassHasOneT2toxinTx{a.db.Model(m).Association(a.Name())}
}

type cassHasOneT2toxinTx struct{ tx *gorm.Association }

func (a cassHasOneT2toxinTx) Find() (result *pasture.T2toxin, err error) {
	return result, a.tx.Find(&result)
}

func (a cassHasOneT2toxinTx) Append(values ...*pasture.T2toxin) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cassHasOneT2toxinTx) Replace(values ...*pasture.T2toxin) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cassHasOneT2toxinTx) Delete(values ...*pasture.T2toxin) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cassHasOneT2toxinTx) Clear() error {
	return a.tx.Clear()
}

func (a cassHasOneT2toxinTx) Count() int64 {
	return a.tx.Count()
}

type cassHasOneT2VomZea struct {
	db *gorm.DB

	field.RelationField
}

func (a cassHasOneT2VomZea) Where(conds ...field.Expr) *cassHasOneT2VomZea {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a cassHasOneT2VomZea) WithContext(ctx context.Context) *cassHasOneT2VomZea {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a cassHasOneT2VomZea) Session(session *gorm.Session) *cassHasOneT2VomZea {
	a.db = a.db.Session(session)
	return &a
}

func (a cassHasOneT2VomZea) Model(m *pasture.Cass) *cassHasOneT2VomZeaTx {
	return &cassHasOneT2VomZeaTx{a.db.Model(m).Association(a.Name())}
}

type cassHasOneT2VomZeaTx struct{ tx *gorm.Association }

func (a cassHasOneT2VomZeaTx) Find() (result *pasture.T2VomZea, err error) {
	return result, a.tx.Find(&result)
}

func (a cassHasOneT2VomZeaTx) Append(values ...*pasture.T2VomZea) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a cassHasOneT2VomZeaTx) Replace(values ...*pasture.T2VomZea) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a cassHasOneT2VomZeaTx) Delete(values ...*pasture.T2VomZea) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a cassHasOneT2VomZeaTx) Clear() error {
	return a.tx.Clear()
}

func (a cassHasOneT2VomZeaTx) Count() int64 {
	return a.tx.Count()
}

type cassDo struct{ gen.DO }

type ICassDo interface {
	gen.SubQuery
	Debug() ICassDo
	WithContext(ctx context.Context) ICassDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICassDo
	WriteDB() ICassDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICassDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICassDo
	Not(conds ...gen.Condition) ICassDo
	Or(conds ...gen.Condition) ICassDo
	Select(conds ...field.Expr) ICassDo
	Where(conds ...gen.Condition) ICassDo
	Order(conds ...field.Expr) ICassDo
	Distinct(cols ...field.Expr) ICassDo
	Omit(cols ...field.Expr) ICassDo
	Join(table schema.Tabler, on ...field.Expr) ICassDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICassDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICassDo
	Group(cols ...field.Expr) ICassDo
	Having(conds ...gen.Condition) ICassDo
	Limit(limit int) ICassDo
	Offset(offset int) ICassDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICassDo
	Unscoped() ICassDo
	Create(values ...*pasture.Cass) error
	CreateInBatches(values []*pasture.Cass, batchSize int) error
	Save(values ...*pasture.Cass) error
	First() (*pasture.Cass, error)
	Take() (*pasture.Cass, error)
	Last() (*pasture.Cass, error)
	Find() ([]*pasture.Cass, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.Cass, err error)
	FindInBatches(result *[]*pasture.Cass, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.Cass) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICassDo
	Assign(attrs ...field.AssignExpr) ICassDo
	Joins(fields ...field.RelationField) ICassDo
	Preload(fields ...field.RelationField) ICassDo
	FirstOrInit() (*pasture.Cass, error)
	FirstOrCreate() (*pasture.Cass, error)
	FindByPage(offset int, limit int) (result []*pasture.Cass, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICassDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cassDo) Debug() ICassDo {
	return c.withDO(c.DO.Debug())
}

func (c cassDo) WithContext(ctx context.Context) ICassDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cassDo) ReadDB() ICassDo {
	return c.Clauses(dbresolver.Read)
}

func (c cassDo) WriteDB() ICassDo {
	return c.Clauses(dbresolver.Write)
}

func (c cassDo) Session(config *gorm.Session) ICassDo {
	return c.withDO(c.DO.Session(config))
}

func (c cassDo) Clauses(conds ...clause.Expression) ICassDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cassDo) Returning(value interface{}, columns ...string) ICassDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cassDo) Not(conds ...gen.Condition) ICassDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cassDo) Or(conds ...gen.Condition) ICassDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cassDo) Select(conds ...field.Expr) ICassDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cassDo) Where(conds ...gen.Condition) ICassDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cassDo) Order(conds ...field.Expr) ICassDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cassDo) Distinct(cols ...field.Expr) ICassDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cassDo) Omit(cols ...field.Expr) ICassDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cassDo) Join(table schema.Tabler, on ...field.Expr) ICassDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cassDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICassDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cassDo) RightJoin(table schema.Tabler, on ...field.Expr) ICassDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cassDo) Group(cols ...field.Expr) ICassDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cassDo) Having(conds ...gen.Condition) ICassDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cassDo) Limit(limit int) ICassDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cassDo) Offset(offset int) ICassDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cassDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICassDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cassDo) Unscoped() ICassDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cassDo) Create(values ...*pasture.Cass) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cassDo) CreateInBatches(values []*pasture.Cass, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cassDo) Save(values ...*pasture.Cass) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cassDo) First() (*pasture.Cass, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Cass), nil
	}
}

func (c cassDo) Take() (*pasture.Cass, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Cass), nil
	}
}

func (c cassDo) Last() (*pasture.Cass, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Cass), nil
	}
}

func (c cassDo) Find() ([]*pasture.Cass, error) {
	result, err := c.DO.Find()
	return result.([]*pasture.Cass), err
}

func (c cassDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.Cass, err error) {
	buf := make([]*pasture.Cass, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cassDo) FindInBatches(result *[]*pasture.Cass, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cassDo) Attrs(attrs ...field.AssignExpr) ICassDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cassDo) Assign(attrs ...field.AssignExpr) ICassDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cassDo) Joins(fields ...field.RelationField) ICassDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cassDo) Preload(fields ...field.RelationField) ICassDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cassDo) FirstOrInit() (*pasture.Cass, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Cass), nil
	}
}

func (c cassDo) FirstOrCreate() (*pasture.Cass, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Cass), nil
	}
}

func (c cassDo) FindByPage(offset int, limit int) (result []*pasture.Cass, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cassDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cassDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cassDo) Delete(models ...*pasture.Cass) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cassDo) withDO(do gen.Dao) *cassDo {
	c.DO = *do.(*gen.DO)
	return c
}
