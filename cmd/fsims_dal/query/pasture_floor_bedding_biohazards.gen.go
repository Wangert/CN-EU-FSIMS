// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureFloorBeddingBiohazard(db *gorm.DB, opts ...gen.DOOption) pastureFloorBeddingBiohazard {
	_pastureFloorBeddingBiohazard := pastureFloorBeddingBiohazard{}

	_pastureFloorBeddingBiohazard.pastureFloorBeddingBiohazardDo.UseDB(db, opts...)
	_pastureFloorBeddingBiohazard.pastureFloorBeddingBiohazardDo.UseModel(&pasture.PastureFloorBeddingBiohazard{})

	tableName := _pastureFloorBeddingBiohazard.pastureFloorBeddingBiohazardDo.TableName()
	_pastureFloorBeddingBiohazard.ALL = field.NewAsterisk(tableName)
	_pastureFloorBeddingBiohazard.ID = field.NewUint(tableName, "id")
	_pastureFloorBeddingBiohazard.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureFloorBeddingBiohazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureFloorBeddingBiohazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureFloorBeddingBiohazard.ColiformBacteria = field.NewUint(tableName, "coliform_bacteria")
	_pastureFloorBeddingBiohazard.TotalBacteria = field.NewUint(tableName, "total_bacteria")
	_pastureFloorBeddingBiohazard.TotalMold = field.NewUint(tableName, "total_mold")
	_pastureFloorBeddingBiohazard.AflatoxinB1 = field.NewUint(tableName, "aflatoxin_b1")
	_pastureFloorBeddingBiohazard.Salmonella = field.NewUint(tableName, "salmonella")
	_pastureFloorBeddingBiohazard.PastureFloorBeddingID = field.NewUint(tableName, "pasture_floor_bedding_id")

	_pastureFloorBeddingBiohazard.fillFieldMap()

	return _pastureFloorBeddingBiohazard
}

type pastureFloorBeddingBiohazard struct {
	pastureFloorBeddingBiohazardDo pastureFloorBeddingBiohazardDo

	ALL                   field.Asterisk
	ID                    field.Uint
	CreatedAt             field.Time
	UpdatedAt             field.Time
	DeletedAt             field.Field
	ColiformBacteria      field.Uint
	TotalBacteria         field.Uint
	TotalMold             field.Uint
	AflatoxinB1           field.Uint
	Salmonella            field.Uint
	PastureFloorBeddingID field.Uint

	fieldMap map[string]field.Expr
}

func (p pastureFloorBeddingBiohazard) Table(newTableName string) *pastureFloorBeddingBiohazard {
	p.pastureFloorBeddingBiohazardDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureFloorBeddingBiohazard) As(alias string) *pastureFloorBeddingBiohazard {
	p.pastureFloorBeddingBiohazardDo.DO = *(p.pastureFloorBeddingBiohazardDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureFloorBeddingBiohazard) updateTableName(table string) *pastureFloorBeddingBiohazard {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ColiformBacteria = field.NewUint(table, "coliform_bacteria")
	p.TotalBacteria = field.NewUint(table, "total_bacteria")
	p.TotalMold = field.NewUint(table, "total_mold")
	p.AflatoxinB1 = field.NewUint(table, "aflatoxin_b1")
	p.Salmonella = field.NewUint(table, "salmonella")
	p.PastureFloorBeddingID = field.NewUint(table, "pasture_floor_bedding_id")

	p.fillFieldMap()

	return p
}

func (p *pastureFloorBeddingBiohazard) WithContext(ctx context.Context) IPastureFloorBeddingBiohazardDo {
	return p.pastureFloorBeddingBiohazardDo.WithContext(ctx)
}

func (p pastureFloorBeddingBiohazard) TableName() string {
	return p.pastureFloorBeddingBiohazardDo.TableName()
}

func (p pastureFloorBeddingBiohazard) Alias() string { return p.pastureFloorBeddingBiohazardDo.Alias() }

func (p pastureFloorBeddingBiohazard) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureFloorBeddingBiohazardDo.Columns(cols...)
}

func (p *pastureFloorBeddingBiohazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureFloorBeddingBiohazard) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["coliform_bacteria"] = p.ColiformBacteria
	p.fieldMap["total_bacteria"] = p.TotalBacteria
	p.fieldMap["total_mold"] = p.TotalMold
	p.fieldMap["aflatoxin_b1"] = p.AflatoxinB1
	p.fieldMap["salmonella"] = p.Salmonella
	p.fieldMap["pasture_floor_bedding_id"] = p.PastureFloorBeddingID
}

func (p pastureFloorBeddingBiohazard) clone(db *gorm.DB) pastureFloorBeddingBiohazard {
	p.pastureFloorBeddingBiohazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureFloorBeddingBiohazard) replaceDB(db *gorm.DB) pastureFloorBeddingBiohazard {
	p.pastureFloorBeddingBiohazardDo.ReplaceDB(db)
	return p
}

type pastureFloorBeddingBiohazardDo struct{ gen.DO }

type IPastureFloorBeddingBiohazardDo interface {
	gen.SubQuery
	Debug() IPastureFloorBeddingBiohazardDo
	WithContext(ctx context.Context) IPastureFloorBeddingBiohazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureFloorBeddingBiohazardDo
	WriteDB() IPastureFloorBeddingBiohazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureFloorBeddingBiohazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureFloorBeddingBiohazardDo
	Not(conds ...gen.Condition) IPastureFloorBeddingBiohazardDo
	Or(conds ...gen.Condition) IPastureFloorBeddingBiohazardDo
	Select(conds ...field.Expr) IPastureFloorBeddingBiohazardDo
	Where(conds ...gen.Condition) IPastureFloorBeddingBiohazardDo
	Order(conds ...field.Expr) IPastureFloorBeddingBiohazardDo
	Distinct(cols ...field.Expr) IPastureFloorBeddingBiohazardDo
	Omit(cols ...field.Expr) IPastureFloorBeddingBiohazardDo
	Join(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingBiohazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingBiohazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingBiohazardDo
	Group(cols ...field.Expr) IPastureFloorBeddingBiohazardDo
	Having(conds ...gen.Condition) IPastureFloorBeddingBiohazardDo
	Limit(limit int) IPastureFloorBeddingBiohazardDo
	Offset(offset int) IPastureFloorBeddingBiohazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFloorBeddingBiohazardDo
	Unscoped() IPastureFloorBeddingBiohazardDo
	Create(values ...*pasture.PastureFloorBeddingBiohazard) error
	CreateInBatches(values []*pasture.PastureFloorBeddingBiohazard, batchSize int) error
	Save(values ...*pasture.PastureFloorBeddingBiohazard) error
	First() (*pasture.PastureFloorBeddingBiohazard, error)
	Take() (*pasture.PastureFloorBeddingBiohazard, error)
	Last() (*pasture.PastureFloorBeddingBiohazard, error)
	Find() ([]*pasture.PastureFloorBeddingBiohazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFloorBeddingBiohazard, err error)
	FindInBatches(result *[]*pasture.PastureFloorBeddingBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureFloorBeddingBiohazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureFloorBeddingBiohazardDo
	Assign(attrs ...field.AssignExpr) IPastureFloorBeddingBiohazardDo
	Joins(fields ...field.RelationField) IPastureFloorBeddingBiohazardDo
	Preload(fields ...field.RelationField) IPastureFloorBeddingBiohazardDo
	FirstOrInit() (*pasture.PastureFloorBeddingBiohazard, error)
	FirstOrCreate() (*pasture.PastureFloorBeddingBiohazard, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureFloorBeddingBiohazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureFloorBeddingBiohazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureFloorBeddingBiohazardDo) Debug() IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureFloorBeddingBiohazardDo) WithContext(ctx context.Context) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureFloorBeddingBiohazardDo) ReadDB() IPastureFloorBeddingBiohazardDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureFloorBeddingBiohazardDo) WriteDB() IPastureFloorBeddingBiohazardDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureFloorBeddingBiohazardDo) Session(config *gorm.Session) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureFloorBeddingBiohazardDo) Clauses(conds ...clause.Expression) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureFloorBeddingBiohazardDo) Returning(value interface{}, columns ...string) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureFloorBeddingBiohazardDo) Not(conds ...gen.Condition) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureFloorBeddingBiohazardDo) Or(conds ...gen.Condition) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureFloorBeddingBiohazardDo) Select(conds ...field.Expr) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureFloorBeddingBiohazardDo) Where(conds ...gen.Condition) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureFloorBeddingBiohazardDo) Order(conds ...field.Expr) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureFloorBeddingBiohazardDo) Distinct(cols ...field.Expr) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureFloorBeddingBiohazardDo) Omit(cols ...field.Expr) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureFloorBeddingBiohazardDo) Join(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureFloorBeddingBiohazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureFloorBeddingBiohazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureFloorBeddingBiohazardDo) Group(cols ...field.Expr) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureFloorBeddingBiohazardDo) Having(conds ...gen.Condition) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureFloorBeddingBiohazardDo) Limit(limit int) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureFloorBeddingBiohazardDo) Offset(offset int) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureFloorBeddingBiohazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureFloorBeddingBiohazardDo) Unscoped() IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureFloorBeddingBiohazardDo) Create(values ...*pasture.PastureFloorBeddingBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureFloorBeddingBiohazardDo) CreateInBatches(values []*pasture.PastureFloorBeddingBiohazard, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureFloorBeddingBiohazardDo) Save(values ...*pasture.PastureFloorBeddingBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureFloorBeddingBiohazardDo) First() (*pasture.PastureFloorBeddingBiohazard, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBeddingBiohazard), nil
	}
}

func (p pastureFloorBeddingBiohazardDo) Take() (*pasture.PastureFloorBeddingBiohazard, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBeddingBiohazard), nil
	}
}

func (p pastureFloorBeddingBiohazardDo) Last() (*pasture.PastureFloorBeddingBiohazard, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBeddingBiohazard), nil
	}
}

func (p pastureFloorBeddingBiohazardDo) Find() ([]*pasture.PastureFloorBeddingBiohazard, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureFloorBeddingBiohazard), err
}

func (p pastureFloorBeddingBiohazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFloorBeddingBiohazard, err error) {
	buf := make([]*pasture.PastureFloorBeddingBiohazard, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureFloorBeddingBiohazardDo) FindInBatches(result *[]*pasture.PastureFloorBeddingBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureFloorBeddingBiohazardDo) Attrs(attrs ...field.AssignExpr) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureFloorBeddingBiohazardDo) Assign(attrs ...field.AssignExpr) IPastureFloorBeddingBiohazardDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureFloorBeddingBiohazardDo) Joins(fields ...field.RelationField) IPastureFloorBeddingBiohazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureFloorBeddingBiohazardDo) Preload(fields ...field.RelationField) IPastureFloorBeddingBiohazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureFloorBeddingBiohazardDo) FirstOrInit() (*pasture.PastureFloorBeddingBiohazard, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBeddingBiohazard), nil
	}
}

func (p pastureFloorBeddingBiohazardDo) FirstOrCreate() (*pasture.PastureFloorBeddingBiohazard, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBeddingBiohazard), nil
	}
}

func (p pastureFloorBeddingBiohazardDo) FindByPage(offset int, limit int) (result []*pasture.PastureFloorBeddingBiohazard, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureFloorBeddingBiohazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureFloorBeddingBiohazardDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureFloorBeddingBiohazardDo) Delete(models ...*pasture.PastureFloorBeddingBiohazard) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureFloorBeddingBiohazardDo) withDO(do gen.Dao) *pastureFloorBeddingBiohazardDo {
	p.DO = *do.(*gen.DO)
	return p
}
