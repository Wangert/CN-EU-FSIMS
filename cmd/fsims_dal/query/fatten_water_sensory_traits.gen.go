// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/fatten"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFattenWaterSensoryTraits(db *gorm.DB, opts ...gen.DOOption) fattenWaterSensoryTraits {
	_fattenWaterSensoryTraits := fattenWaterSensoryTraits{}

	_fattenWaterSensoryTraits.fattenWaterSensoryTraitsDo.UseDB(db, opts...)
	_fattenWaterSensoryTraits.fattenWaterSensoryTraitsDo.UseModel(&fatten.FattenWaterSensoryTraits{})

	tableName := _fattenWaterSensoryTraits.fattenWaterSensoryTraitsDo.TableName()
	_fattenWaterSensoryTraits.ALL = field.NewAsterisk(tableName)
	_fattenWaterSensoryTraits.ID = field.NewUint(tableName, "id")
	_fattenWaterSensoryTraits.CreatedAt = field.NewTime(tableName, "created_at")
	_fattenWaterSensoryTraits.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fattenWaterSensoryTraits.DeletedAt = field.NewField(tableName, "deleted_at")
	_fattenWaterSensoryTraits.Color = field.NewUint(tableName, "color")
	_fattenWaterSensoryTraits.Turbidity = field.NewUint(tableName, "turbidity")
	_fattenWaterSensoryTraits.Smell = field.NewString(tableName, "smell")
	_fattenWaterSensoryTraits.PH = field.NewUint(tableName, "ph")
	_fattenWaterSensoryTraits.Hardness = field.NewUint(tableName, "hardness")
	_fattenWaterSensoryTraits.DissolvedSolid = field.NewUint(tableName, "dissolved_solid")
	_fattenWaterSensoryTraits.FattenWaterID = field.NewUint(tableName, "fatten_water_id")

	_fattenWaterSensoryTraits.fillFieldMap()

	return _fattenWaterSensoryTraits
}

type fattenWaterSensoryTraits struct {
	fattenWaterSensoryTraitsDo fattenWaterSensoryTraitsDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	Color          field.Uint
	Turbidity      field.Uint
	Smell          field.String
	PH             field.Uint
	Hardness       field.Uint
	DissolvedSolid field.Uint
	FattenWaterID  field.Uint

	fieldMap map[string]field.Expr
}

func (f fattenWaterSensoryTraits) Table(newTableName string) *fattenWaterSensoryTraits {
	f.fattenWaterSensoryTraitsDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fattenWaterSensoryTraits) As(alias string) *fattenWaterSensoryTraits {
	f.fattenWaterSensoryTraitsDo.DO = *(f.fattenWaterSensoryTraitsDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fattenWaterSensoryTraits) updateTableName(table string) *fattenWaterSensoryTraits {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.Color = field.NewUint(table, "color")
	f.Turbidity = field.NewUint(table, "turbidity")
	f.Smell = field.NewString(table, "smell")
	f.PH = field.NewUint(table, "ph")
	f.Hardness = field.NewUint(table, "hardness")
	f.DissolvedSolid = field.NewUint(table, "dissolved_solid")
	f.FattenWaterID = field.NewUint(table, "fatten_water_id")

	f.fillFieldMap()

	return f
}

func (f *fattenWaterSensoryTraits) WithContext(ctx context.Context) IFattenWaterSensoryTraitsDo {
	return f.fattenWaterSensoryTraitsDo.WithContext(ctx)
}

func (f fattenWaterSensoryTraits) TableName() string { return f.fattenWaterSensoryTraitsDo.TableName() }

func (f fattenWaterSensoryTraits) Alias() string { return f.fattenWaterSensoryTraitsDo.Alias() }

func (f fattenWaterSensoryTraits) Columns(cols ...field.Expr) gen.Columns {
	return f.fattenWaterSensoryTraitsDo.Columns(cols...)
}

func (f *fattenWaterSensoryTraits) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fattenWaterSensoryTraits) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["color"] = f.Color
	f.fieldMap["turbidity"] = f.Turbidity
	f.fieldMap["smell"] = f.Smell
	f.fieldMap["ph"] = f.PH
	f.fieldMap["hardness"] = f.Hardness
	f.fieldMap["dissolved_solid"] = f.DissolvedSolid
	f.fieldMap["fatten_water_id"] = f.FattenWaterID
}

func (f fattenWaterSensoryTraits) clone(db *gorm.DB) fattenWaterSensoryTraits {
	f.fattenWaterSensoryTraitsDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fattenWaterSensoryTraits) replaceDB(db *gorm.DB) fattenWaterSensoryTraits {
	f.fattenWaterSensoryTraitsDo.ReplaceDB(db)
	return f
}

type fattenWaterSensoryTraitsDo struct{ gen.DO }

type IFattenWaterSensoryTraitsDo interface {
	gen.SubQuery
	Debug() IFattenWaterSensoryTraitsDo
	WithContext(ctx context.Context) IFattenWaterSensoryTraitsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFattenWaterSensoryTraitsDo
	WriteDB() IFattenWaterSensoryTraitsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFattenWaterSensoryTraitsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFattenWaterSensoryTraitsDo
	Not(conds ...gen.Condition) IFattenWaterSensoryTraitsDo
	Or(conds ...gen.Condition) IFattenWaterSensoryTraitsDo
	Select(conds ...field.Expr) IFattenWaterSensoryTraitsDo
	Where(conds ...gen.Condition) IFattenWaterSensoryTraitsDo
	Order(conds ...field.Expr) IFattenWaterSensoryTraitsDo
	Distinct(cols ...field.Expr) IFattenWaterSensoryTraitsDo
	Omit(cols ...field.Expr) IFattenWaterSensoryTraitsDo
	Join(table schema.Tabler, on ...field.Expr) IFattenWaterSensoryTraitsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFattenWaterSensoryTraitsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFattenWaterSensoryTraitsDo
	Group(cols ...field.Expr) IFattenWaterSensoryTraitsDo
	Having(conds ...gen.Condition) IFattenWaterSensoryTraitsDo
	Limit(limit int) IFattenWaterSensoryTraitsDo
	Offset(offset int) IFattenWaterSensoryTraitsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenWaterSensoryTraitsDo
	Unscoped() IFattenWaterSensoryTraitsDo
	Create(values ...*fatten.FattenWaterSensoryTraits) error
	CreateInBatches(values []*fatten.FattenWaterSensoryTraits, batchSize int) error
	Save(values ...*fatten.FattenWaterSensoryTraits) error
	First() (*fatten.FattenWaterSensoryTraits, error)
	Take() (*fatten.FattenWaterSensoryTraits, error)
	Last() (*fatten.FattenWaterSensoryTraits, error)
	Find() ([]*fatten.FattenWaterSensoryTraits, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenWaterSensoryTraits, err error)
	FindInBatches(result *[]*fatten.FattenWaterSensoryTraits, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*fatten.FattenWaterSensoryTraits) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFattenWaterSensoryTraitsDo
	Assign(attrs ...field.AssignExpr) IFattenWaterSensoryTraitsDo
	Joins(fields ...field.RelationField) IFattenWaterSensoryTraitsDo
	Preload(fields ...field.RelationField) IFattenWaterSensoryTraitsDo
	FirstOrInit() (*fatten.FattenWaterSensoryTraits, error)
	FirstOrCreate() (*fatten.FattenWaterSensoryTraits, error)
	FindByPage(offset int, limit int) (result []*fatten.FattenWaterSensoryTraits, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFattenWaterSensoryTraitsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fattenWaterSensoryTraitsDo) Debug() IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Debug())
}

func (f fattenWaterSensoryTraitsDo) WithContext(ctx context.Context) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fattenWaterSensoryTraitsDo) ReadDB() IFattenWaterSensoryTraitsDo {
	return f.Clauses(dbresolver.Read)
}

func (f fattenWaterSensoryTraitsDo) WriteDB() IFattenWaterSensoryTraitsDo {
	return f.Clauses(dbresolver.Write)
}

func (f fattenWaterSensoryTraitsDo) Session(config *gorm.Session) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Session(config))
}

func (f fattenWaterSensoryTraitsDo) Clauses(conds ...clause.Expression) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fattenWaterSensoryTraitsDo) Returning(value interface{}, columns ...string) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fattenWaterSensoryTraitsDo) Not(conds ...gen.Condition) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fattenWaterSensoryTraitsDo) Or(conds ...gen.Condition) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fattenWaterSensoryTraitsDo) Select(conds ...field.Expr) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fattenWaterSensoryTraitsDo) Where(conds ...gen.Condition) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fattenWaterSensoryTraitsDo) Order(conds ...field.Expr) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fattenWaterSensoryTraitsDo) Distinct(cols ...field.Expr) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fattenWaterSensoryTraitsDo) Omit(cols ...field.Expr) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fattenWaterSensoryTraitsDo) Join(table schema.Tabler, on ...field.Expr) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fattenWaterSensoryTraitsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fattenWaterSensoryTraitsDo) RightJoin(table schema.Tabler, on ...field.Expr) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fattenWaterSensoryTraitsDo) Group(cols ...field.Expr) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fattenWaterSensoryTraitsDo) Having(conds ...gen.Condition) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fattenWaterSensoryTraitsDo) Limit(limit int) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fattenWaterSensoryTraitsDo) Offset(offset int) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fattenWaterSensoryTraitsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fattenWaterSensoryTraitsDo) Unscoped() IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fattenWaterSensoryTraitsDo) Create(values ...*fatten.FattenWaterSensoryTraits) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fattenWaterSensoryTraitsDo) CreateInBatches(values []*fatten.FattenWaterSensoryTraits, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fattenWaterSensoryTraitsDo) Save(values ...*fatten.FattenWaterSensoryTraits) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fattenWaterSensoryTraitsDo) First() (*fatten.FattenWaterSensoryTraits, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterSensoryTraits), nil
	}
}

func (f fattenWaterSensoryTraitsDo) Take() (*fatten.FattenWaterSensoryTraits, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterSensoryTraits), nil
	}
}

func (f fattenWaterSensoryTraitsDo) Last() (*fatten.FattenWaterSensoryTraits, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterSensoryTraits), nil
	}
}

func (f fattenWaterSensoryTraitsDo) Find() ([]*fatten.FattenWaterSensoryTraits, error) {
	result, err := f.DO.Find()
	return result.([]*fatten.FattenWaterSensoryTraits), err
}

func (f fattenWaterSensoryTraitsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenWaterSensoryTraits, err error) {
	buf := make([]*fatten.FattenWaterSensoryTraits, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fattenWaterSensoryTraitsDo) FindInBatches(result *[]*fatten.FattenWaterSensoryTraits, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fattenWaterSensoryTraitsDo) Attrs(attrs ...field.AssignExpr) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fattenWaterSensoryTraitsDo) Assign(attrs ...field.AssignExpr) IFattenWaterSensoryTraitsDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fattenWaterSensoryTraitsDo) Joins(fields ...field.RelationField) IFattenWaterSensoryTraitsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fattenWaterSensoryTraitsDo) Preload(fields ...field.RelationField) IFattenWaterSensoryTraitsDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fattenWaterSensoryTraitsDo) FirstOrInit() (*fatten.FattenWaterSensoryTraits, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterSensoryTraits), nil
	}
}

func (f fattenWaterSensoryTraitsDo) FirstOrCreate() (*fatten.FattenWaterSensoryTraits, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterSensoryTraits), nil
	}
}

func (f fattenWaterSensoryTraitsDo) FindByPage(offset int, limit int) (result []*fatten.FattenWaterSensoryTraits, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fattenWaterSensoryTraitsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fattenWaterSensoryTraitsDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fattenWaterSensoryTraitsDo) Delete(models ...*fatten.FattenWaterSensoryTraits) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fattenWaterSensoryTraitsDo) withDO(do gen.Dao) *fattenWaterSensoryTraitsDo {
	f.DO = *do.(*gen.DO)
	return f
}
