// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"CN-EU-FSIMS/internal/app/models/warehouse"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSlaughterHouse(db *gorm.DB, opts ...gen.DOOption) slaughterHouse {
	_slaughterHouse := slaughterHouse{}

	_slaughterHouse.slaughterHouseDo.UseDB(db, opts...)
	_slaughterHouse.slaughterHouseDo.UseModel(&slaughter.SlaughterHouse{})

	tableName := _slaughterHouse.slaughterHouseDo.TableName()
	_slaughterHouse.ALL = field.NewAsterisk(tableName)
	_slaughterHouse.ID = field.NewUint(tableName, "id")
	_slaughterHouse.CreatedAt = field.NewTime(tableName, "created_at")
	_slaughterHouse.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slaughterHouse.DeletedAt = field.NewField(tableName, "deleted_at")
	_slaughterHouse.HouseNumber = field.NewString(tableName, "house_number")
	_slaughterHouse.Name = field.NewString(tableName, "name")
	_slaughterHouse.Address = field.NewString(tableName, "address")
	_slaughterHouse.State = field.NewUint(tableName, "state")
	_slaughterHouse.LegalPerson = field.NewString(tableName, "legal_person")
	_slaughterHouse.ReceiveRecords = slaughterHouseHasManyReceiveRecords{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ReceiveRecords", "warehouse.SlaughterReceiveRecord"),
	}

	_slaughterHouse.SlaughterRecords = slaughterHouseHasManySlaughterRecords{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SlaughterRecords", "slaughter.SlaughterBatch"),
		Products: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("SlaughterRecords.Products", "product.SlaughterProduct"),
		},
	}

	_slaughterHouse.SWRecords = slaughterHouseHasManySWRecords{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SWRecords", "warehouse.SlaughterWarehouse"),
	}

	_slaughterHouse.fillFieldMap()

	return _slaughterHouse
}

type slaughterHouse struct {
	slaughterHouseDo slaughterHouseDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	HouseNumber    field.String
	Name           field.String
	Address        field.String
	State          field.Uint
	LegalPerson    field.String
	ReceiveRecords slaughterHouseHasManyReceiveRecords

	SlaughterRecords slaughterHouseHasManySlaughterRecords

	SWRecords slaughterHouseHasManySWRecords

	fieldMap map[string]field.Expr
}

func (s slaughterHouse) Table(newTableName string) *slaughterHouse {
	s.slaughterHouseDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slaughterHouse) As(alias string) *slaughterHouse {
	s.slaughterHouseDo.DO = *(s.slaughterHouseDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slaughterHouse) updateTableName(table string) *slaughterHouse {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.HouseNumber = field.NewString(table, "house_number")
	s.Name = field.NewString(table, "name")
	s.Address = field.NewString(table, "address")
	s.State = field.NewUint(table, "state")
	s.LegalPerson = field.NewString(table, "legal_person")

	s.fillFieldMap()

	return s
}

func (s *slaughterHouse) WithContext(ctx context.Context) ISlaughterHouseDo {
	return s.slaughterHouseDo.WithContext(ctx)
}

func (s slaughterHouse) TableName() string { return s.slaughterHouseDo.TableName() }

func (s slaughterHouse) Alias() string { return s.slaughterHouseDo.Alias() }

func (s slaughterHouse) Columns(cols ...field.Expr) gen.Columns {
	return s.slaughterHouseDo.Columns(cols...)
}

func (s *slaughterHouse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slaughterHouse) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["house_number"] = s.HouseNumber
	s.fieldMap["name"] = s.Name
	s.fieldMap["address"] = s.Address
	s.fieldMap["state"] = s.State
	s.fieldMap["legal_person"] = s.LegalPerson

}

func (s slaughterHouse) clone(db *gorm.DB) slaughterHouse {
	s.slaughterHouseDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slaughterHouse) replaceDB(db *gorm.DB) slaughterHouse {
	s.slaughterHouseDo.ReplaceDB(db)
	return s
}

type slaughterHouseHasManyReceiveRecords struct {
	db *gorm.DB

	field.RelationField
}

func (a slaughterHouseHasManyReceiveRecords) Where(conds ...field.Expr) *slaughterHouseHasManyReceiveRecords {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a slaughterHouseHasManyReceiveRecords) WithContext(ctx context.Context) *slaughterHouseHasManyReceiveRecords {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a slaughterHouseHasManyReceiveRecords) Session(session *gorm.Session) *slaughterHouseHasManyReceiveRecords {
	a.db = a.db.Session(session)
	return &a
}

func (a slaughterHouseHasManyReceiveRecords) Model(m *slaughter.SlaughterHouse) *slaughterHouseHasManyReceiveRecordsTx {
	return &slaughterHouseHasManyReceiveRecordsTx{a.db.Model(m).Association(a.Name())}
}

type slaughterHouseHasManyReceiveRecordsTx struct{ tx *gorm.Association }

func (a slaughterHouseHasManyReceiveRecordsTx) Find() (result []*warehouse.SlaughterReceiveRecord, err error) {
	return result, a.tx.Find(&result)
}

func (a slaughterHouseHasManyReceiveRecordsTx) Append(values ...*warehouse.SlaughterReceiveRecord) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a slaughterHouseHasManyReceiveRecordsTx) Replace(values ...*warehouse.SlaughterReceiveRecord) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a slaughterHouseHasManyReceiveRecordsTx) Delete(values ...*warehouse.SlaughterReceiveRecord) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a slaughterHouseHasManyReceiveRecordsTx) Clear() error {
	return a.tx.Clear()
}

func (a slaughterHouseHasManyReceiveRecordsTx) Count() int64 {
	return a.tx.Count()
}

type slaughterHouseHasManySlaughterRecords struct {
	db *gorm.DB

	field.RelationField

	Products struct {
		field.RelationField
	}
}

func (a slaughterHouseHasManySlaughterRecords) Where(conds ...field.Expr) *slaughterHouseHasManySlaughterRecords {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a slaughterHouseHasManySlaughterRecords) WithContext(ctx context.Context) *slaughterHouseHasManySlaughterRecords {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a slaughterHouseHasManySlaughterRecords) Session(session *gorm.Session) *slaughterHouseHasManySlaughterRecords {
	a.db = a.db.Session(session)
	return &a
}

func (a slaughterHouseHasManySlaughterRecords) Model(m *slaughter.SlaughterHouse) *slaughterHouseHasManySlaughterRecordsTx {
	return &slaughterHouseHasManySlaughterRecordsTx{a.db.Model(m).Association(a.Name())}
}

type slaughterHouseHasManySlaughterRecordsTx struct{ tx *gorm.Association }

func (a slaughterHouseHasManySlaughterRecordsTx) Find() (result []*slaughter.SlaughterBatch, err error) {
	return result, a.tx.Find(&result)
}

func (a slaughterHouseHasManySlaughterRecordsTx) Append(values ...*slaughter.SlaughterBatch) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a slaughterHouseHasManySlaughterRecordsTx) Replace(values ...*slaughter.SlaughterBatch) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a slaughterHouseHasManySlaughterRecordsTx) Delete(values ...*slaughter.SlaughterBatch) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a slaughterHouseHasManySlaughterRecordsTx) Clear() error {
	return a.tx.Clear()
}

func (a slaughterHouseHasManySlaughterRecordsTx) Count() int64 {
	return a.tx.Count()
}

type slaughterHouseHasManySWRecords struct {
	db *gorm.DB

	field.RelationField
}

func (a slaughterHouseHasManySWRecords) Where(conds ...field.Expr) *slaughterHouseHasManySWRecords {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a slaughterHouseHasManySWRecords) WithContext(ctx context.Context) *slaughterHouseHasManySWRecords {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a slaughterHouseHasManySWRecords) Session(session *gorm.Session) *slaughterHouseHasManySWRecords {
	a.db = a.db.Session(session)
	return &a
}

func (a slaughterHouseHasManySWRecords) Model(m *slaughter.SlaughterHouse) *slaughterHouseHasManySWRecordsTx {
	return &slaughterHouseHasManySWRecordsTx{a.db.Model(m).Association(a.Name())}
}

type slaughterHouseHasManySWRecordsTx struct{ tx *gorm.Association }

func (a slaughterHouseHasManySWRecordsTx) Find() (result []*warehouse.SlaughterWarehouse, err error) {
	return result, a.tx.Find(&result)
}

func (a slaughterHouseHasManySWRecordsTx) Append(values ...*warehouse.SlaughterWarehouse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a slaughterHouseHasManySWRecordsTx) Replace(values ...*warehouse.SlaughterWarehouse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a slaughterHouseHasManySWRecordsTx) Delete(values ...*warehouse.SlaughterWarehouse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a slaughterHouseHasManySWRecordsTx) Clear() error {
	return a.tx.Clear()
}

func (a slaughterHouseHasManySWRecordsTx) Count() int64 {
	return a.tx.Count()
}

type slaughterHouseDo struct{ gen.DO }

type ISlaughterHouseDo interface {
	gen.SubQuery
	Debug() ISlaughterHouseDo
	WithContext(ctx context.Context) ISlaughterHouseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlaughterHouseDo
	WriteDB() ISlaughterHouseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlaughterHouseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlaughterHouseDo
	Not(conds ...gen.Condition) ISlaughterHouseDo
	Or(conds ...gen.Condition) ISlaughterHouseDo
	Select(conds ...field.Expr) ISlaughterHouseDo
	Where(conds ...gen.Condition) ISlaughterHouseDo
	Order(conds ...field.Expr) ISlaughterHouseDo
	Distinct(cols ...field.Expr) ISlaughterHouseDo
	Omit(cols ...field.Expr) ISlaughterHouseDo
	Join(table schema.Tabler, on ...field.Expr) ISlaughterHouseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterHouseDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterHouseDo
	Group(cols ...field.Expr) ISlaughterHouseDo
	Having(conds ...gen.Condition) ISlaughterHouseDo
	Limit(limit int) ISlaughterHouseDo
	Offset(offset int) ISlaughterHouseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterHouseDo
	Unscoped() ISlaughterHouseDo
	Create(values ...*slaughter.SlaughterHouse) error
	CreateInBatches(values []*slaughter.SlaughterHouse, batchSize int) error
	Save(values ...*slaughter.SlaughterHouse) error
	First() (*slaughter.SlaughterHouse, error)
	Take() (*slaughter.SlaughterHouse, error)
	Last() (*slaughter.SlaughterHouse, error)
	Find() ([]*slaughter.SlaughterHouse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.SlaughterHouse, err error)
	FindInBatches(result *[]*slaughter.SlaughterHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.SlaughterHouse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlaughterHouseDo
	Assign(attrs ...field.AssignExpr) ISlaughterHouseDo
	Joins(fields ...field.RelationField) ISlaughterHouseDo
	Preload(fields ...field.RelationField) ISlaughterHouseDo
	FirstOrInit() (*slaughter.SlaughterHouse, error)
	FirstOrCreate() (*slaughter.SlaughterHouse, error)
	FindByPage(offset int, limit int) (result []*slaughter.SlaughterHouse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlaughterHouseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slaughterHouseDo) Debug() ISlaughterHouseDo {
	return s.withDO(s.DO.Debug())
}

func (s slaughterHouseDo) WithContext(ctx context.Context) ISlaughterHouseDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slaughterHouseDo) ReadDB() ISlaughterHouseDo {
	return s.Clauses(dbresolver.Read)
}

func (s slaughterHouseDo) WriteDB() ISlaughterHouseDo {
	return s.Clauses(dbresolver.Write)
}

func (s slaughterHouseDo) Session(config *gorm.Session) ISlaughterHouseDo {
	return s.withDO(s.DO.Session(config))
}

func (s slaughterHouseDo) Clauses(conds ...clause.Expression) ISlaughterHouseDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slaughterHouseDo) Returning(value interface{}, columns ...string) ISlaughterHouseDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slaughterHouseDo) Not(conds ...gen.Condition) ISlaughterHouseDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slaughterHouseDo) Or(conds ...gen.Condition) ISlaughterHouseDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slaughterHouseDo) Select(conds ...field.Expr) ISlaughterHouseDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slaughterHouseDo) Where(conds ...gen.Condition) ISlaughterHouseDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slaughterHouseDo) Order(conds ...field.Expr) ISlaughterHouseDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slaughterHouseDo) Distinct(cols ...field.Expr) ISlaughterHouseDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slaughterHouseDo) Omit(cols ...field.Expr) ISlaughterHouseDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slaughterHouseDo) Join(table schema.Tabler, on ...field.Expr) ISlaughterHouseDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slaughterHouseDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterHouseDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slaughterHouseDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterHouseDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slaughterHouseDo) Group(cols ...field.Expr) ISlaughterHouseDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slaughterHouseDo) Having(conds ...gen.Condition) ISlaughterHouseDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slaughterHouseDo) Limit(limit int) ISlaughterHouseDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slaughterHouseDo) Offset(offset int) ISlaughterHouseDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slaughterHouseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterHouseDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slaughterHouseDo) Unscoped() ISlaughterHouseDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slaughterHouseDo) Create(values ...*slaughter.SlaughterHouse) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slaughterHouseDo) CreateInBatches(values []*slaughter.SlaughterHouse, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slaughterHouseDo) Save(values ...*slaughter.SlaughterHouse) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slaughterHouseDo) First() (*slaughter.SlaughterHouse, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterHouse), nil
	}
}

func (s slaughterHouseDo) Take() (*slaughter.SlaughterHouse, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterHouse), nil
	}
}

func (s slaughterHouseDo) Last() (*slaughter.SlaughterHouse, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterHouse), nil
	}
}

func (s slaughterHouseDo) Find() ([]*slaughter.SlaughterHouse, error) {
	result, err := s.DO.Find()
	return result.([]*slaughter.SlaughterHouse), err
}

func (s slaughterHouseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.SlaughterHouse, err error) {
	buf := make([]*slaughter.SlaughterHouse, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slaughterHouseDo) FindInBatches(result *[]*slaughter.SlaughterHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slaughterHouseDo) Attrs(attrs ...field.AssignExpr) ISlaughterHouseDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slaughterHouseDo) Assign(attrs ...field.AssignExpr) ISlaughterHouseDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slaughterHouseDo) Joins(fields ...field.RelationField) ISlaughterHouseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slaughterHouseDo) Preload(fields ...field.RelationField) ISlaughterHouseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slaughterHouseDo) FirstOrInit() (*slaughter.SlaughterHouse, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterHouse), nil
	}
}

func (s slaughterHouseDo) FirstOrCreate() (*slaughter.SlaughterHouse, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterHouse), nil
	}
}

func (s slaughterHouseDo) FindByPage(offset int, limit int) (result []*slaughter.SlaughterHouse, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slaughterHouseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slaughterHouseDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slaughterHouseDo) Delete(models ...*slaughter.SlaughterHouse) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slaughterHouseDo) withDO(do gen.Dao) *slaughterHouseDo {
	s.DO = *do.(*gen.DO)
	return s
}
