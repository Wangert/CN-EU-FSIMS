// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newOapGciSla(db *gorm.DB, opts ...gen.DOOption) oapGciSla {
	_oapGciSla := oapGciSla{}

	_oapGciSla.oapGciSlaDo.UseDB(db, opts...)
	_oapGciSla.oapGciSlaDo.UseModel(&slaughter.OapGciSla{})

	tableName := _oapGciSla.oapGciSlaDo.TableName()
	_oapGciSla.ALL = field.NewAsterisk(tableName)
	_oapGciSla.ID = field.NewUint(tableName, "id")
	_oapGciSla.CreatedAt = field.NewTime(tableName, "created_at")
	_oapGciSla.UpdatedAt = field.NewTime(tableName, "updated_at")
	_oapGciSla.DeletedAt = field.NewField(tableName, "deleted_at")
	_oapGciSla.SlaughterWaterQualityMonID = field.NewUint(tableName, "slaughter_water_quality_mon_id")
	_oapGciSla.OapGciSla1 = field.NewFloat32(tableName, "oap_gci_sla1")
	_oapGciSla.OapGciSla2 = field.NewFloat32(tableName, "oap_gci_sla2")
	_oapGciSla.OapGciSla3 = field.NewFloat32(tableName, "oap_gci_sla3")
	_oapGciSla.OapGciSla4 = field.NewFloat32(tableName, "oap_gci_sla4")
	_oapGciSla.OapGciSla5 = field.NewFloat32(tableName, "oap_gci_sla5")
	_oapGciSla.OapGciSla6 = field.NewFloat32(tableName, "oap_gci_sla6")
	_oapGciSla.OapGciSla7 = field.NewFloat32(tableName, "oap_gci_sla7")
	_oapGciSla.OapGciSla8 = field.NewFloat32(tableName, "oap_gci_sla8")
	_oapGciSla.OapGciSla9 = field.NewFloat32(tableName, "oap_gci_sla9")
	_oapGciSla.OapGciSla10 = field.NewFloat32(tableName, "oap_gci_sla10")
	_oapGciSla.OapGciSla11 = field.NewFloat32(tableName, "oap_gci_sla11")
	_oapGciSla.OapGciSla12 = field.NewFloat32(tableName, "oap_gci_sla12")
	_oapGciSla.OapGciSla13 = field.NewFloat32(tableName, "oap_gci_sla13")
	_oapGciSla.OapGciSla14 = field.NewFloat32(tableName, "oap_gci_sla14")
	_oapGciSla.OapGciSla15 = field.NewFloat32(tableName, "oap_gci_sla15")
	_oapGciSla.OapGciSla16 = field.NewFloat32(tableName, "oap_gci_sla16")
	_oapGciSla.OapGciSla17 = field.NewFloat32(tableName, "oap_gci_sla17")
	_oapGciSla.OapGciSla18 = field.NewFloat32(tableName, "oap_gci_sla18")
	_oapGciSla.OapGciSla19 = field.NewFloat32(tableName, "oap_gci_sla19")
	_oapGciSla.OapGciSla20 = field.NewFloat32(tableName, "oap_gci_sla20")
	_oapGciSla.OapGciSla21 = field.NewFloat32(tableName, "oap_gci_sla21")

	_oapGciSla.fillFieldMap()

	return _oapGciSla
}

type oapGciSla struct {
	oapGciSlaDo oapGciSlaDo

	ALL                        field.Asterisk
	ID                         field.Uint
	CreatedAt                  field.Time
	UpdatedAt                  field.Time
	DeletedAt                  field.Field
	SlaughterWaterQualityMonID field.Uint
	OapGciSla1                 field.Float32
	OapGciSla2                 field.Float32
	OapGciSla3                 field.Float32
	OapGciSla4                 field.Float32
	OapGciSla5                 field.Float32
	OapGciSla6                 field.Float32
	OapGciSla7                 field.Float32
	OapGciSla8                 field.Float32
	OapGciSla9                 field.Float32
	OapGciSla10                field.Float32
	OapGciSla11                field.Float32
	OapGciSla12                field.Float32
	OapGciSla13                field.Float32
	OapGciSla14                field.Float32
	OapGciSla15                field.Float32
	OapGciSla16                field.Float32
	OapGciSla17                field.Float32
	OapGciSla18                field.Float32
	OapGciSla19                field.Float32
	OapGciSla20                field.Float32
	OapGciSla21                field.Float32

	fieldMap map[string]field.Expr
}

func (o oapGciSla) Table(newTableName string) *oapGciSla {
	o.oapGciSlaDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oapGciSla) As(alias string) *oapGciSla {
	o.oapGciSlaDo.DO = *(o.oapGciSlaDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oapGciSla) updateTableName(table string) *oapGciSla {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.SlaughterWaterQualityMonID = field.NewUint(table, "slaughter_water_quality_mon_id")
	o.OapGciSla1 = field.NewFloat32(table, "oap_gci_sla1")
	o.OapGciSla2 = field.NewFloat32(table, "oap_gci_sla2")
	o.OapGciSla3 = field.NewFloat32(table, "oap_gci_sla3")
	o.OapGciSla4 = field.NewFloat32(table, "oap_gci_sla4")
	o.OapGciSla5 = field.NewFloat32(table, "oap_gci_sla5")
	o.OapGciSla6 = field.NewFloat32(table, "oap_gci_sla6")
	o.OapGciSla7 = field.NewFloat32(table, "oap_gci_sla7")
	o.OapGciSla8 = field.NewFloat32(table, "oap_gci_sla8")
	o.OapGciSla9 = field.NewFloat32(table, "oap_gci_sla9")
	o.OapGciSla10 = field.NewFloat32(table, "oap_gci_sla10")
	o.OapGciSla11 = field.NewFloat32(table, "oap_gci_sla11")
	o.OapGciSla12 = field.NewFloat32(table, "oap_gci_sla12")
	o.OapGciSla13 = field.NewFloat32(table, "oap_gci_sla13")
	o.OapGciSla14 = field.NewFloat32(table, "oap_gci_sla14")
	o.OapGciSla15 = field.NewFloat32(table, "oap_gci_sla15")
	o.OapGciSla16 = field.NewFloat32(table, "oap_gci_sla16")
	o.OapGciSla17 = field.NewFloat32(table, "oap_gci_sla17")
	o.OapGciSla18 = field.NewFloat32(table, "oap_gci_sla18")
	o.OapGciSla19 = field.NewFloat32(table, "oap_gci_sla19")
	o.OapGciSla20 = field.NewFloat32(table, "oap_gci_sla20")
	o.OapGciSla21 = field.NewFloat32(table, "oap_gci_sla21")

	o.fillFieldMap()

	return o
}

func (o *oapGciSla) WithContext(ctx context.Context) IOapGciSlaDo {
	return o.oapGciSlaDo.WithContext(ctx)
}

func (o oapGciSla) TableName() string { return o.oapGciSlaDo.TableName() }

func (o oapGciSla) Alias() string { return o.oapGciSlaDo.Alias() }

func (o oapGciSla) Columns(cols ...field.Expr) gen.Columns { return o.oapGciSlaDo.Columns(cols...) }

func (o *oapGciSla) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oapGciSla) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 26)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["slaughter_water_quality_mon_id"] = o.SlaughterWaterQualityMonID
	o.fieldMap["oap_gci_sla1"] = o.OapGciSla1
	o.fieldMap["oap_gci_sla2"] = o.OapGciSla2
	o.fieldMap["oap_gci_sla3"] = o.OapGciSla3
	o.fieldMap["oap_gci_sla4"] = o.OapGciSla4
	o.fieldMap["oap_gci_sla5"] = o.OapGciSla5
	o.fieldMap["oap_gci_sla6"] = o.OapGciSla6
	o.fieldMap["oap_gci_sla7"] = o.OapGciSla7
	o.fieldMap["oap_gci_sla8"] = o.OapGciSla8
	o.fieldMap["oap_gci_sla9"] = o.OapGciSla9
	o.fieldMap["oap_gci_sla10"] = o.OapGciSla10
	o.fieldMap["oap_gci_sla11"] = o.OapGciSla11
	o.fieldMap["oap_gci_sla12"] = o.OapGciSla12
	o.fieldMap["oap_gci_sla13"] = o.OapGciSla13
	o.fieldMap["oap_gci_sla14"] = o.OapGciSla14
	o.fieldMap["oap_gci_sla15"] = o.OapGciSla15
	o.fieldMap["oap_gci_sla16"] = o.OapGciSla16
	o.fieldMap["oap_gci_sla17"] = o.OapGciSla17
	o.fieldMap["oap_gci_sla18"] = o.OapGciSla18
	o.fieldMap["oap_gci_sla19"] = o.OapGciSla19
	o.fieldMap["oap_gci_sla20"] = o.OapGciSla20
	o.fieldMap["oap_gci_sla21"] = o.OapGciSla21
}

func (o oapGciSla) clone(db *gorm.DB) oapGciSla {
	o.oapGciSlaDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oapGciSla) replaceDB(db *gorm.DB) oapGciSla {
	o.oapGciSlaDo.ReplaceDB(db)
	return o
}

type oapGciSlaDo struct{ gen.DO }

type IOapGciSlaDo interface {
	gen.SubQuery
	Debug() IOapGciSlaDo
	WithContext(ctx context.Context) IOapGciSlaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOapGciSlaDo
	WriteDB() IOapGciSlaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOapGciSlaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOapGciSlaDo
	Not(conds ...gen.Condition) IOapGciSlaDo
	Or(conds ...gen.Condition) IOapGciSlaDo
	Select(conds ...field.Expr) IOapGciSlaDo
	Where(conds ...gen.Condition) IOapGciSlaDo
	Order(conds ...field.Expr) IOapGciSlaDo
	Distinct(cols ...field.Expr) IOapGciSlaDo
	Omit(cols ...field.Expr) IOapGciSlaDo
	Join(table schema.Tabler, on ...field.Expr) IOapGciSlaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOapGciSlaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOapGciSlaDo
	Group(cols ...field.Expr) IOapGciSlaDo
	Having(conds ...gen.Condition) IOapGciSlaDo
	Limit(limit int) IOapGciSlaDo
	Offset(offset int) IOapGciSlaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOapGciSlaDo
	Unscoped() IOapGciSlaDo
	Create(values ...*slaughter.OapGciSla) error
	CreateInBatches(values []*slaughter.OapGciSla, batchSize int) error
	Save(values ...*slaughter.OapGciSla) error
	First() (*slaughter.OapGciSla, error)
	Take() (*slaughter.OapGciSla, error)
	Last() (*slaughter.OapGciSla, error)
	Find() ([]*slaughter.OapGciSla, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.OapGciSla, err error)
	FindInBatches(result *[]*slaughter.OapGciSla, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.OapGciSla) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOapGciSlaDo
	Assign(attrs ...field.AssignExpr) IOapGciSlaDo
	Joins(fields ...field.RelationField) IOapGciSlaDo
	Preload(fields ...field.RelationField) IOapGciSlaDo
	FirstOrInit() (*slaughter.OapGciSla, error)
	FirstOrCreate() (*slaughter.OapGciSla, error)
	FindByPage(offset int, limit int) (result []*slaughter.OapGciSla, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOapGciSlaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o oapGciSlaDo) Debug() IOapGciSlaDo {
	return o.withDO(o.DO.Debug())
}

func (o oapGciSlaDo) WithContext(ctx context.Context) IOapGciSlaDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oapGciSlaDo) ReadDB() IOapGciSlaDo {
	return o.Clauses(dbresolver.Read)
}

func (o oapGciSlaDo) WriteDB() IOapGciSlaDo {
	return o.Clauses(dbresolver.Write)
}

func (o oapGciSlaDo) Session(config *gorm.Session) IOapGciSlaDo {
	return o.withDO(o.DO.Session(config))
}

func (o oapGciSlaDo) Clauses(conds ...clause.Expression) IOapGciSlaDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oapGciSlaDo) Returning(value interface{}, columns ...string) IOapGciSlaDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oapGciSlaDo) Not(conds ...gen.Condition) IOapGciSlaDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oapGciSlaDo) Or(conds ...gen.Condition) IOapGciSlaDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oapGciSlaDo) Select(conds ...field.Expr) IOapGciSlaDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oapGciSlaDo) Where(conds ...gen.Condition) IOapGciSlaDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oapGciSlaDo) Order(conds ...field.Expr) IOapGciSlaDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oapGciSlaDo) Distinct(cols ...field.Expr) IOapGciSlaDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oapGciSlaDo) Omit(cols ...field.Expr) IOapGciSlaDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oapGciSlaDo) Join(table schema.Tabler, on ...field.Expr) IOapGciSlaDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oapGciSlaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOapGciSlaDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oapGciSlaDo) RightJoin(table schema.Tabler, on ...field.Expr) IOapGciSlaDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oapGciSlaDo) Group(cols ...field.Expr) IOapGciSlaDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oapGciSlaDo) Having(conds ...gen.Condition) IOapGciSlaDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oapGciSlaDo) Limit(limit int) IOapGciSlaDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oapGciSlaDo) Offset(offset int) IOapGciSlaDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oapGciSlaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOapGciSlaDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oapGciSlaDo) Unscoped() IOapGciSlaDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oapGciSlaDo) Create(values ...*slaughter.OapGciSla) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oapGciSlaDo) CreateInBatches(values []*slaughter.OapGciSla, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oapGciSlaDo) Save(values ...*slaughter.OapGciSla) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oapGciSlaDo) First() (*slaughter.OapGciSla, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.OapGciSla), nil
	}
}

func (o oapGciSlaDo) Take() (*slaughter.OapGciSla, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.OapGciSla), nil
	}
}

func (o oapGciSlaDo) Last() (*slaughter.OapGciSla, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.OapGciSla), nil
	}
}

func (o oapGciSlaDo) Find() ([]*slaughter.OapGciSla, error) {
	result, err := o.DO.Find()
	return result.([]*slaughter.OapGciSla), err
}

func (o oapGciSlaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.OapGciSla, err error) {
	buf := make([]*slaughter.OapGciSla, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oapGciSlaDo) FindInBatches(result *[]*slaughter.OapGciSla, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oapGciSlaDo) Attrs(attrs ...field.AssignExpr) IOapGciSlaDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oapGciSlaDo) Assign(attrs ...field.AssignExpr) IOapGciSlaDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oapGciSlaDo) Joins(fields ...field.RelationField) IOapGciSlaDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oapGciSlaDo) Preload(fields ...field.RelationField) IOapGciSlaDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oapGciSlaDo) FirstOrInit() (*slaughter.OapGciSla, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.OapGciSla), nil
	}
}

func (o oapGciSlaDo) FirstOrCreate() (*slaughter.OapGciSla, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.OapGciSla), nil
	}
}

func (o oapGciSlaDo) FindByPage(offset int, limit int) (result []*slaughter.OapGciSla, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oapGciSlaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oapGciSlaDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oapGciSlaDo) Delete(models ...*slaughter.OapGciSla) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oapGciSlaDo) withDO(do gen.Dao) *oapGciSlaDo {
	o.DO = *do.(*gen.DO)
	return o
}
