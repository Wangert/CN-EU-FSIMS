// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPreCoolShop(db *gorm.DB, opts ...gen.DOOption) preCoolShop {
	_preCoolShop := preCoolShop{}

	_preCoolShop.preCoolShopDo.UseDB(db, opts...)
	_preCoolShop.preCoolShopDo.UseModel(&slaughter.PreCoolShop{})

	tableName := _preCoolShop.preCoolShopDo.TableName()
	_preCoolShop.ALL = field.NewAsterisk(tableName)
	_preCoolShop.ID = field.NewUint(tableName, "id")
	_preCoolShop.CreatedAt = field.NewTime(tableName, "created_at")
	_preCoolShop.UpdatedAt = field.NewTime(tableName, "updated_at")
	_preCoolShop.DeletedAt = field.NewField(tableName, "deleted_at")
	_preCoolShop.HouseNumber = field.NewString(tableName, "house_number")
	_preCoolShop.TimeRecordAt = field.NewFloat32(tableName, "time_record_at")
	_preCoolShop.PreCoolShop1 = field.NewFloat32(tableName, "pre_cool_shop1")
	_preCoolShop.PreCoolShop2 = field.NewFloat32(tableName, "pre_cool_shop2")
	_preCoolShop.PreCoolShop3 = field.NewFloat32(tableName, "pre_cool_shop3")

	_preCoolShop.fillFieldMap()

	return _preCoolShop
}

type preCoolShop struct {
	preCoolShopDo preCoolShopDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	HouseNumber  field.String
	TimeRecordAt field.Float32
	PreCoolShop1 field.Float32
	PreCoolShop2 field.Float32
	PreCoolShop3 field.Float32

	fieldMap map[string]field.Expr
}

func (p preCoolShop) Table(newTableName string) *preCoolShop {
	p.preCoolShopDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p preCoolShop) As(alias string) *preCoolShop {
	p.preCoolShopDo.DO = *(p.preCoolShopDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *preCoolShop) updateTableName(table string) *preCoolShop {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.HouseNumber = field.NewString(table, "house_number")
	p.TimeRecordAt = field.NewFloat32(table, "time_record_at")
	p.PreCoolShop1 = field.NewFloat32(table, "pre_cool_shop1")
	p.PreCoolShop2 = field.NewFloat32(table, "pre_cool_shop2")
	p.PreCoolShop3 = field.NewFloat32(table, "pre_cool_shop3")

	p.fillFieldMap()

	return p
}

func (p *preCoolShop) WithContext(ctx context.Context) IPreCoolShopDo {
	return p.preCoolShopDo.WithContext(ctx)
}

func (p preCoolShop) TableName() string { return p.preCoolShopDo.TableName() }

func (p preCoolShop) Alias() string { return p.preCoolShopDo.Alias() }

func (p preCoolShop) Columns(cols ...field.Expr) gen.Columns { return p.preCoolShopDo.Columns(cols...) }

func (p *preCoolShop) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *preCoolShop) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["house_number"] = p.HouseNumber
	p.fieldMap["time_record_at"] = p.TimeRecordAt
	p.fieldMap["pre_cool_shop1"] = p.PreCoolShop1
	p.fieldMap["pre_cool_shop2"] = p.PreCoolShop2
	p.fieldMap["pre_cool_shop3"] = p.PreCoolShop3
}

func (p preCoolShop) clone(db *gorm.DB) preCoolShop {
	p.preCoolShopDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p preCoolShop) replaceDB(db *gorm.DB) preCoolShop {
	p.preCoolShopDo.ReplaceDB(db)
	return p
}

type preCoolShopDo struct{ gen.DO }

type IPreCoolShopDo interface {
	gen.SubQuery
	Debug() IPreCoolShopDo
	WithContext(ctx context.Context) IPreCoolShopDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPreCoolShopDo
	WriteDB() IPreCoolShopDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPreCoolShopDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPreCoolShopDo
	Not(conds ...gen.Condition) IPreCoolShopDo
	Or(conds ...gen.Condition) IPreCoolShopDo
	Select(conds ...field.Expr) IPreCoolShopDo
	Where(conds ...gen.Condition) IPreCoolShopDo
	Order(conds ...field.Expr) IPreCoolShopDo
	Distinct(cols ...field.Expr) IPreCoolShopDo
	Omit(cols ...field.Expr) IPreCoolShopDo
	Join(table schema.Tabler, on ...field.Expr) IPreCoolShopDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPreCoolShopDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPreCoolShopDo
	Group(cols ...field.Expr) IPreCoolShopDo
	Having(conds ...gen.Condition) IPreCoolShopDo
	Limit(limit int) IPreCoolShopDo
	Offset(offset int) IPreCoolShopDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPreCoolShopDo
	Unscoped() IPreCoolShopDo
	Create(values ...*slaughter.PreCoolShop) error
	CreateInBatches(values []*slaughter.PreCoolShop, batchSize int) error
	Save(values ...*slaughter.PreCoolShop) error
	First() (*slaughter.PreCoolShop, error)
	Take() (*slaughter.PreCoolShop, error)
	Last() (*slaughter.PreCoolShop, error)
	Find() ([]*slaughter.PreCoolShop, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.PreCoolShop, err error)
	FindInBatches(result *[]*slaughter.PreCoolShop, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.PreCoolShop) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPreCoolShopDo
	Assign(attrs ...field.AssignExpr) IPreCoolShopDo
	Joins(fields ...field.RelationField) IPreCoolShopDo
	Preload(fields ...field.RelationField) IPreCoolShopDo
	FirstOrInit() (*slaughter.PreCoolShop, error)
	FirstOrCreate() (*slaughter.PreCoolShop, error)
	FindByPage(offset int, limit int) (result []*slaughter.PreCoolShop, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPreCoolShopDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p preCoolShopDo) Debug() IPreCoolShopDo {
	return p.withDO(p.DO.Debug())
}

func (p preCoolShopDo) WithContext(ctx context.Context) IPreCoolShopDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p preCoolShopDo) ReadDB() IPreCoolShopDo {
	return p.Clauses(dbresolver.Read)
}

func (p preCoolShopDo) WriteDB() IPreCoolShopDo {
	return p.Clauses(dbresolver.Write)
}

func (p preCoolShopDo) Session(config *gorm.Session) IPreCoolShopDo {
	return p.withDO(p.DO.Session(config))
}

func (p preCoolShopDo) Clauses(conds ...clause.Expression) IPreCoolShopDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p preCoolShopDo) Returning(value interface{}, columns ...string) IPreCoolShopDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p preCoolShopDo) Not(conds ...gen.Condition) IPreCoolShopDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p preCoolShopDo) Or(conds ...gen.Condition) IPreCoolShopDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p preCoolShopDo) Select(conds ...field.Expr) IPreCoolShopDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p preCoolShopDo) Where(conds ...gen.Condition) IPreCoolShopDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p preCoolShopDo) Order(conds ...field.Expr) IPreCoolShopDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p preCoolShopDo) Distinct(cols ...field.Expr) IPreCoolShopDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p preCoolShopDo) Omit(cols ...field.Expr) IPreCoolShopDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p preCoolShopDo) Join(table schema.Tabler, on ...field.Expr) IPreCoolShopDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p preCoolShopDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPreCoolShopDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p preCoolShopDo) RightJoin(table schema.Tabler, on ...field.Expr) IPreCoolShopDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p preCoolShopDo) Group(cols ...field.Expr) IPreCoolShopDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p preCoolShopDo) Having(conds ...gen.Condition) IPreCoolShopDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p preCoolShopDo) Limit(limit int) IPreCoolShopDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p preCoolShopDo) Offset(offset int) IPreCoolShopDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p preCoolShopDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPreCoolShopDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p preCoolShopDo) Unscoped() IPreCoolShopDo {
	return p.withDO(p.DO.Unscoped())
}

func (p preCoolShopDo) Create(values ...*slaughter.PreCoolShop) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p preCoolShopDo) CreateInBatches(values []*slaughter.PreCoolShop, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p preCoolShopDo) Save(values ...*slaughter.PreCoolShop) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p preCoolShopDo) First() (*slaughter.PreCoolShop, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.PreCoolShop), nil
	}
}

func (p preCoolShopDo) Take() (*slaughter.PreCoolShop, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.PreCoolShop), nil
	}
}

func (p preCoolShopDo) Last() (*slaughter.PreCoolShop, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.PreCoolShop), nil
	}
}

func (p preCoolShopDo) Find() ([]*slaughter.PreCoolShop, error) {
	result, err := p.DO.Find()
	return result.([]*slaughter.PreCoolShop), err
}

func (p preCoolShopDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.PreCoolShop, err error) {
	buf := make([]*slaughter.PreCoolShop, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p preCoolShopDo) FindInBatches(result *[]*slaughter.PreCoolShop, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p preCoolShopDo) Attrs(attrs ...field.AssignExpr) IPreCoolShopDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p preCoolShopDo) Assign(attrs ...field.AssignExpr) IPreCoolShopDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p preCoolShopDo) Joins(fields ...field.RelationField) IPreCoolShopDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p preCoolShopDo) Preload(fields ...field.RelationField) IPreCoolShopDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p preCoolShopDo) FirstOrInit() (*slaughter.PreCoolShop, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.PreCoolShop), nil
	}
}

func (p preCoolShopDo) FirstOrCreate() (*slaughter.PreCoolShop, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.PreCoolShop), nil
	}
}

func (p preCoolShopDo) FindByPage(offset int, limit int) (result []*slaughter.PreCoolShop, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p preCoolShopDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p preCoolShopDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p preCoolShopDo) Delete(models ...*slaughter.PreCoolShop) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *preCoolShopDo) withDO(do gen.Dao) *preCoolShopDo {
	p.DO = *do.(*gen.DO)
	return p
}
