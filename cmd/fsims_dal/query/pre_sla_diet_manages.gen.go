// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/premortem"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPreSlaDietManage(db *gorm.DB, opts ...gen.DOOption) preSlaDietManage {
	_preSlaDietManage := preSlaDietManage{}

	_preSlaDietManage.preSlaDietManageDo.UseDB(db, opts...)
	_preSlaDietManage.preSlaDietManageDo.UseModel(&premortem.PreSlaDietManage{})

	tableName := _preSlaDietManage.preSlaDietManageDo.TableName()
	_preSlaDietManage.ALL = field.NewAsterisk(tableName)
	_preSlaDietManage.ID = field.NewUint(tableName, "id")
	_preSlaDietManage.CreatedAt = field.NewTime(tableName, "created_at")
	_preSlaDietManage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_preSlaDietManage.DeletedAt = field.NewField(tableName, "deleted_at")
	_preSlaDietManage.PreSlaInfoRecID = field.NewUint(tableName, "pre_sla_info_rec_id")
	_preSlaDietManage.PreSlaDietManage1 = field.NewString(tableName, "pre_sla_diet_manage1")
	_preSlaDietManage.PreSlaDietManage2 = field.NewString(tableName, "pre_sla_diet_manage2")
	_preSlaDietManage.PreSlaDietManage3 = field.NewString(tableName, "pre_sla_diet_manage3")
	_preSlaDietManage.PreSlaDietManage4 = field.NewString(tableName, "pre_sla_diet_manage4")
	_preSlaDietManage.PreSlaDietManage5 = field.NewString(tableName, "pre_sla_diet_manage5")

	_preSlaDietManage.fillFieldMap()

	return _preSlaDietManage
}

type preSlaDietManage struct {
	preSlaDietManageDo preSlaDietManageDo

	ALL               field.Asterisk
	ID                field.Uint
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	PreSlaInfoRecID   field.Uint
	PreSlaDietManage1 field.String
	PreSlaDietManage2 field.String
	PreSlaDietManage3 field.String
	PreSlaDietManage4 field.String
	PreSlaDietManage5 field.String

	fieldMap map[string]field.Expr
}

func (p preSlaDietManage) Table(newTableName string) *preSlaDietManage {
	p.preSlaDietManageDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p preSlaDietManage) As(alias string) *preSlaDietManage {
	p.preSlaDietManageDo.DO = *(p.preSlaDietManageDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *preSlaDietManage) updateTableName(table string) *preSlaDietManage {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PreSlaInfoRecID = field.NewUint(table, "pre_sla_info_rec_id")
	p.PreSlaDietManage1 = field.NewString(table, "pre_sla_diet_manage1")
	p.PreSlaDietManage2 = field.NewString(table, "pre_sla_diet_manage2")
	p.PreSlaDietManage3 = field.NewString(table, "pre_sla_diet_manage3")
	p.PreSlaDietManage4 = field.NewString(table, "pre_sla_diet_manage4")
	p.PreSlaDietManage5 = field.NewString(table, "pre_sla_diet_manage5")

	p.fillFieldMap()

	return p
}

func (p *preSlaDietManage) WithContext(ctx context.Context) IPreSlaDietManageDo {
	return p.preSlaDietManageDo.WithContext(ctx)
}

func (p preSlaDietManage) TableName() string { return p.preSlaDietManageDo.TableName() }

func (p preSlaDietManage) Alias() string { return p.preSlaDietManageDo.Alias() }

func (p preSlaDietManage) Columns(cols ...field.Expr) gen.Columns {
	return p.preSlaDietManageDo.Columns(cols...)
}

func (p *preSlaDietManage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *preSlaDietManage) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["pre_sla_info_rec_id"] = p.PreSlaInfoRecID
	p.fieldMap["pre_sla_diet_manage1"] = p.PreSlaDietManage1
	p.fieldMap["pre_sla_diet_manage2"] = p.PreSlaDietManage2
	p.fieldMap["pre_sla_diet_manage3"] = p.PreSlaDietManage3
	p.fieldMap["pre_sla_diet_manage4"] = p.PreSlaDietManage4
	p.fieldMap["pre_sla_diet_manage5"] = p.PreSlaDietManage5
}

func (p preSlaDietManage) clone(db *gorm.DB) preSlaDietManage {
	p.preSlaDietManageDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p preSlaDietManage) replaceDB(db *gorm.DB) preSlaDietManage {
	p.preSlaDietManageDo.ReplaceDB(db)
	return p
}

type preSlaDietManageDo struct{ gen.DO }

type IPreSlaDietManageDo interface {
	gen.SubQuery
	Debug() IPreSlaDietManageDo
	WithContext(ctx context.Context) IPreSlaDietManageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPreSlaDietManageDo
	WriteDB() IPreSlaDietManageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPreSlaDietManageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPreSlaDietManageDo
	Not(conds ...gen.Condition) IPreSlaDietManageDo
	Or(conds ...gen.Condition) IPreSlaDietManageDo
	Select(conds ...field.Expr) IPreSlaDietManageDo
	Where(conds ...gen.Condition) IPreSlaDietManageDo
	Order(conds ...field.Expr) IPreSlaDietManageDo
	Distinct(cols ...field.Expr) IPreSlaDietManageDo
	Omit(cols ...field.Expr) IPreSlaDietManageDo
	Join(table schema.Tabler, on ...field.Expr) IPreSlaDietManageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPreSlaDietManageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPreSlaDietManageDo
	Group(cols ...field.Expr) IPreSlaDietManageDo
	Having(conds ...gen.Condition) IPreSlaDietManageDo
	Limit(limit int) IPreSlaDietManageDo
	Offset(offset int) IPreSlaDietManageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPreSlaDietManageDo
	Unscoped() IPreSlaDietManageDo
	Create(values ...*premortem.PreSlaDietManage) error
	CreateInBatches(values []*premortem.PreSlaDietManage, batchSize int) error
	Save(values ...*premortem.PreSlaDietManage) error
	First() (*premortem.PreSlaDietManage, error)
	Take() (*premortem.PreSlaDietManage, error)
	Last() (*premortem.PreSlaDietManage, error)
	Find() ([]*premortem.PreSlaDietManage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*premortem.PreSlaDietManage, err error)
	FindInBatches(result *[]*premortem.PreSlaDietManage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*premortem.PreSlaDietManage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPreSlaDietManageDo
	Assign(attrs ...field.AssignExpr) IPreSlaDietManageDo
	Joins(fields ...field.RelationField) IPreSlaDietManageDo
	Preload(fields ...field.RelationField) IPreSlaDietManageDo
	FirstOrInit() (*premortem.PreSlaDietManage, error)
	FirstOrCreate() (*premortem.PreSlaDietManage, error)
	FindByPage(offset int, limit int) (result []*premortem.PreSlaDietManage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPreSlaDietManageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p preSlaDietManageDo) Debug() IPreSlaDietManageDo {
	return p.withDO(p.DO.Debug())
}

func (p preSlaDietManageDo) WithContext(ctx context.Context) IPreSlaDietManageDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p preSlaDietManageDo) ReadDB() IPreSlaDietManageDo {
	return p.Clauses(dbresolver.Read)
}

func (p preSlaDietManageDo) WriteDB() IPreSlaDietManageDo {
	return p.Clauses(dbresolver.Write)
}

func (p preSlaDietManageDo) Session(config *gorm.Session) IPreSlaDietManageDo {
	return p.withDO(p.DO.Session(config))
}

func (p preSlaDietManageDo) Clauses(conds ...clause.Expression) IPreSlaDietManageDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p preSlaDietManageDo) Returning(value interface{}, columns ...string) IPreSlaDietManageDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p preSlaDietManageDo) Not(conds ...gen.Condition) IPreSlaDietManageDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p preSlaDietManageDo) Or(conds ...gen.Condition) IPreSlaDietManageDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p preSlaDietManageDo) Select(conds ...field.Expr) IPreSlaDietManageDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p preSlaDietManageDo) Where(conds ...gen.Condition) IPreSlaDietManageDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p preSlaDietManageDo) Order(conds ...field.Expr) IPreSlaDietManageDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p preSlaDietManageDo) Distinct(cols ...field.Expr) IPreSlaDietManageDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p preSlaDietManageDo) Omit(cols ...field.Expr) IPreSlaDietManageDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p preSlaDietManageDo) Join(table schema.Tabler, on ...field.Expr) IPreSlaDietManageDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p preSlaDietManageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPreSlaDietManageDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p preSlaDietManageDo) RightJoin(table schema.Tabler, on ...field.Expr) IPreSlaDietManageDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p preSlaDietManageDo) Group(cols ...field.Expr) IPreSlaDietManageDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p preSlaDietManageDo) Having(conds ...gen.Condition) IPreSlaDietManageDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p preSlaDietManageDo) Limit(limit int) IPreSlaDietManageDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p preSlaDietManageDo) Offset(offset int) IPreSlaDietManageDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p preSlaDietManageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPreSlaDietManageDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p preSlaDietManageDo) Unscoped() IPreSlaDietManageDo {
	return p.withDO(p.DO.Unscoped())
}

func (p preSlaDietManageDo) Create(values ...*premortem.PreSlaDietManage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p preSlaDietManageDo) CreateInBatches(values []*premortem.PreSlaDietManage, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p preSlaDietManageDo) Save(values ...*premortem.PreSlaDietManage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p preSlaDietManageDo) First() (*premortem.PreSlaDietManage, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaDietManage), nil
	}
}

func (p preSlaDietManageDo) Take() (*premortem.PreSlaDietManage, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaDietManage), nil
	}
}

func (p preSlaDietManageDo) Last() (*premortem.PreSlaDietManage, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaDietManage), nil
	}
}

func (p preSlaDietManageDo) Find() ([]*premortem.PreSlaDietManage, error) {
	result, err := p.DO.Find()
	return result.([]*premortem.PreSlaDietManage), err
}

func (p preSlaDietManageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*premortem.PreSlaDietManage, err error) {
	buf := make([]*premortem.PreSlaDietManage, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p preSlaDietManageDo) FindInBatches(result *[]*premortem.PreSlaDietManage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p preSlaDietManageDo) Attrs(attrs ...field.AssignExpr) IPreSlaDietManageDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p preSlaDietManageDo) Assign(attrs ...field.AssignExpr) IPreSlaDietManageDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p preSlaDietManageDo) Joins(fields ...field.RelationField) IPreSlaDietManageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p preSlaDietManageDo) Preload(fields ...field.RelationField) IPreSlaDietManageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p preSlaDietManageDo) FirstOrInit() (*premortem.PreSlaDietManage, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaDietManage), nil
	}
}

func (p preSlaDietManageDo) FirstOrCreate() (*premortem.PreSlaDietManage, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaDietManage), nil
	}
}

func (p preSlaDietManageDo) FindByPage(offset int, limit int) (result []*premortem.PreSlaDietManage, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p preSlaDietManageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p preSlaDietManageDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p preSlaDietManageDo) Delete(models ...*premortem.PreSlaDietManage) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *preSlaDietManageDo) withDO(do gen.Dao) *preSlaDietManageDo {
	p.DO = *do.(*gen.DO)
	return p
}
