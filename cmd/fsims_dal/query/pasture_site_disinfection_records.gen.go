// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureSiteDisinfectionRecord(db *gorm.DB, opts ...gen.DOOption) pastureSiteDisinfectionRecord {
	_pastureSiteDisinfectionRecord := pastureSiteDisinfectionRecord{}

	_pastureSiteDisinfectionRecord.pastureSiteDisinfectionRecordDo.UseDB(db, opts...)
	_pastureSiteDisinfectionRecord.pastureSiteDisinfectionRecordDo.UseModel(&pasture.PastureSiteDisinfectionRecord{})

	tableName := _pastureSiteDisinfectionRecord.pastureSiteDisinfectionRecordDo.TableName()
	_pastureSiteDisinfectionRecord.ALL = field.NewAsterisk(tableName)
	_pastureSiteDisinfectionRecord.ID = field.NewUint(tableName, "id")
	_pastureSiteDisinfectionRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureSiteDisinfectionRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureSiteDisinfectionRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureSiteDisinfectionRecord.Method = field.NewString(tableName, "method")
	_pastureSiteDisinfectionRecord.Concentration = field.NewUint(tableName, "concentration")
	_pastureSiteDisinfectionRecord.Duration = field.NewUint64(tableName, "duration")

	_pastureSiteDisinfectionRecord.fillFieldMap()

	return _pastureSiteDisinfectionRecord
}

type pastureSiteDisinfectionRecord struct {
	pastureSiteDisinfectionRecordDo pastureSiteDisinfectionRecordDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Method        field.String
	Concentration field.Uint
	Duration      field.Uint64

	fieldMap map[string]field.Expr
}

func (p pastureSiteDisinfectionRecord) Table(newTableName string) *pastureSiteDisinfectionRecord {
	p.pastureSiteDisinfectionRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureSiteDisinfectionRecord) As(alias string) *pastureSiteDisinfectionRecord {
	p.pastureSiteDisinfectionRecordDo.DO = *(p.pastureSiteDisinfectionRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureSiteDisinfectionRecord) updateTableName(table string) *pastureSiteDisinfectionRecord {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Method = field.NewString(table, "method")
	p.Concentration = field.NewUint(table, "concentration")
	p.Duration = field.NewUint64(table, "duration")

	p.fillFieldMap()

	return p
}

func (p *pastureSiteDisinfectionRecord) WithContext(ctx context.Context) IPastureSiteDisinfectionRecordDo {
	return p.pastureSiteDisinfectionRecordDo.WithContext(ctx)
}

func (p pastureSiteDisinfectionRecord) TableName() string {
	return p.pastureSiteDisinfectionRecordDo.TableName()
}

func (p pastureSiteDisinfectionRecord) Alias() string {
	return p.pastureSiteDisinfectionRecordDo.Alias()
}

func (p pastureSiteDisinfectionRecord) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureSiteDisinfectionRecordDo.Columns(cols...)
}

func (p *pastureSiteDisinfectionRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureSiteDisinfectionRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["method"] = p.Method
	p.fieldMap["concentration"] = p.Concentration
	p.fieldMap["duration"] = p.Duration
}

func (p pastureSiteDisinfectionRecord) clone(db *gorm.DB) pastureSiteDisinfectionRecord {
	p.pastureSiteDisinfectionRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureSiteDisinfectionRecord) replaceDB(db *gorm.DB) pastureSiteDisinfectionRecord {
	p.pastureSiteDisinfectionRecordDo.ReplaceDB(db)
	return p
}

type pastureSiteDisinfectionRecordDo struct{ gen.DO }

type IPastureSiteDisinfectionRecordDo interface {
	gen.SubQuery
	Debug() IPastureSiteDisinfectionRecordDo
	WithContext(ctx context.Context) IPastureSiteDisinfectionRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureSiteDisinfectionRecordDo
	WriteDB() IPastureSiteDisinfectionRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureSiteDisinfectionRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureSiteDisinfectionRecordDo
	Not(conds ...gen.Condition) IPastureSiteDisinfectionRecordDo
	Or(conds ...gen.Condition) IPastureSiteDisinfectionRecordDo
	Select(conds ...field.Expr) IPastureSiteDisinfectionRecordDo
	Where(conds ...gen.Condition) IPastureSiteDisinfectionRecordDo
	Order(conds ...field.Expr) IPastureSiteDisinfectionRecordDo
	Distinct(cols ...field.Expr) IPastureSiteDisinfectionRecordDo
	Omit(cols ...field.Expr) IPastureSiteDisinfectionRecordDo
	Join(table schema.Tabler, on ...field.Expr) IPastureSiteDisinfectionRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureSiteDisinfectionRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureSiteDisinfectionRecordDo
	Group(cols ...field.Expr) IPastureSiteDisinfectionRecordDo
	Having(conds ...gen.Condition) IPastureSiteDisinfectionRecordDo
	Limit(limit int) IPastureSiteDisinfectionRecordDo
	Offset(offset int) IPastureSiteDisinfectionRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureSiteDisinfectionRecordDo
	Unscoped() IPastureSiteDisinfectionRecordDo
	Create(values ...*pasture.PastureSiteDisinfectionRecord) error
	CreateInBatches(values []*pasture.PastureSiteDisinfectionRecord, batchSize int) error
	Save(values ...*pasture.PastureSiteDisinfectionRecord) error
	First() (*pasture.PastureSiteDisinfectionRecord, error)
	Take() (*pasture.PastureSiteDisinfectionRecord, error)
	Last() (*pasture.PastureSiteDisinfectionRecord, error)
	Find() ([]*pasture.PastureSiteDisinfectionRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureSiteDisinfectionRecord, err error)
	FindInBatches(result *[]*pasture.PastureSiteDisinfectionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureSiteDisinfectionRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureSiteDisinfectionRecordDo
	Assign(attrs ...field.AssignExpr) IPastureSiteDisinfectionRecordDo
	Joins(fields ...field.RelationField) IPastureSiteDisinfectionRecordDo
	Preload(fields ...field.RelationField) IPastureSiteDisinfectionRecordDo
	FirstOrInit() (*pasture.PastureSiteDisinfectionRecord, error)
	FirstOrCreate() (*pasture.PastureSiteDisinfectionRecord, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureSiteDisinfectionRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureSiteDisinfectionRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureSiteDisinfectionRecordDo) Debug() IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureSiteDisinfectionRecordDo) WithContext(ctx context.Context) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureSiteDisinfectionRecordDo) ReadDB() IPastureSiteDisinfectionRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureSiteDisinfectionRecordDo) WriteDB() IPastureSiteDisinfectionRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureSiteDisinfectionRecordDo) Session(config *gorm.Session) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureSiteDisinfectionRecordDo) Clauses(conds ...clause.Expression) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureSiteDisinfectionRecordDo) Returning(value interface{}, columns ...string) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureSiteDisinfectionRecordDo) Not(conds ...gen.Condition) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureSiteDisinfectionRecordDo) Or(conds ...gen.Condition) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureSiteDisinfectionRecordDo) Select(conds ...field.Expr) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureSiteDisinfectionRecordDo) Where(conds ...gen.Condition) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureSiteDisinfectionRecordDo) Order(conds ...field.Expr) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureSiteDisinfectionRecordDo) Distinct(cols ...field.Expr) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureSiteDisinfectionRecordDo) Omit(cols ...field.Expr) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureSiteDisinfectionRecordDo) Join(table schema.Tabler, on ...field.Expr) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureSiteDisinfectionRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureSiteDisinfectionRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureSiteDisinfectionRecordDo) Group(cols ...field.Expr) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureSiteDisinfectionRecordDo) Having(conds ...gen.Condition) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureSiteDisinfectionRecordDo) Limit(limit int) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureSiteDisinfectionRecordDo) Offset(offset int) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureSiteDisinfectionRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureSiteDisinfectionRecordDo) Unscoped() IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureSiteDisinfectionRecordDo) Create(values ...*pasture.PastureSiteDisinfectionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureSiteDisinfectionRecordDo) CreateInBatches(values []*pasture.PastureSiteDisinfectionRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureSiteDisinfectionRecordDo) Save(values ...*pasture.PastureSiteDisinfectionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureSiteDisinfectionRecordDo) First() (*pasture.PastureSiteDisinfectionRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSiteDisinfectionRecord), nil
	}
}

func (p pastureSiteDisinfectionRecordDo) Take() (*pasture.PastureSiteDisinfectionRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSiteDisinfectionRecord), nil
	}
}

func (p pastureSiteDisinfectionRecordDo) Last() (*pasture.PastureSiteDisinfectionRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSiteDisinfectionRecord), nil
	}
}

func (p pastureSiteDisinfectionRecordDo) Find() ([]*pasture.PastureSiteDisinfectionRecord, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureSiteDisinfectionRecord), err
}

func (p pastureSiteDisinfectionRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureSiteDisinfectionRecord, err error) {
	buf := make([]*pasture.PastureSiteDisinfectionRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureSiteDisinfectionRecordDo) FindInBatches(result *[]*pasture.PastureSiteDisinfectionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureSiteDisinfectionRecordDo) Attrs(attrs ...field.AssignExpr) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureSiteDisinfectionRecordDo) Assign(attrs ...field.AssignExpr) IPastureSiteDisinfectionRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureSiteDisinfectionRecordDo) Joins(fields ...field.RelationField) IPastureSiteDisinfectionRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureSiteDisinfectionRecordDo) Preload(fields ...field.RelationField) IPastureSiteDisinfectionRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureSiteDisinfectionRecordDo) FirstOrInit() (*pasture.PastureSiteDisinfectionRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSiteDisinfectionRecord), nil
	}
}

func (p pastureSiteDisinfectionRecordDo) FirstOrCreate() (*pasture.PastureSiteDisinfectionRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSiteDisinfectionRecord), nil
	}
}

func (p pastureSiteDisinfectionRecordDo) FindByPage(offset int, limit int) (result []*pasture.PastureSiteDisinfectionRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureSiteDisinfectionRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureSiteDisinfectionRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureSiteDisinfectionRecordDo) Delete(models ...*pasture.PastureSiteDisinfectionRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureSiteDisinfectionRecordDo) withDO(do gen.Dao) *pastureSiteDisinfectionRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
