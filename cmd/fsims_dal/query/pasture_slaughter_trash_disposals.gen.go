// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureSlaughterTrashDisposal(db *gorm.DB, opts ...gen.DOOption) pastureSlaughterTrashDisposal {
	_pastureSlaughterTrashDisposal := pastureSlaughterTrashDisposal{}

	_pastureSlaughterTrashDisposal.pastureSlaughterTrashDisposalDo.UseDB(db, opts...)
	_pastureSlaughterTrashDisposal.pastureSlaughterTrashDisposalDo.UseModel(&models.PastureSlaughterTrashDisposal{})

	tableName := _pastureSlaughterTrashDisposal.pastureSlaughterTrashDisposalDo.TableName()
	_pastureSlaughterTrashDisposal.ALL = field.NewAsterisk(tableName)
	_pastureSlaughterTrashDisposal.ID = field.NewUint(tableName, "id")
	_pastureSlaughterTrashDisposal.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureSlaughterTrashDisposal.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureSlaughterTrashDisposal.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureSlaughterTrashDisposal.TimeStamp = field.NewTime(tableName, "time_stamp")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal1 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal1")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal2 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal2")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal3 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal3")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal4 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal4")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal5 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal5")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal6 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal6")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal7 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal7")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal8 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal8")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal9 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal9")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal10 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal10")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal11 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal11")
	_pastureSlaughterTrashDisposal.PastureSlaughterTrashDisposal12 = field.NewFloat32(tableName, "pasture_slaughter_trash_disposal12")

	_pastureSlaughterTrashDisposal.fillFieldMap()

	return _pastureSlaughterTrashDisposal
}

type pastureSlaughterTrashDisposal struct {
	pastureSlaughterTrashDisposalDo pastureSlaughterTrashDisposalDo

	ALL                             field.Asterisk
	ID                              field.Uint
	CreatedAt                       field.Time
	UpdatedAt                       field.Time
	DeletedAt                       field.Field
	TimeStamp                       field.Time
	PastureSlaughterTrashDisposal1  field.Float32
	PastureSlaughterTrashDisposal2  field.Float32
	PastureSlaughterTrashDisposal3  field.Float32
	PastureSlaughterTrashDisposal4  field.Float32
	PastureSlaughterTrashDisposal5  field.Float32
	PastureSlaughterTrashDisposal6  field.Float32
	PastureSlaughterTrashDisposal7  field.Float32
	PastureSlaughterTrashDisposal8  field.Float32
	PastureSlaughterTrashDisposal9  field.Float32
	PastureSlaughterTrashDisposal10 field.Float32
	PastureSlaughterTrashDisposal11 field.Float32
	PastureSlaughterTrashDisposal12 field.Float32

	fieldMap map[string]field.Expr
}

func (p pastureSlaughterTrashDisposal) Table(newTableName string) *pastureSlaughterTrashDisposal {
	p.pastureSlaughterTrashDisposalDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureSlaughterTrashDisposal) As(alias string) *pastureSlaughterTrashDisposal {
	p.pastureSlaughterTrashDisposalDo.DO = *(p.pastureSlaughterTrashDisposalDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureSlaughterTrashDisposal) updateTableName(table string) *pastureSlaughterTrashDisposal {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.TimeStamp = field.NewTime(table, "time_stamp")
	p.PastureSlaughterTrashDisposal1 = field.NewFloat32(table, "pasture_slaughter_trash_disposal1")
	p.PastureSlaughterTrashDisposal2 = field.NewFloat32(table, "pasture_slaughter_trash_disposal2")
	p.PastureSlaughterTrashDisposal3 = field.NewFloat32(table, "pasture_slaughter_trash_disposal3")
	p.PastureSlaughterTrashDisposal4 = field.NewFloat32(table, "pasture_slaughter_trash_disposal4")
	p.PastureSlaughterTrashDisposal5 = field.NewFloat32(table, "pasture_slaughter_trash_disposal5")
	p.PastureSlaughterTrashDisposal6 = field.NewFloat32(table, "pasture_slaughter_trash_disposal6")
	p.PastureSlaughterTrashDisposal7 = field.NewFloat32(table, "pasture_slaughter_trash_disposal7")
	p.PastureSlaughterTrashDisposal8 = field.NewFloat32(table, "pasture_slaughter_trash_disposal8")
	p.PastureSlaughterTrashDisposal9 = field.NewFloat32(table, "pasture_slaughter_trash_disposal9")
	p.PastureSlaughterTrashDisposal10 = field.NewFloat32(table, "pasture_slaughter_trash_disposal10")
	p.PastureSlaughterTrashDisposal11 = field.NewFloat32(table, "pasture_slaughter_trash_disposal11")
	p.PastureSlaughterTrashDisposal12 = field.NewFloat32(table, "pasture_slaughter_trash_disposal12")

	p.fillFieldMap()

	return p
}

func (p *pastureSlaughterTrashDisposal) WithContext(ctx context.Context) IPastureSlaughterTrashDisposalDo {
	return p.pastureSlaughterTrashDisposalDo.WithContext(ctx)
}

func (p pastureSlaughterTrashDisposal) TableName() string {
	return p.pastureSlaughterTrashDisposalDo.TableName()
}

func (p pastureSlaughterTrashDisposal) Alias() string {
	return p.pastureSlaughterTrashDisposalDo.Alias()
}

func (p pastureSlaughterTrashDisposal) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureSlaughterTrashDisposalDo.Columns(cols...)
}

func (p *pastureSlaughterTrashDisposal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureSlaughterTrashDisposal) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 17)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["time_stamp"] = p.TimeStamp
	p.fieldMap["pasture_slaughter_trash_disposal1"] = p.PastureSlaughterTrashDisposal1
	p.fieldMap["pasture_slaughter_trash_disposal2"] = p.PastureSlaughterTrashDisposal2
	p.fieldMap["pasture_slaughter_trash_disposal3"] = p.PastureSlaughterTrashDisposal3
	p.fieldMap["pasture_slaughter_trash_disposal4"] = p.PastureSlaughterTrashDisposal4
	p.fieldMap["pasture_slaughter_trash_disposal5"] = p.PastureSlaughterTrashDisposal5
	p.fieldMap["pasture_slaughter_trash_disposal6"] = p.PastureSlaughterTrashDisposal6
	p.fieldMap["pasture_slaughter_trash_disposal7"] = p.PastureSlaughterTrashDisposal7
	p.fieldMap["pasture_slaughter_trash_disposal8"] = p.PastureSlaughterTrashDisposal8
	p.fieldMap["pasture_slaughter_trash_disposal9"] = p.PastureSlaughterTrashDisposal9
	p.fieldMap["pasture_slaughter_trash_disposal10"] = p.PastureSlaughterTrashDisposal10
	p.fieldMap["pasture_slaughter_trash_disposal11"] = p.PastureSlaughterTrashDisposal11
	p.fieldMap["pasture_slaughter_trash_disposal12"] = p.PastureSlaughterTrashDisposal12
}

func (p pastureSlaughterTrashDisposal) clone(db *gorm.DB) pastureSlaughterTrashDisposal {
	p.pastureSlaughterTrashDisposalDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureSlaughterTrashDisposal) replaceDB(db *gorm.DB) pastureSlaughterTrashDisposal {
	p.pastureSlaughterTrashDisposalDo.ReplaceDB(db)
	return p
}

type pastureSlaughterTrashDisposalDo struct{ gen.DO }

type IPastureSlaughterTrashDisposalDo interface {
	gen.SubQuery
	Debug() IPastureSlaughterTrashDisposalDo
	WithContext(ctx context.Context) IPastureSlaughterTrashDisposalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureSlaughterTrashDisposalDo
	WriteDB() IPastureSlaughterTrashDisposalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureSlaughterTrashDisposalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureSlaughterTrashDisposalDo
	Not(conds ...gen.Condition) IPastureSlaughterTrashDisposalDo
	Or(conds ...gen.Condition) IPastureSlaughterTrashDisposalDo
	Select(conds ...field.Expr) IPastureSlaughterTrashDisposalDo
	Where(conds ...gen.Condition) IPastureSlaughterTrashDisposalDo
	Order(conds ...field.Expr) IPastureSlaughterTrashDisposalDo
	Distinct(cols ...field.Expr) IPastureSlaughterTrashDisposalDo
	Omit(cols ...field.Expr) IPastureSlaughterTrashDisposalDo
	Join(table schema.Tabler, on ...field.Expr) IPastureSlaughterTrashDisposalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureSlaughterTrashDisposalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureSlaughterTrashDisposalDo
	Group(cols ...field.Expr) IPastureSlaughterTrashDisposalDo
	Having(conds ...gen.Condition) IPastureSlaughterTrashDisposalDo
	Limit(limit int) IPastureSlaughterTrashDisposalDo
	Offset(offset int) IPastureSlaughterTrashDisposalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureSlaughterTrashDisposalDo
	Unscoped() IPastureSlaughterTrashDisposalDo
	Create(values ...*models.PastureSlaughterTrashDisposal) error
	CreateInBatches(values []*models.PastureSlaughterTrashDisposal, batchSize int) error
	Save(values ...*models.PastureSlaughterTrashDisposal) error
	First() (*models.PastureSlaughterTrashDisposal, error)
	Take() (*models.PastureSlaughterTrashDisposal, error)
	Last() (*models.PastureSlaughterTrashDisposal, error)
	Find() ([]*models.PastureSlaughterTrashDisposal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PastureSlaughterTrashDisposal, err error)
	FindInBatches(result *[]*models.PastureSlaughterTrashDisposal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.PastureSlaughterTrashDisposal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureSlaughterTrashDisposalDo
	Assign(attrs ...field.AssignExpr) IPastureSlaughterTrashDisposalDo
	Joins(fields ...field.RelationField) IPastureSlaughterTrashDisposalDo
	Preload(fields ...field.RelationField) IPastureSlaughterTrashDisposalDo
	FirstOrInit() (*models.PastureSlaughterTrashDisposal, error)
	FirstOrCreate() (*models.PastureSlaughterTrashDisposal, error)
	FindByPage(offset int, limit int) (result []*models.PastureSlaughterTrashDisposal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureSlaughterTrashDisposalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureSlaughterTrashDisposalDo) Debug() IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureSlaughterTrashDisposalDo) WithContext(ctx context.Context) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureSlaughterTrashDisposalDo) ReadDB() IPastureSlaughterTrashDisposalDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureSlaughterTrashDisposalDo) WriteDB() IPastureSlaughterTrashDisposalDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureSlaughterTrashDisposalDo) Session(config *gorm.Session) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureSlaughterTrashDisposalDo) Clauses(conds ...clause.Expression) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureSlaughterTrashDisposalDo) Returning(value interface{}, columns ...string) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureSlaughterTrashDisposalDo) Not(conds ...gen.Condition) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureSlaughterTrashDisposalDo) Or(conds ...gen.Condition) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureSlaughterTrashDisposalDo) Select(conds ...field.Expr) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureSlaughterTrashDisposalDo) Where(conds ...gen.Condition) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureSlaughterTrashDisposalDo) Order(conds ...field.Expr) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureSlaughterTrashDisposalDo) Distinct(cols ...field.Expr) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureSlaughterTrashDisposalDo) Omit(cols ...field.Expr) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureSlaughterTrashDisposalDo) Join(table schema.Tabler, on ...field.Expr) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureSlaughterTrashDisposalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureSlaughterTrashDisposalDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureSlaughterTrashDisposalDo) Group(cols ...field.Expr) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureSlaughterTrashDisposalDo) Having(conds ...gen.Condition) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureSlaughterTrashDisposalDo) Limit(limit int) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureSlaughterTrashDisposalDo) Offset(offset int) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureSlaughterTrashDisposalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureSlaughterTrashDisposalDo) Unscoped() IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureSlaughterTrashDisposalDo) Create(values ...*models.PastureSlaughterTrashDisposal) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureSlaughterTrashDisposalDo) CreateInBatches(values []*models.PastureSlaughterTrashDisposal, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureSlaughterTrashDisposalDo) Save(values ...*models.PastureSlaughterTrashDisposal) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureSlaughterTrashDisposalDo) First() (*models.PastureSlaughterTrashDisposal, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.PastureSlaughterTrashDisposal), nil
	}
}

func (p pastureSlaughterTrashDisposalDo) Take() (*models.PastureSlaughterTrashDisposal, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.PastureSlaughterTrashDisposal), nil
	}
}

func (p pastureSlaughterTrashDisposalDo) Last() (*models.PastureSlaughterTrashDisposal, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.PastureSlaughterTrashDisposal), nil
	}
}

func (p pastureSlaughterTrashDisposalDo) Find() ([]*models.PastureSlaughterTrashDisposal, error) {
	result, err := p.DO.Find()
	return result.([]*models.PastureSlaughterTrashDisposal), err
}

func (p pastureSlaughterTrashDisposalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PastureSlaughterTrashDisposal, err error) {
	buf := make([]*models.PastureSlaughterTrashDisposal, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureSlaughterTrashDisposalDo) FindInBatches(result *[]*models.PastureSlaughterTrashDisposal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureSlaughterTrashDisposalDo) Attrs(attrs ...field.AssignExpr) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureSlaughterTrashDisposalDo) Assign(attrs ...field.AssignExpr) IPastureSlaughterTrashDisposalDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureSlaughterTrashDisposalDo) Joins(fields ...field.RelationField) IPastureSlaughterTrashDisposalDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureSlaughterTrashDisposalDo) Preload(fields ...field.RelationField) IPastureSlaughterTrashDisposalDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureSlaughterTrashDisposalDo) FirstOrInit() (*models.PastureSlaughterTrashDisposal, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.PastureSlaughterTrashDisposal), nil
	}
}

func (p pastureSlaughterTrashDisposalDo) FirstOrCreate() (*models.PastureSlaughterTrashDisposal, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.PastureSlaughterTrashDisposal), nil
	}
}

func (p pastureSlaughterTrashDisposalDo) FindByPage(offset int, limit int) (result []*models.PastureSlaughterTrashDisposal, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureSlaughterTrashDisposalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureSlaughterTrashDisposalDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureSlaughterTrashDisposalDo) Delete(models ...*models.PastureSlaughterTrashDisposal) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureSlaughterTrashDisposalDo) withDO(do gen.Dao) *pastureSlaughterTrashDisposalDo {
	p.DO = *do.(*gen.DO)
	return p
}
