// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newT2VomZea(db *gorm.DB, opts ...gen.DOOption) t2VomZea {
	_t2VomZea := t2VomZea{}

	_t2VomZea.t2VomZeaDo.UseDB(db, opts...)
	_t2VomZea.t2VomZeaDo.UseModel(&pasture.T2VomZea{})

	tableName := _t2VomZea.t2VomZeaDo.TableName()
	_t2VomZea.ALL = field.NewAsterisk(tableName)
	_t2VomZea.ID = field.NewUint(tableName, "id")
	_t2VomZea.CreatedAt = field.NewTime(tableName, "created_at")
	_t2VomZea.UpdatedAt = field.NewTime(tableName, "updated_at")
	_t2VomZea.DeletedAt = field.NewField(tableName, "deleted_at")
	_t2VomZea.CassID = field.NewUint(tableName, "cass_id")
	_t2VomZea.T2AVomZea1 = field.NewFloat64(tableName, "t2_a_vom_zea1")
	_t2VomZea.T2AVomZea2 = field.NewFloat64(tableName, "t2_a_vom_zea2")
	_t2VomZea.T2AVomZea3 = field.NewFloat64(tableName, "t2_a_vom_zea3")

	_t2VomZea.fillFieldMap()

	return _t2VomZea
}

type t2VomZea struct {
	t2VomZeaDo t2VomZeaDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	CassID     field.Uint
	T2AVomZea1 field.Float64
	T2AVomZea2 field.Float64
	T2AVomZea3 field.Float64

	fieldMap map[string]field.Expr
}

func (t t2VomZea) Table(newTableName string) *t2VomZea {
	t.t2VomZeaDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t t2VomZea) As(alias string) *t2VomZea {
	t.t2VomZeaDo.DO = *(t.t2VomZeaDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *t2VomZea) updateTableName(table string) *t2VomZea {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.CassID = field.NewUint(table, "cass_id")
	t.T2AVomZea1 = field.NewFloat64(table, "t2_a_vom_zea1")
	t.T2AVomZea2 = field.NewFloat64(table, "t2_a_vom_zea2")
	t.T2AVomZea3 = field.NewFloat64(table, "t2_a_vom_zea3")

	t.fillFieldMap()

	return t
}

func (t *t2VomZea) WithContext(ctx context.Context) IT2VomZeaDo { return t.t2VomZeaDo.WithContext(ctx) }

func (t t2VomZea) TableName() string { return t.t2VomZeaDo.TableName() }

func (t t2VomZea) Alias() string { return t.t2VomZeaDo.Alias() }

func (t t2VomZea) Columns(cols ...field.Expr) gen.Columns { return t.t2VomZeaDo.Columns(cols...) }

func (t *t2VomZea) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *t2VomZea) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["cass_id"] = t.CassID
	t.fieldMap["t2_a_vom_zea1"] = t.T2AVomZea1
	t.fieldMap["t2_a_vom_zea2"] = t.T2AVomZea2
	t.fieldMap["t2_a_vom_zea3"] = t.T2AVomZea3
}

func (t t2VomZea) clone(db *gorm.DB) t2VomZea {
	t.t2VomZeaDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t t2VomZea) replaceDB(db *gorm.DB) t2VomZea {
	t.t2VomZeaDo.ReplaceDB(db)
	return t
}

type t2VomZeaDo struct{ gen.DO }

type IT2VomZeaDo interface {
	gen.SubQuery
	Debug() IT2VomZeaDo
	WithContext(ctx context.Context) IT2VomZeaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IT2VomZeaDo
	WriteDB() IT2VomZeaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IT2VomZeaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IT2VomZeaDo
	Not(conds ...gen.Condition) IT2VomZeaDo
	Or(conds ...gen.Condition) IT2VomZeaDo
	Select(conds ...field.Expr) IT2VomZeaDo
	Where(conds ...gen.Condition) IT2VomZeaDo
	Order(conds ...field.Expr) IT2VomZeaDo
	Distinct(cols ...field.Expr) IT2VomZeaDo
	Omit(cols ...field.Expr) IT2VomZeaDo
	Join(table schema.Tabler, on ...field.Expr) IT2VomZeaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IT2VomZeaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IT2VomZeaDo
	Group(cols ...field.Expr) IT2VomZeaDo
	Having(conds ...gen.Condition) IT2VomZeaDo
	Limit(limit int) IT2VomZeaDo
	Offset(offset int) IT2VomZeaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IT2VomZeaDo
	Unscoped() IT2VomZeaDo
	Create(values ...*pasture.T2VomZea) error
	CreateInBatches(values []*pasture.T2VomZea, batchSize int) error
	Save(values ...*pasture.T2VomZea) error
	First() (*pasture.T2VomZea, error)
	Take() (*pasture.T2VomZea, error)
	Last() (*pasture.T2VomZea, error)
	Find() ([]*pasture.T2VomZea, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.T2VomZea, err error)
	FindInBatches(result *[]*pasture.T2VomZea, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.T2VomZea) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IT2VomZeaDo
	Assign(attrs ...field.AssignExpr) IT2VomZeaDo
	Joins(fields ...field.RelationField) IT2VomZeaDo
	Preload(fields ...field.RelationField) IT2VomZeaDo
	FirstOrInit() (*pasture.T2VomZea, error)
	FirstOrCreate() (*pasture.T2VomZea, error)
	FindByPage(offset int, limit int) (result []*pasture.T2VomZea, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IT2VomZeaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t t2VomZeaDo) Debug() IT2VomZeaDo {
	return t.withDO(t.DO.Debug())
}

func (t t2VomZeaDo) WithContext(ctx context.Context) IT2VomZeaDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t t2VomZeaDo) ReadDB() IT2VomZeaDo {
	return t.Clauses(dbresolver.Read)
}

func (t t2VomZeaDo) WriteDB() IT2VomZeaDo {
	return t.Clauses(dbresolver.Write)
}

func (t t2VomZeaDo) Session(config *gorm.Session) IT2VomZeaDo {
	return t.withDO(t.DO.Session(config))
}

func (t t2VomZeaDo) Clauses(conds ...clause.Expression) IT2VomZeaDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t t2VomZeaDo) Returning(value interface{}, columns ...string) IT2VomZeaDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t t2VomZeaDo) Not(conds ...gen.Condition) IT2VomZeaDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t t2VomZeaDo) Or(conds ...gen.Condition) IT2VomZeaDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t t2VomZeaDo) Select(conds ...field.Expr) IT2VomZeaDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t t2VomZeaDo) Where(conds ...gen.Condition) IT2VomZeaDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t t2VomZeaDo) Order(conds ...field.Expr) IT2VomZeaDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t t2VomZeaDo) Distinct(cols ...field.Expr) IT2VomZeaDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t t2VomZeaDo) Omit(cols ...field.Expr) IT2VomZeaDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t t2VomZeaDo) Join(table schema.Tabler, on ...field.Expr) IT2VomZeaDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t t2VomZeaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IT2VomZeaDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t t2VomZeaDo) RightJoin(table schema.Tabler, on ...field.Expr) IT2VomZeaDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t t2VomZeaDo) Group(cols ...field.Expr) IT2VomZeaDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t t2VomZeaDo) Having(conds ...gen.Condition) IT2VomZeaDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t t2VomZeaDo) Limit(limit int) IT2VomZeaDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t t2VomZeaDo) Offset(offset int) IT2VomZeaDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t t2VomZeaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IT2VomZeaDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t t2VomZeaDo) Unscoped() IT2VomZeaDo {
	return t.withDO(t.DO.Unscoped())
}

func (t t2VomZeaDo) Create(values ...*pasture.T2VomZea) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t t2VomZeaDo) CreateInBatches(values []*pasture.T2VomZea, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t t2VomZeaDo) Save(values ...*pasture.T2VomZea) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t t2VomZeaDo) First() (*pasture.T2VomZea, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.T2VomZea), nil
	}
}

func (t t2VomZeaDo) Take() (*pasture.T2VomZea, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.T2VomZea), nil
	}
}

func (t t2VomZeaDo) Last() (*pasture.T2VomZea, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.T2VomZea), nil
	}
}

func (t t2VomZeaDo) Find() ([]*pasture.T2VomZea, error) {
	result, err := t.DO.Find()
	return result.([]*pasture.T2VomZea), err
}

func (t t2VomZeaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.T2VomZea, err error) {
	buf := make([]*pasture.T2VomZea, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t t2VomZeaDo) FindInBatches(result *[]*pasture.T2VomZea, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t t2VomZeaDo) Attrs(attrs ...field.AssignExpr) IT2VomZeaDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t t2VomZeaDo) Assign(attrs ...field.AssignExpr) IT2VomZeaDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t t2VomZeaDo) Joins(fields ...field.RelationField) IT2VomZeaDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t t2VomZeaDo) Preload(fields ...field.RelationField) IT2VomZeaDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t t2VomZeaDo) FirstOrInit() (*pasture.T2VomZea, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.T2VomZea), nil
	}
}

func (t t2VomZeaDo) FirstOrCreate() (*pasture.T2VomZea, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.T2VomZea), nil
	}
}

func (t t2VomZeaDo) FindByPage(offset int, limit int) (result []*pasture.T2VomZea, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t t2VomZeaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t t2VomZeaDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t t2VomZeaDo) Delete(models ...*pasture.T2VomZea) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *t2VomZeaDo) withDO(do gen.Dao) *t2VomZeaDo {
	t.DO = *do.(*gen.DO)
	return t
}
