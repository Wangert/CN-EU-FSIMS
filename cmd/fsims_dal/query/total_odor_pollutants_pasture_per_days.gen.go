// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTotalOdorPollutantsPasturePerDay(db *gorm.DB, opts ...gen.DOOption) totalOdorPollutantsPasturePerDay {
	_totalOdorPollutantsPasturePerDay := totalOdorPollutantsPasturePerDay{}

	_totalOdorPollutantsPasturePerDay.totalOdorPollutantsPasturePerDayDo.UseDB(db, opts...)
	_totalOdorPollutantsPasturePerDay.totalOdorPollutantsPasturePerDayDo.UseModel(&pasture.TotalOdorPollutantsPasturePerDay{})

	tableName := _totalOdorPollutantsPasturePerDay.totalOdorPollutantsPasturePerDayDo.TableName()
	_totalOdorPollutantsPasturePerDay.ALL = field.NewAsterisk(tableName)
	_totalOdorPollutantsPasturePerDay.ID = field.NewUint(tableName, "id")
	_totalOdorPollutantsPasturePerDay.CreatedAt = field.NewTime(tableName, "created_at")
	_totalOdorPollutantsPasturePerDay.UpdatedAt = field.NewTime(tableName, "updated_at")
	_totalOdorPollutantsPasturePerDay.DeletedAt = field.NewField(tableName, "deleted_at")
	_totalOdorPollutantsPasturePerDay.TimeStamp = field.NewTime(tableName, "time_stamp")
	_totalOdorPollutantsPasturePerDay.HouseNumber = field.NewString(tableName, "house_number")
	_totalOdorPollutantsPasturePerDay.TotalOdorPollutantsPerDay1 = field.NewFloat64(tableName, "total_odor_pollutants_per_day1")
	_totalOdorPollutantsPasturePerDay.TotalOdorPollutantsPerDay2 = field.NewFloat64(tableName, "total_odor_pollutants_per_day2")
	_totalOdorPollutantsPasturePerDay.TotalOdorPollutantsPerDay3 = field.NewFloat64(tableName, "total_odor_pollutants_per_day3")
	_totalOdorPollutantsPasturePerDay.TotalOdorPollutantsPerDay4 = field.NewFloat64(tableName, "total_odor_pollutants_per_day4")

	_totalOdorPollutantsPasturePerDay.fillFieldMap()

	return _totalOdorPollutantsPasturePerDay
}

type totalOdorPollutantsPasturePerDay struct {
	totalOdorPollutantsPasturePerDayDo totalOdorPollutantsPasturePerDayDo

	ALL                        field.Asterisk
	ID                         field.Uint
	CreatedAt                  field.Time
	UpdatedAt                  field.Time
	DeletedAt                  field.Field
	TimeStamp                  field.Time
	HouseNumber                field.String
	TotalOdorPollutantsPerDay1 field.Float64
	TotalOdorPollutantsPerDay2 field.Float64
	TotalOdorPollutantsPerDay3 field.Float64
	TotalOdorPollutantsPerDay4 field.Float64

	fieldMap map[string]field.Expr
}

func (t totalOdorPollutantsPasturePerDay) Table(newTableName string) *totalOdorPollutantsPasturePerDay {
	t.totalOdorPollutantsPasturePerDayDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t totalOdorPollutantsPasturePerDay) As(alias string) *totalOdorPollutantsPasturePerDay {
	t.totalOdorPollutantsPasturePerDayDo.DO = *(t.totalOdorPollutantsPasturePerDayDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *totalOdorPollutantsPasturePerDay) updateTableName(table string) *totalOdorPollutantsPasturePerDay {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.TimeStamp = field.NewTime(table, "time_stamp")
	t.HouseNumber = field.NewString(table, "house_number")
	t.TotalOdorPollutantsPerDay1 = field.NewFloat64(table, "total_odor_pollutants_per_day1")
	t.TotalOdorPollutantsPerDay2 = field.NewFloat64(table, "total_odor_pollutants_per_day2")
	t.TotalOdorPollutantsPerDay3 = field.NewFloat64(table, "total_odor_pollutants_per_day3")
	t.TotalOdorPollutantsPerDay4 = field.NewFloat64(table, "total_odor_pollutants_per_day4")

	t.fillFieldMap()

	return t
}

func (t *totalOdorPollutantsPasturePerDay) WithContext(ctx context.Context) ITotalOdorPollutantsPasturePerDayDo {
	return t.totalOdorPollutantsPasturePerDayDo.WithContext(ctx)
}

func (t totalOdorPollutantsPasturePerDay) TableName() string {
	return t.totalOdorPollutantsPasturePerDayDo.TableName()
}

func (t totalOdorPollutantsPasturePerDay) Alias() string {
	return t.totalOdorPollutantsPasturePerDayDo.Alias()
}

func (t totalOdorPollutantsPasturePerDay) Columns(cols ...field.Expr) gen.Columns {
	return t.totalOdorPollutantsPasturePerDayDo.Columns(cols...)
}

func (t *totalOdorPollutantsPasturePerDay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *totalOdorPollutantsPasturePerDay) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["time_stamp"] = t.TimeStamp
	t.fieldMap["house_number"] = t.HouseNumber
	t.fieldMap["total_odor_pollutants_per_day1"] = t.TotalOdorPollutantsPerDay1
	t.fieldMap["total_odor_pollutants_per_day2"] = t.TotalOdorPollutantsPerDay2
	t.fieldMap["total_odor_pollutants_per_day3"] = t.TotalOdorPollutantsPerDay3
	t.fieldMap["total_odor_pollutants_per_day4"] = t.TotalOdorPollutantsPerDay4
}

func (t totalOdorPollutantsPasturePerDay) clone(db *gorm.DB) totalOdorPollutantsPasturePerDay {
	t.totalOdorPollutantsPasturePerDayDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t totalOdorPollutantsPasturePerDay) replaceDB(db *gorm.DB) totalOdorPollutantsPasturePerDay {
	t.totalOdorPollutantsPasturePerDayDo.ReplaceDB(db)
	return t
}

type totalOdorPollutantsPasturePerDayDo struct{ gen.DO }

type ITotalOdorPollutantsPasturePerDayDo interface {
	gen.SubQuery
	Debug() ITotalOdorPollutantsPasturePerDayDo
	WithContext(ctx context.Context) ITotalOdorPollutantsPasturePerDayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITotalOdorPollutantsPasturePerDayDo
	WriteDB() ITotalOdorPollutantsPasturePerDayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITotalOdorPollutantsPasturePerDayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITotalOdorPollutantsPasturePerDayDo
	Not(conds ...gen.Condition) ITotalOdorPollutantsPasturePerDayDo
	Or(conds ...gen.Condition) ITotalOdorPollutantsPasturePerDayDo
	Select(conds ...field.Expr) ITotalOdorPollutantsPasturePerDayDo
	Where(conds ...gen.Condition) ITotalOdorPollutantsPasturePerDayDo
	Order(conds ...field.Expr) ITotalOdorPollutantsPasturePerDayDo
	Distinct(cols ...field.Expr) ITotalOdorPollutantsPasturePerDayDo
	Omit(cols ...field.Expr) ITotalOdorPollutantsPasturePerDayDo
	Join(table schema.Tabler, on ...field.Expr) ITotalOdorPollutantsPasturePerDayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITotalOdorPollutantsPasturePerDayDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITotalOdorPollutantsPasturePerDayDo
	Group(cols ...field.Expr) ITotalOdorPollutantsPasturePerDayDo
	Having(conds ...gen.Condition) ITotalOdorPollutantsPasturePerDayDo
	Limit(limit int) ITotalOdorPollutantsPasturePerDayDo
	Offset(offset int) ITotalOdorPollutantsPasturePerDayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITotalOdorPollutantsPasturePerDayDo
	Unscoped() ITotalOdorPollutantsPasturePerDayDo
	Create(values ...*pasture.TotalOdorPollutantsPasturePerDay) error
	CreateInBatches(values []*pasture.TotalOdorPollutantsPasturePerDay, batchSize int) error
	Save(values ...*pasture.TotalOdorPollutantsPasturePerDay) error
	First() (*pasture.TotalOdorPollutantsPasturePerDay, error)
	Take() (*pasture.TotalOdorPollutantsPasturePerDay, error)
	Last() (*pasture.TotalOdorPollutantsPasturePerDay, error)
	Find() ([]*pasture.TotalOdorPollutantsPasturePerDay, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.TotalOdorPollutantsPasturePerDay, err error)
	FindInBatches(result *[]*pasture.TotalOdorPollutantsPasturePerDay, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.TotalOdorPollutantsPasturePerDay) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITotalOdorPollutantsPasturePerDayDo
	Assign(attrs ...field.AssignExpr) ITotalOdorPollutantsPasturePerDayDo
	Joins(fields ...field.RelationField) ITotalOdorPollutantsPasturePerDayDo
	Preload(fields ...field.RelationField) ITotalOdorPollutantsPasturePerDayDo
	FirstOrInit() (*pasture.TotalOdorPollutantsPasturePerDay, error)
	FirstOrCreate() (*pasture.TotalOdorPollutantsPasturePerDay, error)
	FindByPage(offset int, limit int) (result []*pasture.TotalOdorPollutantsPasturePerDay, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITotalOdorPollutantsPasturePerDayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t totalOdorPollutantsPasturePerDayDo) Debug() ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Debug())
}

func (t totalOdorPollutantsPasturePerDayDo) WithContext(ctx context.Context) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t totalOdorPollutantsPasturePerDayDo) ReadDB() ITotalOdorPollutantsPasturePerDayDo {
	return t.Clauses(dbresolver.Read)
}

func (t totalOdorPollutantsPasturePerDayDo) WriteDB() ITotalOdorPollutantsPasturePerDayDo {
	return t.Clauses(dbresolver.Write)
}

func (t totalOdorPollutantsPasturePerDayDo) Session(config *gorm.Session) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Session(config))
}

func (t totalOdorPollutantsPasturePerDayDo) Clauses(conds ...clause.Expression) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t totalOdorPollutantsPasturePerDayDo) Returning(value interface{}, columns ...string) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t totalOdorPollutantsPasturePerDayDo) Not(conds ...gen.Condition) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t totalOdorPollutantsPasturePerDayDo) Or(conds ...gen.Condition) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t totalOdorPollutantsPasturePerDayDo) Select(conds ...field.Expr) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t totalOdorPollutantsPasturePerDayDo) Where(conds ...gen.Condition) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t totalOdorPollutantsPasturePerDayDo) Order(conds ...field.Expr) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t totalOdorPollutantsPasturePerDayDo) Distinct(cols ...field.Expr) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t totalOdorPollutantsPasturePerDayDo) Omit(cols ...field.Expr) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t totalOdorPollutantsPasturePerDayDo) Join(table schema.Tabler, on ...field.Expr) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t totalOdorPollutantsPasturePerDayDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t totalOdorPollutantsPasturePerDayDo) RightJoin(table schema.Tabler, on ...field.Expr) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t totalOdorPollutantsPasturePerDayDo) Group(cols ...field.Expr) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t totalOdorPollutantsPasturePerDayDo) Having(conds ...gen.Condition) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t totalOdorPollutantsPasturePerDayDo) Limit(limit int) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t totalOdorPollutantsPasturePerDayDo) Offset(offset int) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t totalOdorPollutantsPasturePerDayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t totalOdorPollutantsPasturePerDayDo) Unscoped() ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Unscoped())
}

func (t totalOdorPollutantsPasturePerDayDo) Create(values ...*pasture.TotalOdorPollutantsPasturePerDay) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t totalOdorPollutantsPasturePerDayDo) CreateInBatches(values []*pasture.TotalOdorPollutantsPasturePerDay, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t totalOdorPollutantsPasturePerDayDo) Save(values ...*pasture.TotalOdorPollutantsPasturePerDay) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t totalOdorPollutantsPasturePerDayDo) First() (*pasture.TotalOdorPollutantsPasturePerDay, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.TotalOdorPollutantsPasturePerDay), nil
	}
}

func (t totalOdorPollutantsPasturePerDayDo) Take() (*pasture.TotalOdorPollutantsPasturePerDay, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.TotalOdorPollutantsPasturePerDay), nil
	}
}

func (t totalOdorPollutantsPasturePerDayDo) Last() (*pasture.TotalOdorPollutantsPasturePerDay, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.TotalOdorPollutantsPasturePerDay), nil
	}
}

func (t totalOdorPollutantsPasturePerDayDo) Find() ([]*pasture.TotalOdorPollutantsPasturePerDay, error) {
	result, err := t.DO.Find()
	return result.([]*pasture.TotalOdorPollutantsPasturePerDay), err
}

func (t totalOdorPollutantsPasturePerDayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.TotalOdorPollutantsPasturePerDay, err error) {
	buf := make([]*pasture.TotalOdorPollutantsPasturePerDay, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t totalOdorPollutantsPasturePerDayDo) FindInBatches(result *[]*pasture.TotalOdorPollutantsPasturePerDay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t totalOdorPollutantsPasturePerDayDo) Attrs(attrs ...field.AssignExpr) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t totalOdorPollutantsPasturePerDayDo) Assign(attrs ...field.AssignExpr) ITotalOdorPollutantsPasturePerDayDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t totalOdorPollutantsPasturePerDayDo) Joins(fields ...field.RelationField) ITotalOdorPollutantsPasturePerDayDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t totalOdorPollutantsPasturePerDayDo) Preload(fields ...field.RelationField) ITotalOdorPollutantsPasturePerDayDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t totalOdorPollutantsPasturePerDayDo) FirstOrInit() (*pasture.TotalOdorPollutantsPasturePerDay, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.TotalOdorPollutantsPasturePerDay), nil
	}
}

func (t totalOdorPollutantsPasturePerDayDo) FirstOrCreate() (*pasture.TotalOdorPollutantsPasturePerDay, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.TotalOdorPollutantsPasturePerDay), nil
	}
}

func (t totalOdorPollutantsPasturePerDayDo) FindByPage(offset int, limit int) (result []*pasture.TotalOdorPollutantsPasturePerDay, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t totalOdorPollutantsPasturePerDayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t totalOdorPollutantsPasturePerDayDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t totalOdorPollutantsPasturePerDayDo) Delete(models ...*pasture.TotalOdorPollutantsPasturePerDay) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *totalOdorPollutantsPasturePerDayDo) withDO(do gen.Dao) *totalOdorPollutantsPasturePerDayDo {
	t.DO = *do.(*gen.DO)
	return t
}
