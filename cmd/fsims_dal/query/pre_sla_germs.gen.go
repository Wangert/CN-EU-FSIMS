// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/premortem"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPreSlaGerms(db *gorm.DB, opts ...gen.DOOption) preSlaGerms {
	_preSlaGerms := preSlaGerms{}

	_preSlaGerms.preSlaGermsDo.UseDB(db, opts...)
	_preSlaGerms.preSlaGermsDo.UseModel(&premortem.PreSlaGerms{})

	tableName := _preSlaGerms.preSlaGermsDo.TableName()
	_preSlaGerms.ALL = field.NewAsterisk(tableName)
	_preSlaGerms.ID = field.NewUint(tableName, "id")
	_preSlaGerms.CreatedAt = field.NewTime(tableName, "created_at")
	_preSlaGerms.UpdatedAt = field.NewTime(tableName, "updated_at")
	_preSlaGerms.DeletedAt = field.NewField(tableName, "deleted_at")
	_preSlaGerms.PreSlaInfoRecID = field.NewUint(tableName, "pre_sla_info_rec_id")
	_preSlaGerms.PreSlaGerms1 = field.NewFloat32(tableName, "pre_sla_germs1")
	_preSlaGerms.PreSlaGerms2 = field.NewFloat32(tableName, "pre_sla_germs2")
	_preSlaGerms.PreSlaGerms3 = field.NewFloat32(tableName, "pre_sla_germs3")

	_preSlaGerms.fillFieldMap()

	return _preSlaGerms
}

type preSlaGerms struct {
	preSlaGermsDo preSlaGermsDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	PreSlaInfoRecID field.Uint
	PreSlaGerms1    field.Float32
	PreSlaGerms2    field.Float32
	PreSlaGerms3    field.Float32

	fieldMap map[string]field.Expr
}

func (p preSlaGerms) Table(newTableName string) *preSlaGerms {
	p.preSlaGermsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p preSlaGerms) As(alias string) *preSlaGerms {
	p.preSlaGermsDo.DO = *(p.preSlaGermsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *preSlaGerms) updateTableName(table string) *preSlaGerms {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PreSlaInfoRecID = field.NewUint(table, "pre_sla_info_rec_id")
	p.PreSlaGerms1 = field.NewFloat32(table, "pre_sla_germs1")
	p.PreSlaGerms2 = field.NewFloat32(table, "pre_sla_germs2")
	p.PreSlaGerms3 = field.NewFloat32(table, "pre_sla_germs3")

	p.fillFieldMap()

	return p
}

func (p *preSlaGerms) WithContext(ctx context.Context) IPreSlaGermsDo {
	return p.preSlaGermsDo.WithContext(ctx)
}

func (p preSlaGerms) TableName() string { return p.preSlaGermsDo.TableName() }

func (p preSlaGerms) Alias() string { return p.preSlaGermsDo.Alias() }

func (p preSlaGerms) Columns(cols ...field.Expr) gen.Columns { return p.preSlaGermsDo.Columns(cols...) }

func (p *preSlaGerms) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *preSlaGerms) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["pre_sla_info_rec_id"] = p.PreSlaInfoRecID
	p.fieldMap["pre_sla_germs1"] = p.PreSlaGerms1
	p.fieldMap["pre_sla_germs2"] = p.PreSlaGerms2
	p.fieldMap["pre_sla_germs3"] = p.PreSlaGerms3
}

func (p preSlaGerms) clone(db *gorm.DB) preSlaGerms {
	p.preSlaGermsDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p preSlaGerms) replaceDB(db *gorm.DB) preSlaGerms {
	p.preSlaGermsDo.ReplaceDB(db)
	return p
}

type preSlaGermsDo struct{ gen.DO }

type IPreSlaGermsDo interface {
	gen.SubQuery
	Debug() IPreSlaGermsDo
	WithContext(ctx context.Context) IPreSlaGermsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPreSlaGermsDo
	WriteDB() IPreSlaGermsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPreSlaGermsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPreSlaGermsDo
	Not(conds ...gen.Condition) IPreSlaGermsDo
	Or(conds ...gen.Condition) IPreSlaGermsDo
	Select(conds ...field.Expr) IPreSlaGermsDo
	Where(conds ...gen.Condition) IPreSlaGermsDo
	Order(conds ...field.Expr) IPreSlaGermsDo
	Distinct(cols ...field.Expr) IPreSlaGermsDo
	Omit(cols ...field.Expr) IPreSlaGermsDo
	Join(table schema.Tabler, on ...field.Expr) IPreSlaGermsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPreSlaGermsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPreSlaGermsDo
	Group(cols ...field.Expr) IPreSlaGermsDo
	Having(conds ...gen.Condition) IPreSlaGermsDo
	Limit(limit int) IPreSlaGermsDo
	Offset(offset int) IPreSlaGermsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPreSlaGermsDo
	Unscoped() IPreSlaGermsDo
	Create(values ...*premortem.PreSlaGerms) error
	CreateInBatches(values []*premortem.PreSlaGerms, batchSize int) error
	Save(values ...*premortem.PreSlaGerms) error
	First() (*premortem.PreSlaGerms, error)
	Take() (*premortem.PreSlaGerms, error)
	Last() (*premortem.PreSlaGerms, error)
	Find() ([]*premortem.PreSlaGerms, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*premortem.PreSlaGerms, err error)
	FindInBatches(result *[]*premortem.PreSlaGerms, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*premortem.PreSlaGerms) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPreSlaGermsDo
	Assign(attrs ...field.AssignExpr) IPreSlaGermsDo
	Joins(fields ...field.RelationField) IPreSlaGermsDo
	Preload(fields ...field.RelationField) IPreSlaGermsDo
	FirstOrInit() (*premortem.PreSlaGerms, error)
	FirstOrCreate() (*premortem.PreSlaGerms, error)
	FindByPage(offset int, limit int) (result []*premortem.PreSlaGerms, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPreSlaGermsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p preSlaGermsDo) Debug() IPreSlaGermsDo {
	return p.withDO(p.DO.Debug())
}

func (p preSlaGermsDo) WithContext(ctx context.Context) IPreSlaGermsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p preSlaGermsDo) ReadDB() IPreSlaGermsDo {
	return p.Clauses(dbresolver.Read)
}

func (p preSlaGermsDo) WriteDB() IPreSlaGermsDo {
	return p.Clauses(dbresolver.Write)
}

func (p preSlaGermsDo) Session(config *gorm.Session) IPreSlaGermsDo {
	return p.withDO(p.DO.Session(config))
}

func (p preSlaGermsDo) Clauses(conds ...clause.Expression) IPreSlaGermsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p preSlaGermsDo) Returning(value interface{}, columns ...string) IPreSlaGermsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p preSlaGermsDo) Not(conds ...gen.Condition) IPreSlaGermsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p preSlaGermsDo) Or(conds ...gen.Condition) IPreSlaGermsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p preSlaGermsDo) Select(conds ...field.Expr) IPreSlaGermsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p preSlaGermsDo) Where(conds ...gen.Condition) IPreSlaGermsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p preSlaGermsDo) Order(conds ...field.Expr) IPreSlaGermsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p preSlaGermsDo) Distinct(cols ...field.Expr) IPreSlaGermsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p preSlaGermsDo) Omit(cols ...field.Expr) IPreSlaGermsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p preSlaGermsDo) Join(table schema.Tabler, on ...field.Expr) IPreSlaGermsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p preSlaGermsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPreSlaGermsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p preSlaGermsDo) RightJoin(table schema.Tabler, on ...field.Expr) IPreSlaGermsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p preSlaGermsDo) Group(cols ...field.Expr) IPreSlaGermsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p preSlaGermsDo) Having(conds ...gen.Condition) IPreSlaGermsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p preSlaGermsDo) Limit(limit int) IPreSlaGermsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p preSlaGermsDo) Offset(offset int) IPreSlaGermsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p preSlaGermsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPreSlaGermsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p preSlaGermsDo) Unscoped() IPreSlaGermsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p preSlaGermsDo) Create(values ...*premortem.PreSlaGerms) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p preSlaGermsDo) CreateInBatches(values []*premortem.PreSlaGerms, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p preSlaGermsDo) Save(values ...*premortem.PreSlaGerms) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p preSlaGermsDo) First() (*premortem.PreSlaGerms, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaGerms), nil
	}
}

func (p preSlaGermsDo) Take() (*premortem.PreSlaGerms, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaGerms), nil
	}
}

func (p preSlaGermsDo) Last() (*premortem.PreSlaGerms, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaGerms), nil
	}
}

func (p preSlaGermsDo) Find() ([]*premortem.PreSlaGerms, error) {
	result, err := p.DO.Find()
	return result.([]*premortem.PreSlaGerms), err
}

func (p preSlaGermsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*premortem.PreSlaGerms, err error) {
	buf := make([]*premortem.PreSlaGerms, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p preSlaGermsDo) FindInBatches(result *[]*premortem.PreSlaGerms, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p preSlaGermsDo) Attrs(attrs ...field.AssignExpr) IPreSlaGermsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p preSlaGermsDo) Assign(attrs ...field.AssignExpr) IPreSlaGermsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p preSlaGermsDo) Joins(fields ...field.RelationField) IPreSlaGermsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p preSlaGermsDo) Preload(fields ...field.RelationField) IPreSlaGermsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p preSlaGermsDo) FirstOrInit() (*premortem.PreSlaGerms, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaGerms), nil
	}
}

func (p preSlaGermsDo) FirstOrCreate() (*premortem.PreSlaGerms, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.PreSlaGerms), nil
	}
}

func (p preSlaGermsDo) FindByPage(offset int, limit int) (result []*premortem.PreSlaGerms, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p preSlaGermsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p preSlaGermsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p preSlaGermsDo) Delete(models ...*premortem.PreSlaGerms) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *preSlaGermsDo) withDO(do gen.Dao) *preSlaGermsDo {
	p.DO = *do.(*gen.DO)
	return p
}
