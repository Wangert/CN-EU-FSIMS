// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMicroIndex(db *gorm.DB, opts ...gen.DOOption) microIndex {
	_microIndex := microIndex{}

	_microIndex.microIndexDo.UseDB(db, opts...)
	_microIndex.microIndexDo.UseModel(&pasture.MicroIndex{})

	tableName := _microIndex.microIndexDo.TableName()
	_microIndex.ALL = field.NewAsterisk(tableName)
	_microIndex.ID = field.NewUint(tableName, "id")
	_microIndex.CreatedAt = field.NewTime(tableName, "created_at")
	_microIndex.UpdatedAt = field.NewTime(tableName, "updated_at")
	_microIndex.DeletedAt = field.NewField(tableName, "deleted_at")
	_microIndex.WaterRecordID = field.NewUint(tableName, "water_record_id")
	_microIndex.WaterQualityMonID = field.NewUint(tableName, "water_quality_mon_id")
	_microIndex.MicroIndex1 = field.NewFloat64(tableName, "micro_index1")
	_microIndex.MicroIndex2 = field.NewFloat64(tableName, "micro_index2")
	_microIndex.MicroIndex3 = field.NewFloat64(tableName, "micro_index3")

	_microIndex.fillFieldMap()

	return _microIndex
}

type microIndex struct {
	microIndexDo microIndexDo

	ALL               field.Asterisk
	ID                field.Uint
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	WaterRecordID     field.Uint
	WaterQualityMonID field.Uint
	MicroIndex1       field.Float64
	MicroIndex2       field.Float64
	MicroIndex3       field.Float64

	fieldMap map[string]field.Expr
}

func (m microIndex) Table(newTableName string) *microIndex {
	m.microIndexDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m microIndex) As(alias string) *microIndex {
	m.microIndexDo.DO = *(m.microIndexDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *microIndex) updateTableName(table string) *microIndex {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.WaterRecordID = field.NewUint(table, "water_record_id")
	m.WaterQualityMonID = field.NewUint(table, "water_quality_mon_id")
	m.MicroIndex1 = field.NewFloat64(table, "micro_index1")
	m.MicroIndex2 = field.NewFloat64(table, "micro_index2")
	m.MicroIndex3 = field.NewFloat64(table, "micro_index3")

	m.fillFieldMap()

	return m
}

func (m *microIndex) WithContext(ctx context.Context) IMicroIndexDo {
	return m.microIndexDo.WithContext(ctx)
}

func (m microIndex) TableName() string { return m.microIndexDo.TableName() }

func (m microIndex) Alias() string { return m.microIndexDo.Alias() }

func (m microIndex) Columns(cols ...field.Expr) gen.Columns { return m.microIndexDo.Columns(cols...) }

func (m *microIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *microIndex) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["water_record_id"] = m.WaterRecordID
	m.fieldMap["water_quality_mon_id"] = m.WaterQualityMonID
	m.fieldMap["micro_index1"] = m.MicroIndex1
	m.fieldMap["micro_index2"] = m.MicroIndex2
	m.fieldMap["micro_index3"] = m.MicroIndex3
}

func (m microIndex) clone(db *gorm.DB) microIndex {
	m.microIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m microIndex) replaceDB(db *gorm.DB) microIndex {
	m.microIndexDo.ReplaceDB(db)
	return m
}

type microIndexDo struct{ gen.DO }

type IMicroIndexDo interface {
	gen.SubQuery
	Debug() IMicroIndexDo
	WithContext(ctx context.Context) IMicroIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMicroIndexDo
	WriteDB() IMicroIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMicroIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMicroIndexDo
	Not(conds ...gen.Condition) IMicroIndexDo
	Or(conds ...gen.Condition) IMicroIndexDo
	Select(conds ...field.Expr) IMicroIndexDo
	Where(conds ...gen.Condition) IMicroIndexDo
	Order(conds ...field.Expr) IMicroIndexDo
	Distinct(cols ...field.Expr) IMicroIndexDo
	Omit(cols ...field.Expr) IMicroIndexDo
	Join(table schema.Tabler, on ...field.Expr) IMicroIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMicroIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMicroIndexDo
	Group(cols ...field.Expr) IMicroIndexDo
	Having(conds ...gen.Condition) IMicroIndexDo
	Limit(limit int) IMicroIndexDo
	Offset(offset int) IMicroIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMicroIndexDo
	Unscoped() IMicroIndexDo
	Create(values ...*pasture.MicroIndex) error
	CreateInBatches(values []*pasture.MicroIndex, batchSize int) error
	Save(values ...*pasture.MicroIndex) error
	First() (*pasture.MicroIndex, error)
	Take() (*pasture.MicroIndex, error)
	Last() (*pasture.MicroIndex, error)
	Find() ([]*pasture.MicroIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.MicroIndex, err error)
	FindInBatches(result *[]*pasture.MicroIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.MicroIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMicroIndexDo
	Assign(attrs ...field.AssignExpr) IMicroIndexDo
	Joins(fields ...field.RelationField) IMicroIndexDo
	Preload(fields ...field.RelationField) IMicroIndexDo
	FirstOrInit() (*pasture.MicroIndex, error)
	FirstOrCreate() (*pasture.MicroIndex, error)
	FindByPage(offset int, limit int) (result []*pasture.MicroIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMicroIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m microIndexDo) Debug() IMicroIndexDo {
	return m.withDO(m.DO.Debug())
}

func (m microIndexDo) WithContext(ctx context.Context) IMicroIndexDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m microIndexDo) ReadDB() IMicroIndexDo {
	return m.Clauses(dbresolver.Read)
}

func (m microIndexDo) WriteDB() IMicroIndexDo {
	return m.Clauses(dbresolver.Write)
}

func (m microIndexDo) Session(config *gorm.Session) IMicroIndexDo {
	return m.withDO(m.DO.Session(config))
}

func (m microIndexDo) Clauses(conds ...clause.Expression) IMicroIndexDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m microIndexDo) Returning(value interface{}, columns ...string) IMicroIndexDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m microIndexDo) Not(conds ...gen.Condition) IMicroIndexDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m microIndexDo) Or(conds ...gen.Condition) IMicroIndexDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m microIndexDo) Select(conds ...field.Expr) IMicroIndexDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m microIndexDo) Where(conds ...gen.Condition) IMicroIndexDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m microIndexDo) Order(conds ...field.Expr) IMicroIndexDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m microIndexDo) Distinct(cols ...field.Expr) IMicroIndexDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m microIndexDo) Omit(cols ...field.Expr) IMicroIndexDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m microIndexDo) Join(table schema.Tabler, on ...field.Expr) IMicroIndexDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m microIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMicroIndexDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m microIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IMicroIndexDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m microIndexDo) Group(cols ...field.Expr) IMicroIndexDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m microIndexDo) Having(conds ...gen.Condition) IMicroIndexDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m microIndexDo) Limit(limit int) IMicroIndexDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m microIndexDo) Offset(offset int) IMicroIndexDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m microIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMicroIndexDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m microIndexDo) Unscoped() IMicroIndexDo {
	return m.withDO(m.DO.Unscoped())
}

func (m microIndexDo) Create(values ...*pasture.MicroIndex) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m microIndexDo) CreateInBatches(values []*pasture.MicroIndex, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m microIndexDo) Save(values ...*pasture.MicroIndex) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m microIndexDo) First() (*pasture.MicroIndex, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.MicroIndex), nil
	}
}

func (m microIndexDo) Take() (*pasture.MicroIndex, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.MicroIndex), nil
	}
}

func (m microIndexDo) Last() (*pasture.MicroIndex, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.MicroIndex), nil
	}
}

func (m microIndexDo) Find() ([]*pasture.MicroIndex, error) {
	result, err := m.DO.Find()
	return result.([]*pasture.MicroIndex), err
}

func (m microIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.MicroIndex, err error) {
	buf := make([]*pasture.MicroIndex, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m microIndexDo) FindInBatches(result *[]*pasture.MicroIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m microIndexDo) Attrs(attrs ...field.AssignExpr) IMicroIndexDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m microIndexDo) Assign(attrs ...field.AssignExpr) IMicroIndexDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m microIndexDo) Joins(fields ...field.RelationField) IMicroIndexDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m microIndexDo) Preload(fields ...field.RelationField) IMicroIndexDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m microIndexDo) FirstOrInit() (*pasture.MicroIndex, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.MicroIndex), nil
	}
}

func (m microIndexDo) FirstOrCreate() (*pasture.MicroIndex, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.MicroIndex), nil
	}
}

func (m microIndexDo) FindByPage(offset int, limit int) (result []*pasture.MicroIndex, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m microIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m microIndexDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m microIndexDo) Delete(models ...*pasture.MicroIndex) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *microIndexDo) withDO(do gen.Dao) *microIndexDo {
	m.DO = *do.(*gen.DO)
	return m
}
