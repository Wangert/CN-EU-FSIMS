// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPackShop(db *gorm.DB, opts ...gen.DOOption) packShop {
	_packShop := packShop{}

	_packShop.packShopDo.UseDB(db, opts...)
	_packShop.packShopDo.UseModel(&slaughter.PackShop{})

	tableName := _packShop.packShopDo.TableName()
	_packShop.ALL = field.NewAsterisk(tableName)
	_packShop.ID = field.NewUint(tableName, "id")
	_packShop.CreatedAt = field.NewTime(tableName, "created_at")
	_packShop.UpdatedAt = field.NewTime(tableName, "updated_at")
	_packShop.DeletedAt = field.NewField(tableName, "deleted_at")
	_packShop.HouseNumber = field.NewString(tableName, "house_number")
	_packShop.TimeRecordAt = field.NewTime(tableName, "time_record_at")
	_packShop.PackShop1 = field.NewFloat32(tableName, "pack_shop1")
	_packShop.PackShop2 = field.NewFloat32(tableName, "pack_shop2")
	_packShop.PackShop3 = field.NewFloat32(tableName, "pack_shop3")
	_packShop.PackShop4 = field.NewFloat32(tableName, "pack_shop4")
	_packShop.PackShop5 = field.NewFloat32(tableName, "pack_shop5")
	_packShop.PackShop6 = field.NewFloat32(tableName, "pack_shop6")
	_packShop.PackShop7 = field.NewFloat32(tableName, "pack_shop7")
	_packShop.PackShop8 = field.NewFloat32(tableName, "pack_shop8")
	_packShop.PackShop9 = field.NewFloat32(tableName, "pack_shop9")
	_packShop.PackShop10 = field.NewString(tableName, "pack_shop10")
	_packShop.PackShop11 = field.NewString(tableName, "pack_shop11")
	_packShop.PackShop12 = field.NewString(tableName, "pack_shop12")
	_packShop.PackShop13 = field.NewString(tableName, "pack_shop13")
	_packShop.PackShop14 = field.NewString(tableName, "pack_shop14")

	_packShop.fillFieldMap()

	return _packShop
}

type packShop struct {
	packShopDo packShopDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	HouseNumber  field.String
	TimeRecordAt field.Time
	PackShop1    field.Float32
	PackShop2    field.Float32
	PackShop3    field.Float32
	PackShop4    field.Float32
	PackShop5    field.Float32
	PackShop6    field.Float32
	PackShop7    field.Float32
	PackShop8    field.Float32
	PackShop9    field.Float32
	PackShop10   field.String
	PackShop11   field.String
	PackShop12   field.String
	PackShop13   field.String
	PackShop14   field.String

	fieldMap map[string]field.Expr
}

func (p packShop) Table(newTableName string) *packShop {
	p.packShopDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p packShop) As(alias string) *packShop {
	p.packShopDo.DO = *(p.packShopDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *packShop) updateTableName(table string) *packShop {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.HouseNumber = field.NewString(table, "house_number")
	p.TimeRecordAt = field.NewTime(table, "time_record_at")
	p.PackShop1 = field.NewFloat32(table, "pack_shop1")
	p.PackShop2 = field.NewFloat32(table, "pack_shop2")
	p.PackShop3 = field.NewFloat32(table, "pack_shop3")
	p.PackShop4 = field.NewFloat32(table, "pack_shop4")
	p.PackShop5 = field.NewFloat32(table, "pack_shop5")
	p.PackShop6 = field.NewFloat32(table, "pack_shop6")
	p.PackShop7 = field.NewFloat32(table, "pack_shop7")
	p.PackShop8 = field.NewFloat32(table, "pack_shop8")
	p.PackShop9 = field.NewFloat32(table, "pack_shop9")
	p.PackShop10 = field.NewString(table, "pack_shop10")
	p.PackShop11 = field.NewString(table, "pack_shop11")
	p.PackShop12 = field.NewString(table, "pack_shop12")
	p.PackShop13 = field.NewString(table, "pack_shop13")
	p.PackShop14 = field.NewString(table, "pack_shop14")

	p.fillFieldMap()

	return p
}

func (p *packShop) WithContext(ctx context.Context) IPackShopDo { return p.packShopDo.WithContext(ctx) }

func (p packShop) TableName() string { return p.packShopDo.TableName() }

func (p packShop) Alias() string { return p.packShopDo.Alias() }

func (p packShop) Columns(cols ...field.Expr) gen.Columns { return p.packShopDo.Columns(cols...) }

func (p *packShop) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *packShop) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 20)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["house_number"] = p.HouseNumber
	p.fieldMap["time_record_at"] = p.TimeRecordAt
	p.fieldMap["pack_shop1"] = p.PackShop1
	p.fieldMap["pack_shop2"] = p.PackShop2
	p.fieldMap["pack_shop3"] = p.PackShop3
	p.fieldMap["pack_shop4"] = p.PackShop4
	p.fieldMap["pack_shop5"] = p.PackShop5
	p.fieldMap["pack_shop6"] = p.PackShop6
	p.fieldMap["pack_shop7"] = p.PackShop7
	p.fieldMap["pack_shop8"] = p.PackShop8
	p.fieldMap["pack_shop9"] = p.PackShop9
	p.fieldMap["pack_shop10"] = p.PackShop10
	p.fieldMap["pack_shop11"] = p.PackShop11
	p.fieldMap["pack_shop12"] = p.PackShop12
	p.fieldMap["pack_shop13"] = p.PackShop13
	p.fieldMap["pack_shop14"] = p.PackShop14
}

func (p packShop) clone(db *gorm.DB) packShop {
	p.packShopDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p packShop) replaceDB(db *gorm.DB) packShop {
	p.packShopDo.ReplaceDB(db)
	return p
}

type packShopDo struct{ gen.DO }

type IPackShopDo interface {
	gen.SubQuery
	Debug() IPackShopDo
	WithContext(ctx context.Context) IPackShopDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPackShopDo
	WriteDB() IPackShopDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPackShopDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPackShopDo
	Not(conds ...gen.Condition) IPackShopDo
	Or(conds ...gen.Condition) IPackShopDo
	Select(conds ...field.Expr) IPackShopDo
	Where(conds ...gen.Condition) IPackShopDo
	Order(conds ...field.Expr) IPackShopDo
	Distinct(cols ...field.Expr) IPackShopDo
	Omit(cols ...field.Expr) IPackShopDo
	Join(table schema.Tabler, on ...field.Expr) IPackShopDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPackShopDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPackShopDo
	Group(cols ...field.Expr) IPackShopDo
	Having(conds ...gen.Condition) IPackShopDo
	Limit(limit int) IPackShopDo
	Offset(offset int) IPackShopDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPackShopDo
	Unscoped() IPackShopDo
	Create(values ...*slaughter.PackShop) error
	CreateInBatches(values []*slaughter.PackShop, batchSize int) error
	Save(values ...*slaughter.PackShop) error
	First() (*slaughter.PackShop, error)
	Take() (*slaughter.PackShop, error)
	Last() (*slaughter.PackShop, error)
	Find() ([]*slaughter.PackShop, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.PackShop, err error)
	FindInBatches(result *[]*slaughter.PackShop, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.PackShop) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPackShopDo
	Assign(attrs ...field.AssignExpr) IPackShopDo
	Joins(fields ...field.RelationField) IPackShopDo
	Preload(fields ...field.RelationField) IPackShopDo
	FirstOrInit() (*slaughter.PackShop, error)
	FirstOrCreate() (*slaughter.PackShop, error)
	FindByPage(offset int, limit int) (result []*slaughter.PackShop, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPackShopDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p packShopDo) Debug() IPackShopDo {
	return p.withDO(p.DO.Debug())
}

func (p packShopDo) WithContext(ctx context.Context) IPackShopDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p packShopDo) ReadDB() IPackShopDo {
	return p.Clauses(dbresolver.Read)
}

func (p packShopDo) WriteDB() IPackShopDo {
	return p.Clauses(dbresolver.Write)
}

func (p packShopDo) Session(config *gorm.Session) IPackShopDo {
	return p.withDO(p.DO.Session(config))
}

func (p packShopDo) Clauses(conds ...clause.Expression) IPackShopDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p packShopDo) Returning(value interface{}, columns ...string) IPackShopDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p packShopDo) Not(conds ...gen.Condition) IPackShopDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p packShopDo) Or(conds ...gen.Condition) IPackShopDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p packShopDo) Select(conds ...field.Expr) IPackShopDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p packShopDo) Where(conds ...gen.Condition) IPackShopDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p packShopDo) Order(conds ...field.Expr) IPackShopDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p packShopDo) Distinct(cols ...field.Expr) IPackShopDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p packShopDo) Omit(cols ...field.Expr) IPackShopDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p packShopDo) Join(table schema.Tabler, on ...field.Expr) IPackShopDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p packShopDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPackShopDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p packShopDo) RightJoin(table schema.Tabler, on ...field.Expr) IPackShopDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p packShopDo) Group(cols ...field.Expr) IPackShopDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p packShopDo) Having(conds ...gen.Condition) IPackShopDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p packShopDo) Limit(limit int) IPackShopDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p packShopDo) Offset(offset int) IPackShopDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p packShopDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPackShopDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p packShopDo) Unscoped() IPackShopDo {
	return p.withDO(p.DO.Unscoped())
}

func (p packShopDo) Create(values ...*slaughter.PackShop) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p packShopDo) CreateInBatches(values []*slaughter.PackShop, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p packShopDo) Save(values ...*slaughter.PackShop) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p packShopDo) First() (*slaughter.PackShop, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.PackShop), nil
	}
}

func (p packShopDo) Take() (*slaughter.PackShop, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.PackShop), nil
	}
}

func (p packShopDo) Last() (*slaughter.PackShop, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.PackShop), nil
	}
}

func (p packShopDo) Find() ([]*slaughter.PackShop, error) {
	result, err := p.DO.Find()
	return result.([]*slaughter.PackShop), err
}

func (p packShopDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.PackShop, err error) {
	buf := make([]*slaughter.PackShop, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p packShopDo) FindInBatches(result *[]*slaughter.PackShop, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p packShopDo) Attrs(attrs ...field.AssignExpr) IPackShopDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p packShopDo) Assign(attrs ...field.AssignExpr) IPackShopDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p packShopDo) Joins(fields ...field.RelationField) IPackShopDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p packShopDo) Preload(fields ...field.RelationField) IPackShopDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p packShopDo) FirstOrInit() (*slaughter.PackShop, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.PackShop), nil
	}
}

func (p packShopDo) FirstOrCreate() (*slaughter.PackShop, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.PackShop), nil
	}
}

func (p packShopDo) FindByPage(offset int, limit int) (result []*slaughter.PackShop, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p packShopDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p packShopDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p packShopDo) Delete(models ...*slaughter.PackShop) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *packShopDo) withDO(do gen.Dao) *packShopDo {
	p.DO = *do.(*gen.DO)
	return p
}
