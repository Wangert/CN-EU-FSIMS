// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newIndustrialChain(db *gorm.DB, opts ...gen.DOOption) industrialChain {
	_industrialChain := industrialChain{}

	_industrialChain.industrialChainDo.UseDB(db, opts...)
	_industrialChain.industrialChainDo.UseModel(&models.IndustrialChain{})

	tableName := _industrialChain.industrialChainDo.TableName()
	_industrialChain.ALL = field.NewAsterisk(tableName)
	_industrialChain.ID = field.NewUint(tableName, "id")
	_industrialChain.CreatedAt = field.NewTime(tableName, "created_at")
	_industrialChain.UpdatedAt = field.NewTime(tableName, "updated_at")
	_industrialChain.DeletedAt = field.NewField(tableName, "deleted_at")
	_industrialChain.ICID = field.NewString(tableName, "ic_id")
	_industrialChain.Type = field.NewString(tableName, "type")
	_industrialChain.State = field.NewUint(tableName, "state")
	_industrialChain.StartTimestamp = field.NewTime(tableName, "start_timestamp")
	_industrialChain.CompletedTimestamp = field.NewTime(tableName, "completed_timestamp")
	_industrialChain.Procedures = industrialChainHasManyProcedures{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Procedures", "models.Procedure"),
		SubProcedures: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Procedures.SubProcedures", "models.SubProcedure"),
		},
	}

	_industrialChain.fillFieldMap()

	return _industrialChain
}

type industrialChain struct {
	industrialChainDo industrialChainDo

	ALL                field.Asterisk
	ID                 field.Uint
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field
	ICID               field.String
	Type               field.String
	State              field.Uint
	StartTimestamp     field.Time
	CompletedTimestamp field.Time
	Procedures         industrialChainHasManyProcedures

	fieldMap map[string]field.Expr
}

func (i industrialChain) Table(newTableName string) *industrialChain {
	i.industrialChainDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i industrialChain) As(alias string) *industrialChain {
	i.industrialChainDo.DO = *(i.industrialChainDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *industrialChain) updateTableName(table string) *industrialChain {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewUint(table, "id")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.ICID = field.NewString(table, "ic_id")
	i.Type = field.NewString(table, "type")
	i.State = field.NewUint(table, "state")
	i.StartTimestamp = field.NewTime(table, "start_timestamp")
	i.CompletedTimestamp = field.NewTime(table, "completed_timestamp")

	i.fillFieldMap()

	return i
}

func (i *industrialChain) WithContext(ctx context.Context) IIndustrialChainDo {
	return i.industrialChainDo.WithContext(ctx)
}

func (i industrialChain) TableName() string { return i.industrialChainDo.TableName() }

func (i industrialChain) Alias() string { return i.industrialChainDo.Alias() }

func (i industrialChain) Columns(cols ...field.Expr) gen.Columns {
	return i.industrialChainDo.Columns(cols...)
}

func (i *industrialChain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *industrialChain) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 10)
	i.fieldMap["id"] = i.ID
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["ic_id"] = i.ICID
	i.fieldMap["type"] = i.Type
	i.fieldMap["state"] = i.State
	i.fieldMap["start_timestamp"] = i.StartTimestamp
	i.fieldMap["completed_timestamp"] = i.CompletedTimestamp

}

func (i industrialChain) clone(db *gorm.DB) industrialChain {
	i.industrialChainDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i industrialChain) replaceDB(db *gorm.DB) industrialChain {
	i.industrialChainDo.ReplaceDB(db)
	return i
}

type industrialChainHasManyProcedures struct {
	db *gorm.DB

	field.RelationField

	SubProcedures struct {
		field.RelationField
	}
}

func (a industrialChainHasManyProcedures) Where(conds ...field.Expr) *industrialChainHasManyProcedures {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a industrialChainHasManyProcedures) WithContext(ctx context.Context) *industrialChainHasManyProcedures {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a industrialChainHasManyProcedures) Session(session *gorm.Session) *industrialChainHasManyProcedures {
	a.db = a.db.Session(session)
	return &a
}

func (a industrialChainHasManyProcedures) Model(m *models.IndustrialChain) *industrialChainHasManyProceduresTx {
	return &industrialChainHasManyProceduresTx{a.db.Model(m).Association(a.Name())}
}

type industrialChainHasManyProceduresTx struct{ tx *gorm.Association }

func (a industrialChainHasManyProceduresTx) Find() (result []*models.Procedure, err error) {
	return result, a.tx.Find(&result)
}

func (a industrialChainHasManyProceduresTx) Append(values ...*models.Procedure) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a industrialChainHasManyProceduresTx) Replace(values ...*models.Procedure) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a industrialChainHasManyProceduresTx) Delete(values ...*models.Procedure) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a industrialChainHasManyProceduresTx) Clear() error {
	return a.tx.Clear()
}

func (a industrialChainHasManyProceduresTx) Count() int64 {
	return a.tx.Count()
}

type industrialChainDo struct{ gen.DO }

type IIndustrialChainDo interface {
	gen.SubQuery
	Debug() IIndustrialChainDo
	WithContext(ctx context.Context) IIndustrialChainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIndustrialChainDo
	WriteDB() IIndustrialChainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIndustrialChainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIndustrialChainDo
	Not(conds ...gen.Condition) IIndustrialChainDo
	Or(conds ...gen.Condition) IIndustrialChainDo
	Select(conds ...field.Expr) IIndustrialChainDo
	Where(conds ...gen.Condition) IIndustrialChainDo
	Order(conds ...field.Expr) IIndustrialChainDo
	Distinct(cols ...field.Expr) IIndustrialChainDo
	Omit(cols ...field.Expr) IIndustrialChainDo
	Join(table schema.Tabler, on ...field.Expr) IIndustrialChainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIndustrialChainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIndustrialChainDo
	Group(cols ...field.Expr) IIndustrialChainDo
	Having(conds ...gen.Condition) IIndustrialChainDo
	Limit(limit int) IIndustrialChainDo
	Offset(offset int) IIndustrialChainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIndustrialChainDo
	Unscoped() IIndustrialChainDo
	Create(values ...*models.IndustrialChain) error
	CreateInBatches(values []*models.IndustrialChain, batchSize int) error
	Save(values ...*models.IndustrialChain) error
	First() (*models.IndustrialChain, error)
	Take() (*models.IndustrialChain, error)
	Last() (*models.IndustrialChain, error)
	Find() ([]*models.IndustrialChain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.IndustrialChain, err error)
	FindInBatches(result *[]*models.IndustrialChain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.IndustrialChain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIndustrialChainDo
	Assign(attrs ...field.AssignExpr) IIndustrialChainDo
	Joins(fields ...field.RelationField) IIndustrialChainDo
	Preload(fields ...field.RelationField) IIndustrialChainDo
	FirstOrInit() (*models.IndustrialChain, error)
	FirstOrCreate() (*models.IndustrialChain, error)
	FindByPage(offset int, limit int) (result []*models.IndustrialChain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIndustrialChainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i industrialChainDo) Debug() IIndustrialChainDo {
	return i.withDO(i.DO.Debug())
}

func (i industrialChainDo) WithContext(ctx context.Context) IIndustrialChainDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i industrialChainDo) ReadDB() IIndustrialChainDo {
	return i.Clauses(dbresolver.Read)
}

func (i industrialChainDo) WriteDB() IIndustrialChainDo {
	return i.Clauses(dbresolver.Write)
}

func (i industrialChainDo) Session(config *gorm.Session) IIndustrialChainDo {
	return i.withDO(i.DO.Session(config))
}

func (i industrialChainDo) Clauses(conds ...clause.Expression) IIndustrialChainDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i industrialChainDo) Returning(value interface{}, columns ...string) IIndustrialChainDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i industrialChainDo) Not(conds ...gen.Condition) IIndustrialChainDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i industrialChainDo) Or(conds ...gen.Condition) IIndustrialChainDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i industrialChainDo) Select(conds ...field.Expr) IIndustrialChainDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i industrialChainDo) Where(conds ...gen.Condition) IIndustrialChainDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i industrialChainDo) Order(conds ...field.Expr) IIndustrialChainDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i industrialChainDo) Distinct(cols ...field.Expr) IIndustrialChainDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i industrialChainDo) Omit(cols ...field.Expr) IIndustrialChainDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i industrialChainDo) Join(table schema.Tabler, on ...field.Expr) IIndustrialChainDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i industrialChainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIndustrialChainDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i industrialChainDo) RightJoin(table schema.Tabler, on ...field.Expr) IIndustrialChainDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i industrialChainDo) Group(cols ...field.Expr) IIndustrialChainDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i industrialChainDo) Having(conds ...gen.Condition) IIndustrialChainDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i industrialChainDo) Limit(limit int) IIndustrialChainDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i industrialChainDo) Offset(offset int) IIndustrialChainDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i industrialChainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIndustrialChainDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i industrialChainDo) Unscoped() IIndustrialChainDo {
	return i.withDO(i.DO.Unscoped())
}

func (i industrialChainDo) Create(values ...*models.IndustrialChain) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i industrialChainDo) CreateInBatches(values []*models.IndustrialChain, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i industrialChainDo) Save(values ...*models.IndustrialChain) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i industrialChainDo) First() (*models.IndustrialChain, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.IndustrialChain), nil
	}
}

func (i industrialChainDo) Take() (*models.IndustrialChain, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.IndustrialChain), nil
	}
}

func (i industrialChainDo) Last() (*models.IndustrialChain, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.IndustrialChain), nil
	}
}

func (i industrialChainDo) Find() ([]*models.IndustrialChain, error) {
	result, err := i.DO.Find()
	return result.([]*models.IndustrialChain), err
}

func (i industrialChainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.IndustrialChain, err error) {
	buf := make([]*models.IndustrialChain, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i industrialChainDo) FindInBatches(result *[]*models.IndustrialChain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i industrialChainDo) Attrs(attrs ...field.AssignExpr) IIndustrialChainDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i industrialChainDo) Assign(attrs ...field.AssignExpr) IIndustrialChainDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i industrialChainDo) Joins(fields ...field.RelationField) IIndustrialChainDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i industrialChainDo) Preload(fields ...field.RelationField) IIndustrialChainDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i industrialChainDo) FirstOrInit() (*models.IndustrialChain, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.IndustrialChain), nil
	}
}

func (i industrialChainDo) FirstOrCreate() (*models.IndustrialChain, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.IndustrialChain), nil
	}
}

func (i industrialChainDo) FindByPage(offset int, limit int) (result []*models.IndustrialChain, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i industrialChainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i industrialChainDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i industrialChainDo) Delete(models ...*models.IndustrialChain) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *industrialChainDo) withDO(do gen.Dao) *industrialChainDo {
	i.DO = *do.(*gen.DO)
	return i
}
