// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAfb1(db *gorm.DB, opts ...gen.DOOption) afb1 {
	_afb1 := afb1{}

	_afb1.afb1Do.UseDB(db, opts...)
	_afb1.afb1Do.UseModel(&pasture.Afb1{})

	tableName := _afb1.afb1Do.TableName()
	_afb1.ALL = field.NewAsterisk(tableName)
	_afb1.ID = field.NewUint(tableName, "id")
	_afb1.CreatedAt = field.NewTime(tableName, "created_at")
	_afb1.UpdatedAt = field.NewTime(tableName, "updated_at")
	_afb1.DeletedAt = field.NewField(tableName, "deleted_at")
	_afb1.CassID = field.NewUint(tableName, "cass_id")
	_afb1.Afb11 = field.NewFloat64(tableName, "afb11")
	_afb1.Afb12 = field.NewFloat64(tableName, "afb12")
	_afb1.Afb13 = field.NewFloat64(tableName, "afb13")
	_afb1.Afb14 = field.NewFloat64(tableName, "afb14")
	_afb1.Afb15 = field.NewFloat64(tableName, "afb15")
	_afb1.Afb16 = field.NewFloat64(tableName, "afb16")
	_afb1.Afb17 = field.NewFloat64(tableName, "afb17")

	_afb1.fillFieldMap()

	return _afb1
}

type afb1 struct {
	afb1Do afb1Do

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	CassID    field.Uint
	Afb11     field.Float64
	Afb12     field.Float64
	Afb13     field.Float64
	Afb14     field.Float64
	Afb15     field.Float64
	Afb16     field.Float64
	Afb17     field.Float64

	fieldMap map[string]field.Expr
}

func (a afb1) Table(newTableName string) *afb1 {
	a.afb1Do.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a afb1) As(alias string) *afb1 {
	a.afb1Do.DO = *(a.afb1Do.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *afb1) updateTableName(table string) *afb1 {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.CassID = field.NewUint(table, "cass_id")
	a.Afb11 = field.NewFloat64(table, "afb11")
	a.Afb12 = field.NewFloat64(table, "afb12")
	a.Afb13 = field.NewFloat64(table, "afb13")
	a.Afb14 = field.NewFloat64(table, "afb14")
	a.Afb15 = field.NewFloat64(table, "afb15")
	a.Afb16 = field.NewFloat64(table, "afb16")
	a.Afb17 = field.NewFloat64(table, "afb17")

	a.fillFieldMap()

	return a
}

func (a *afb1) WithContext(ctx context.Context) IAfb1Do { return a.afb1Do.WithContext(ctx) }

func (a afb1) TableName() string { return a.afb1Do.TableName() }

func (a afb1) Alias() string { return a.afb1Do.Alias() }

func (a afb1) Columns(cols ...field.Expr) gen.Columns { return a.afb1Do.Columns(cols...) }

func (a *afb1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *afb1) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["cass_id"] = a.CassID
	a.fieldMap["afb11"] = a.Afb11
	a.fieldMap["afb12"] = a.Afb12
	a.fieldMap["afb13"] = a.Afb13
	a.fieldMap["afb14"] = a.Afb14
	a.fieldMap["afb15"] = a.Afb15
	a.fieldMap["afb16"] = a.Afb16
	a.fieldMap["afb17"] = a.Afb17
}

func (a afb1) clone(db *gorm.DB) afb1 {
	a.afb1Do.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a afb1) replaceDB(db *gorm.DB) afb1 {
	a.afb1Do.ReplaceDB(db)
	return a
}

type afb1Do struct{ gen.DO }

type IAfb1Do interface {
	gen.SubQuery
	Debug() IAfb1Do
	WithContext(ctx context.Context) IAfb1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAfb1Do
	WriteDB() IAfb1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAfb1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAfb1Do
	Not(conds ...gen.Condition) IAfb1Do
	Or(conds ...gen.Condition) IAfb1Do
	Select(conds ...field.Expr) IAfb1Do
	Where(conds ...gen.Condition) IAfb1Do
	Order(conds ...field.Expr) IAfb1Do
	Distinct(cols ...field.Expr) IAfb1Do
	Omit(cols ...field.Expr) IAfb1Do
	Join(table schema.Tabler, on ...field.Expr) IAfb1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IAfb1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IAfb1Do
	Group(cols ...field.Expr) IAfb1Do
	Having(conds ...gen.Condition) IAfb1Do
	Limit(limit int) IAfb1Do
	Offset(offset int) IAfb1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAfb1Do
	Unscoped() IAfb1Do
	Create(values ...*pasture.Afb1) error
	CreateInBatches(values []*pasture.Afb1, batchSize int) error
	Save(values ...*pasture.Afb1) error
	First() (*pasture.Afb1, error)
	Take() (*pasture.Afb1, error)
	Last() (*pasture.Afb1, error)
	Find() ([]*pasture.Afb1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.Afb1, err error)
	FindInBatches(result *[]*pasture.Afb1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.Afb1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAfb1Do
	Assign(attrs ...field.AssignExpr) IAfb1Do
	Joins(fields ...field.RelationField) IAfb1Do
	Preload(fields ...field.RelationField) IAfb1Do
	FirstOrInit() (*pasture.Afb1, error)
	FirstOrCreate() (*pasture.Afb1, error)
	FindByPage(offset int, limit int) (result []*pasture.Afb1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAfb1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a afb1Do) Debug() IAfb1Do {
	return a.withDO(a.DO.Debug())
}

func (a afb1Do) WithContext(ctx context.Context) IAfb1Do {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a afb1Do) ReadDB() IAfb1Do {
	return a.Clauses(dbresolver.Read)
}

func (a afb1Do) WriteDB() IAfb1Do {
	return a.Clauses(dbresolver.Write)
}

func (a afb1Do) Session(config *gorm.Session) IAfb1Do {
	return a.withDO(a.DO.Session(config))
}

func (a afb1Do) Clauses(conds ...clause.Expression) IAfb1Do {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a afb1Do) Returning(value interface{}, columns ...string) IAfb1Do {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a afb1Do) Not(conds ...gen.Condition) IAfb1Do {
	return a.withDO(a.DO.Not(conds...))
}

func (a afb1Do) Or(conds ...gen.Condition) IAfb1Do {
	return a.withDO(a.DO.Or(conds...))
}

func (a afb1Do) Select(conds ...field.Expr) IAfb1Do {
	return a.withDO(a.DO.Select(conds...))
}

func (a afb1Do) Where(conds ...gen.Condition) IAfb1Do {
	return a.withDO(a.DO.Where(conds...))
}

func (a afb1Do) Order(conds ...field.Expr) IAfb1Do {
	return a.withDO(a.DO.Order(conds...))
}

func (a afb1Do) Distinct(cols ...field.Expr) IAfb1Do {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a afb1Do) Omit(cols ...field.Expr) IAfb1Do {
	return a.withDO(a.DO.Omit(cols...))
}

func (a afb1Do) Join(table schema.Tabler, on ...field.Expr) IAfb1Do {
	return a.withDO(a.DO.Join(table, on...))
}

func (a afb1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IAfb1Do {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a afb1Do) RightJoin(table schema.Tabler, on ...field.Expr) IAfb1Do {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a afb1Do) Group(cols ...field.Expr) IAfb1Do {
	return a.withDO(a.DO.Group(cols...))
}

func (a afb1Do) Having(conds ...gen.Condition) IAfb1Do {
	return a.withDO(a.DO.Having(conds...))
}

func (a afb1Do) Limit(limit int) IAfb1Do {
	return a.withDO(a.DO.Limit(limit))
}

func (a afb1Do) Offset(offset int) IAfb1Do {
	return a.withDO(a.DO.Offset(offset))
}

func (a afb1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IAfb1Do {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a afb1Do) Unscoped() IAfb1Do {
	return a.withDO(a.DO.Unscoped())
}

func (a afb1Do) Create(values ...*pasture.Afb1) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a afb1Do) CreateInBatches(values []*pasture.Afb1, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a afb1Do) Save(values ...*pasture.Afb1) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a afb1Do) First() (*pasture.Afb1, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Afb1), nil
	}
}

func (a afb1Do) Take() (*pasture.Afb1, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Afb1), nil
	}
}

func (a afb1Do) Last() (*pasture.Afb1, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Afb1), nil
	}
}

func (a afb1Do) Find() ([]*pasture.Afb1, error) {
	result, err := a.DO.Find()
	return result.([]*pasture.Afb1), err
}

func (a afb1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.Afb1, err error) {
	buf := make([]*pasture.Afb1, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a afb1Do) FindInBatches(result *[]*pasture.Afb1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a afb1Do) Attrs(attrs ...field.AssignExpr) IAfb1Do {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a afb1Do) Assign(attrs ...field.AssignExpr) IAfb1Do {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a afb1Do) Joins(fields ...field.RelationField) IAfb1Do {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a afb1Do) Preload(fields ...field.RelationField) IAfb1Do {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a afb1Do) FirstOrInit() (*pasture.Afb1, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Afb1), nil
	}
}

func (a afb1Do) FirstOrCreate() (*pasture.Afb1, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Afb1), nil
	}
}

func (a afb1Do) FindByPage(offset int, limit int) (result []*pasture.Afb1, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a afb1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a afb1Do) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a afb1Do) Delete(models ...*pasture.Afb1) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *afb1Do) withDO(do gen.Dao) *afb1Do {
	a.DO = *do.(*gen.DO)
	return a
}
