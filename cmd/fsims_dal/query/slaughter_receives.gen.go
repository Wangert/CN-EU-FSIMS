// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/warehouse"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSlaughterReceive(db *gorm.DB, opts ...gen.DOOption) slaughterReceive {
	_slaughterReceive := slaughterReceive{}

	_slaughterReceive.slaughterReceiveDo.UseDB(db, opts...)
	_slaughterReceive.slaughterReceiveDo.UseModel(&warehouse.SlaughterReceive{})

	tableName := _slaughterReceive.slaughterReceiveDo.TableName()
	_slaughterReceive.ALL = field.NewAsterisk(tableName)
	_slaughterReceive.ID = field.NewUint(tableName, "id")
	_slaughterReceive.CreatedAt = field.NewTime(tableName, "created_at")
	_slaughterReceive.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slaughterReceive.DeletedAt = field.NewField(tableName, "deleted_at")
	_slaughterReceive.ProductNumber = field.NewString(tableName, "product_number")
	_slaughterReceive.ProductPID = field.NewString(tableName, "product_p_id")
	_slaughterReceive.ProductType = field.NewString(tableName, "product_type")
	_slaughterReceive.Operator = field.NewString(tableName, "operator")
	_slaughterReceive.ReceiveTimestamp = field.NewTime(tableName, "receive_timestamp")

	_slaughterReceive.fillFieldMap()

	return _slaughterReceive
}

type slaughterReceive struct {
	slaughterReceiveDo slaughterReceiveDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	ProductNumber    field.String
	ProductPID       field.String
	ProductType      field.String
	Operator         field.String
	ReceiveTimestamp field.Time

	fieldMap map[string]field.Expr
}

func (s slaughterReceive) Table(newTableName string) *slaughterReceive {
	s.slaughterReceiveDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slaughterReceive) As(alias string) *slaughterReceive {
	s.slaughterReceiveDo.DO = *(s.slaughterReceiveDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slaughterReceive) updateTableName(table string) *slaughterReceive {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.ProductNumber = field.NewString(table, "product_number")
	s.ProductPID = field.NewString(table, "product_p_id")
	s.ProductType = field.NewString(table, "product_type")
	s.Operator = field.NewString(table, "operator")
	s.ReceiveTimestamp = field.NewTime(table, "receive_timestamp")

	s.fillFieldMap()

	return s
}

func (s *slaughterReceive) WithContext(ctx context.Context) ISlaughterReceiveDo {
	return s.slaughterReceiveDo.WithContext(ctx)
}

func (s slaughterReceive) TableName() string { return s.slaughterReceiveDo.TableName() }

func (s slaughterReceive) Alias() string { return s.slaughterReceiveDo.Alias() }

func (s slaughterReceive) Columns(cols ...field.Expr) gen.Columns {
	return s.slaughterReceiveDo.Columns(cols...)
}

func (s *slaughterReceive) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slaughterReceive) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["product_number"] = s.ProductNumber
	s.fieldMap["product_p_id"] = s.ProductPID
	s.fieldMap["product_type"] = s.ProductType
	s.fieldMap["operator"] = s.Operator
	s.fieldMap["receive_timestamp"] = s.ReceiveTimestamp
}

func (s slaughterReceive) clone(db *gorm.DB) slaughterReceive {
	s.slaughterReceiveDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slaughterReceive) replaceDB(db *gorm.DB) slaughterReceive {
	s.slaughterReceiveDo.ReplaceDB(db)
	return s
}

type slaughterReceiveDo struct{ gen.DO }

type ISlaughterReceiveDo interface {
	gen.SubQuery
	Debug() ISlaughterReceiveDo
	WithContext(ctx context.Context) ISlaughterReceiveDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlaughterReceiveDo
	WriteDB() ISlaughterReceiveDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlaughterReceiveDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlaughterReceiveDo
	Not(conds ...gen.Condition) ISlaughterReceiveDo
	Or(conds ...gen.Condition) ISlaughterReceiveDo
	Select(conds ...field.Expr) ISlaughterReceiveDo
	Where(conds ...gen.Condition) ISlaughterReceiveDo
	Order(conds ...field.Expr) ISlaughterReceiveDo
	Distinct(cols ...field.Expr) ISlaughterReceiveDo
	Omit(cols ...field.Expr) ISlaughterReceiveDo
	Join(table schema.Tabler, on ...field.Expr) ISlaughterReceiveDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterReceiveDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterReceiveDo
	Group(cols ...field.Expr) ISlaughterReceiveDo
	Having(conds ...gen.Condition) ISlaughterReceiveDo
	Limit(limit int) ISlaughterReceiveDo
	Offset(offset int) ISlaughterReceiveDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterReceiveDo
	Unscoped() ISlaughterReceiveDo
	Create(values ...*warehouse.SlaughterReceive) error
	CreateInBatches(values []*warehouse.SlaughterReceive, batchSize int) error
	Save(values ...*warehouse.SlaughterReceive) error
	First() (*warehouse.SlaughterReceive, error)
	Take() (*warehouse.SlaughterReceive, error)
	Last() (*warehouse.SlaughterReceive, error)
	Find() ([]*warehouse.SlaughterReceive, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.SlaughterReceive, err error)
	FindInBatches(result *[]*warehouse.SlaughterReceive, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*warehouse.SlaughterReceive) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlaughterReceiveDo
	Assign(attrs ...field.AssignExpr) ISlaughterReceiveDo
	Joins(fields ...field.RelationField) ISlaughterReceiveDo
	Preload(fields ...field.RelationField) ISlaughterReceiveDo
	FirstOrInit() (*warehouse.SlaughterReceive, error)
	FirstOrCreate() (*warehouse.SlaughterReceive, error)
	FindByPage(offset int, limit int) (result []*warehouse.SlaughterReceive, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlaughterReceiveDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slaughterReceiveDo) Debug() ISlaughterReceiveDo {
	return s.withDO(s.DO.Debug())
}

func (s slaughterReceiveDo) WithContext(ctx context.Context) ISlaughterReceiveDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slaughterReceiveDo) ReadDB() ISlaughterReceiveDo {
	return s.Clauses(dbresolver.Read)
}

func (s slaughterReceiveDo) WriteDB() ISlaughterReceiveDo {
	return s.Clauses(dbresolver.Write)
}

func (s slaughterReceiveDo) Session(config *gorm.Session) ISlaughterReceiveDo {
	return s.withDO(s.DO.Session(config))
}

func (s slaughterReceiveDo) Clauses(conds ...clause.Expression) ISlaughterReceiveDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slaughterReceiveDo) Returning(value interface{}, columns ...string) ISlaughterReceiveDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slaughterReceiveDo) Not(conds ...gen.Condition) ISlaughterReceiveDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slaughterReceiveDo) Or(conds ...gen.Condition) ISlaughterReceiveDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slaughterReceiveDo) Select(conds ...field.Expr) ISlaughterReceiveDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slaughterReceiveDo) Where(conds ...gen.Condition) ISlaughterReceiveDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slaughterReceiveDo) Order(conds ...field.Expr) ISlaughterReceiveDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slaughterReceiveDo) Distinct(cols ...field.Expr) ISlaughterReceiveDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slaughterReceiveDo) Omit(cols ...field.Expr) ISlaughterReceiveDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slaughterReceiveDo) Join(table schema.Tabler, on ...field.Expr) ISlaughterReceiveDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slaughterReceiveDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterReceiveDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slaughterReceiveDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterReceiveDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slaughterReceiveDo) Group(cols ...field.Expr) ISlaughterReceiveDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slaughterReceiveDo) Having(conds ...gen.Condition) ISlaughterReceiveDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slaughterReceiveDo) Limit(limit int) ISlaughterReceiveDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slaughterReceiveDo) Offset(offset int) ISlaughterReceiveDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slaughterReceiveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterReceiveDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slaughterReceiveDo) Unscoped() ISlaughterReceiveDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slaughterReceiveDo) Create(values ...*warehouse.SlaughterReceive) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slaughterReceiveDo) CreateInBatches(values []*warehouse.SlaughterReceive, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slaughterReceiveDo) Save(values ...*warehouse.SlaughterReceive) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slaughterReceiveDo) First() (*warehouse.SlaughterReceive, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterReceive), nil
	}
}

func (s slaughterReceiveDo) Take() (*warehouse.SlaughterReceive, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterReceive), nil
	}
}

func (s slaughterReceiveDo) Last() (*warehouse.SlaughterReceive, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterReceive), nil
	}
}

func (s slaughterReceiveDo) Find() ([]*warehouse.SlaughterReceive, error) {
	result, err := s.DO.Find()
	return result.([]*warehouse.SlaughterReceive), err
}

func (s slaughterReceiveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.SlaughterReceive, err error) {
	buf := make([]*warehouse.SlaughterReceive, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slaughterReceiveDo) FindInBatches(result *[]*warehouse.SlaughterReceive, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slaughterReceiveDo) Attrs(attrs ...field.AssignExpr) ISlaughterReceiveDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slaughterReceiveDo) Assign(attrs ...field.AssignExpr) ISlaughterReceiveDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slaughterReceiveDo) Joins(fields ...field.RelationField) ISlaughterReceiveDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slaughterReceiveDo) Preload(fields ...field.RelationField) ISlaughterReceiveDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slaughterReceiveDo) FirstOrInit() (*warehouse.SlaughterReceive, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterReceive), nil
	}
}

func (s slaughterReceiveDo) FirstOrCreate() (*warehouse.SlaughterReceive, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterReceive), nil
	}
}

func (s slaughterReceiveDo) FindByPage(offset int, limit int) (result []*warehouse.SlaughterReceive, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slaughterReceiveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slaughterReceiveDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slaughterReceiveDo) Delete(models ...*warehouse.SlaughterReceive) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slaughterReceiveDo) withDO(do gen.Dao) *slaughterReceiveDo {
	s.DO = *do.(*gen.DO)
	return s
}
