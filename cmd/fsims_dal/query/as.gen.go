// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAs(db *gorm.DB, opts ...gen.DOOption) as {
	_as := as{}

	_as.asDo.UseDB(db, opts...)
	_as.asDo.UseModel(&pasture.As{})

	tableName := _as.asDo.TableName()
	_as.ALL = field.NewAsterisk(tableName)
	_as.ID = field.NewUint(tableName, "id")
	_as.CreatedAt = field.NewTime(tableName, "created_at")
	_as.UpdatedAt = field.NewTime(tableName, "updated_at")
	_as.DeletedAt = field.NewField(tableName, "deleted_at")
	_as.HeavyMetalID = field.NewUint(tableName, "heavy_metal_id")
	_as.As1 = field.NewFloat64(tableName, "as1")
	_as.As2 = field.NewFloat64(tableName, "as2")
	_as.As3 = field.NewFloat64(tableName, "as3")
	_as.As4 = field.NewFloat64(tableName, "as4")
	_as.As5 = field.NewFloat64(tableName, "as5")
	_as.As6 = field.NewFloat64(tableName, "as6")
	_as.As7 = field.NewFloat64(tableName, "as7")
	_as.As8 = field.NewFloat64(tableName, "as8")

	_as.fillFieldMap()

	return _as
}

type as struct {
	asDo asDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	HeavyMetalID field.Uint
	As1          field.Float64
	As2          field.Float64
	As3          field.Float64
	As4          field.Float64
	As5          field.Float64
	As6          field.Float64
	As7          field.Float64
	As8          field.Float64

	fieldMap map[string]field.Expr
}

func (a as) Table(newTableName string) *as {
	a.asDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a as) As(alias string) *as {
	a.asDo.DO = *(a.asDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *as) updateTableName(table string) *as {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.HeavyMetalID = field.NewUint(table, "heavy_metal_id")
	a.As1 = field.NewFloat64(table, "as1")
	a.As2 = field.NewFloat64(table, "as2")
	a.As3 = field.NewFloat64(table, "as3")
	a.As4 = field.NewFloat64(table, "as4")
	a.As5 = field.NewFloat64(table, "as5")
	a.As6 = field.NewFloat64(table, "as6")
	a.As7 = field.NewFloat64(table, "as7")
	a.As8 = field.NewFloat64(table, "as8")

	a.fillFieldMap()

	return a
}

func (a *as) WithContext(ctx context.Context) IAsDo { return a.asDo.WithContext(ctx) }

func (a as) TableName() string { return a.asDo.TableName() }

func (a as) Alias() string { return a.asDo.Alias() }

func (a as) Columns(cols ...field.Expr) gen.Columns { return a.asDo.Columns(cols...) }

func (a *as) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *as) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["heavy_metal_id"] = a.HeavyMetalID
	a.fieldMap["as1"] = a.As1
	a.fieldMap["as2"] = a.As2
	a.fieldMap["as3"] = a.As3
	a.fieldMap["as4"] = a.As4
	a.fieldMap["as5"] = a.As5
	a.fieldMap["as6"] = a.As6
	a.fieldMap["as7"] = a.As7
	a.fieldMap["as8"] = a.As8
}

func (a as) clone(db *gorm.DB) as {
	a.asDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a as) replaceDB(db *gorm.DB) as {
	a.asDo.ReplaceDB(db)
	return a
}

type asDo struct{ gen.DO }

type IAsDo interface {
	gen.SubQuery
	Debug() IAsDo
	WithContext(ctx context.Context) IAsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAsDo
	WriteDB() IAsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAsDo
	Not(conds ...gen.Condition) IAsDo
	Or(conds ...gen.Condition) IAsDo
	Select(conds ...field.Expr) IAsDo
	Where(conds ...gen.Condition) IAsDo
	Order(conds ...field.Expr) IAsDo
	Distinct(cols ...field.Expr) IAsDo
	Omit(cols ...field.Expr) IAsDo
	Join(table schema.Tabler, on ...field.Expr) IAsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAsDo
	Group(cols ...field.Expr) IAsDo
	Having(conds ...gen.Condition) IAsDo
	Limit(limit int) IAsDo
	Offset(offset int) IAsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAsDo
	Unscoped() IAsDo
	Create(values ...*pasture.As) error
	CreateInBatches(values []*pasture.As, batchSize int) error
	Save(values ...*pasture.As) error
	First() (*pasture.As, error)
	Take() (*pasture.As, error)
	Last() (*pasture.As, error)
	Find() ([]*pasture.As, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.As, err error)
	FindInBatches(result *[]*pasture.As, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.As) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAsDo
	Assign(attrs ...field.AssignExpr) IAsDo
	Joins(fields ...field.RelationField) IAsDo
	Preload(fields ...field.RelationField) IAsDo
	FirstOrInit() (*pasture.As, error)
	FirstOrCreate() (*pasture.As, error)
	FindByPage(offset int, limit int) (result []*pasture.As, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a asDo) Debug() IAsDo {
	return a.withDO(a.DO.Debug())
}

func (a asDo) WithContext(ctx context.Context) IAsDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a asDo) ReadDB() IAsDo {
	return a.Clauses(dbresolver.Read)
}

func (a asDo) WriteDB() IAsDo {
	return a.Clauses(dbresolver.Write)
}

func (a asDo) Session(config *gorm.Session) IAsDo {
	return a.withDO(a.DO.Session(config))
}

func (a asDo) Clauses(conds ...clause.Expression) IAsDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a asDo) Returning(value interface{}, columns ...string) IAsDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a asDo) Not(conds ...gen.Condition) IAsDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a asDo) Or(conds ...gen.Condition) IAsDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a asDo) Select(conds ...field.Expr) IAsDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a asDo) Where(conds ...gen.Condition) IAsDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a asDo) Order(conds ...field.Expr) IAsDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a asDo) Distinct(cols ...field.Expr) IAsDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a asDo) Omit(cols ...field.Expr) IAsDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a asDo) Join(table schema.Tabler, on ...field.Expr) IAsDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a asDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAsDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a asDo) RightJoin(table schema.Tabler, on ...field.Expr) IAsDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a asDo) Group(cols ...field.Expr) IAsDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a asDo) Having(conds ...gen.Condition) IAsDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a asDo) Limit(limit int) IAsDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a asDo) Offset(offset int) IAsDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a asDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAsDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a asDo) Unscoped() IAsDo {
	return a.withDO(a.DO.Unscoped())
}

func (a asDo) Create(values ...*pasture.As) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a asDo) CreateInBatches(values []*pasture.As, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a asDo) Save(values ...*pasture.As) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a asDo) First() (*pasture.As, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.As), nil
	}
}

func (a asDo) Take() (*pasture.As, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.As), nil
	}
}

func (a asDo) Last() (*pasture.As, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.As), nil
	}
}

func (a asDo) Find() ([]*pasture.As, error) {
	result, err := a.DO.Find()
	return result.([]*pasture.As), err
}

func (a asDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.As, err error) {
	buf := make([]*pasture.As, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a asDo) FindInBatches(result *[]*pasture.As, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a asDo) Attrs(attrs ...field.AssignExpr) IAsDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a asDo) Assign(attrs ...field.AssignExpr) IAsDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a asDo) Joins(fields ...field.RelationField) IAsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a asDo) Preload(fields ...field.RelationField) IAsDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a asDo) FirstOrInit() (*pasture.As, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.As), nil
	}
}

func (a asDo) FirstOrCreate() (*pasture.As, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.As), nil
	}
}

func (a asDo) FindByPage(offset int, limit int) (result []*pasture.As, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a asDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a asDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a asDo) Delete(models ...*pasture.As) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *asDo) withDO(do gen.Dao) *asDo {
	a.DO = *do.(*gen.DO)
	return a
}
