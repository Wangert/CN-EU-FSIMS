// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureToxIndex(db *gorm.DB, opts ...gen.DOOption) pastureToxIndex {
	_pastureToxIndex := pastureToxIndex{}

	_pastureToxIndex.pastureToxIndexDo.UseDB(db, opts...)
	_pastureToxIndex.pastureToxIndexDo.UseModel(&pasture.PastureToxIndex{})

	tableName := _pastureToxIndex.pastureToxIndexDo.TableName()
	_pastureToxIndex.ALL = field.NewAsterisk(tableName)
	_pastureToxIndex.ID = field.NewUint(tableName, "id")
	_pastureToxIndex.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureToxIndex.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureToxIndex.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureToxIndex.PastureWaterRecordID = field.NewUint(tableName, "pasture_water_record_id")
	_pastureToxIndex.ToxIndex1 = field.NewFloat64(tableName, "tox_index1")
	_pastureToxIndex.ToxIndex2 = field.NewFloat64(tableName, "tox_index2")
	_pastureToxIndex.ToxIndex3 = field.NewFloat64(tableName, "tox_index3")
	_pastureToxIndex.ToxIndex4 = field.NewFloat64(tableName, "tox_index4")
	_pastureToxIndex.ToxIndex5 = field.NewFloat64(tableName, "tox_index5")
	_pastureToxIndex.ToxIndex6 = field.NewFloat64(tableName, "tox_index6")
	_pastureToxIndex.ToxIndex7 = field.NewFloat64(tableName, "tox_index7")
	_pastureToxIndex.ToxIndex8 = field.NewFloat64(tableName, "tox_index8")
	_pastureToxIndex.ToxIndex9 = field.NewFloat64(tableName, "tox_index9")
	_pastureToxIndex.ToxIndex10 = field.NewFloat64(tableName, "tox_index10")
	_pastureToxIndex.ToxIndex11 = field.NewFloat64(tableName, "tox_index11")
	_pastureToxIndex.ToxIndex12 = field.NewFloat64(tableName, "tox_index12")
	_pastureToxIndex.ToxIndex13 = field.NewFloat64(tableName, "tox_index13")
	_pastureToxIndex.ToxIndex14 = field.NewFloat64(tableName, "tox_index14")
	_pastureToxIndex.ToxIndex15 = field.NewFloat64(tableName, "tox_index15")
	_pastureToxIndex.ToxIndex16 = field.NewFloat64(tableName, "tox_index16")
	_pastureToxIndex.ToxIndex17 = field.NewFloat64(tableName, "tox_index17")
	_pastureToxIndex.ToxIndex18 = field.NewFloat64(tableName, "tox_index18")
	_pastureToxIndex.ToxIndex19 = field.NewFloat64(tableName, "tox_index19")
	_pastureToxIndex.ToxIndex20 = field.NewFloat64(tableName, "tox_index20")
	_pastureToxIndex.ToxIndex21 = field.NewFloat64(tableName, "tox_index21")
	_pastureToxIndex.ToxIndex22 = field.NewFloat64(tableName, "tox_index22")

	_pastureToxIndex.fillFieldMap()

	return _pastureToxIndex
}

type pastureToxIndex struct {
	pastureToxIndexDo pastureToxIndexDo

	ALL                  field.Asterisk
	ID                   field.Uint
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	PastureWaterRecordID field.Uint
	ToxIndex1            field.Float64
	ToxIndex2            field.Float64
	ToxIndex3            field.Float64
	ToxIndex4            field.Float64
	ToxIndex5            field.Float64
	ToxIndex6            field.Float64
	ToxIndex7            field.Float64
	ToxIndex8            field.Float64
	ToxIndex9            field.Float64
	ToxIndex10           field.Float64
	ToxIndex11           field.Float64
	ToxIndex12           field.Float64
	ToxIndex13           field.Float64
	ToxIndex14           field.Float64
	ToxIndex15           field.Float64
	ToxIndex16           field.Float64
	ToxIndex17           field.Float64
	ToxIndex18           field.Float64
	ToxIndex19           field.Float64
	ToxIndex20           field.Float64
	ToxIndex21           field.Float64
	ToxIndex22           field.Float64

	fieldMap map[string]field.Expr
}

func (p pastureToxIndex) Table(newTableName string) *pastureToxIndex {
	p.pastureToxIndexDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureToxIndex) As(alias string) *pastureToxIndex {
	p.pastureToxIndexDo.DO = *(p.pastureToxIndexDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureToxIndex) updateTableName(table string) *pastureToxIndex {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PastureWaterRecordID = field.NewUint(table, "pasture_water_record_id")
	p.ToxIndex1 = field.NewFloat64(table, "tox_index1")
	p.ToxIndex2 = field.NewFloat64(table, "tox_index2")
	p.ToxIndex3 = field.NewFloat64(table, "tox_index3")
	p.ToxIndex4 = field.NewFloat64(table, "tox_index4")
	p.ToxIndex5 = field.NewFloat64(table, "tox_index5")
	p.ToxIndex6 = field.NewFloat64(table, "tox_index6")
	p.ToxIndex7 = field.NewFloat64(table, "tox_index7")
	p.ToxIndex8 = field.NewFloat64(table, "tox_index8")
	p.ToxIndex9 = field.NewFloat64(table, "tox_index9")
	p.ToxIndex10 = field.NewFloat64(table, "tox_index10")
	p.ToxIndex11 = field.NewFloat64(table, "tox_index11")
	p.ToxIndex12 = field.NewFloat64(table, "tox_index12")
	p.ToxIndex13 = field.NewFloat64(table, "tox_index13")
	p.ToxIndex14 = field.NewFloat64(table, "tox_index14")
	p.ToxIndex15 = field.NewFloat64(table, "tox_index15")
	p.ToxIndex16 = field.NewFloat64(table, "tox_index16")
	p.ToxIndex17 = field.NewFloat64(table, "tox_index17")
	p.ToxIndex18 = field.NewFloat64(table, "tox_index18")
	p.ToxIndex19 = field.NewFloat64(table, "tox_index19")
	p.ToxIndex20 = field.NewFloat64(table, "tox_index20")
	p.ToxIndex21 = field.NewFloat64(table, "tox_index21")
	p.ToxIndex22 = field.NewFloat64(table, "tox_index22")

	p.fillFieldMap()

	return p
}

func (p *pastureToxIndex) WithContext(ctx context.Context) IPastureToxIndexDo {
	return p.pastureToxIndexDo.WithContext(ctx)
}

func (p pastureToxIndex) TableName() string { return p.pastureToxIndexDo.TableName() }

func (p pastureToxIndex) Alias() string { return p.pastureToxIndexDo.Alias() }

func (p pastureToxIndex) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureToxIndexDo.Columns(cols...)
}

func (p *pastureToxIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureToxIndex) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 27)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["pasture_water_record_id"] = p.PastureWaterRecordID
	p.fieldMap["tox_index1"] = p.ToxIndex1
	p.fieldMap["tox_index2"] = p.ToxIndex2
	p.fieldMap["tox_index3"] = p.ToxIndex3
	p.fieldMap["tox_index4"] = p.ToxIndex4
	p.fieldMap["tox_index5"] = p.ToxIndex5
	p.fieldMap["tox_index6"] = p.ToxIndex6
	p.fieldMap["tox_index7"] = p.ToxIndex7
	p.fieldMap["tox_index8"] = p.ToxIndex8
	p.fieldMap["tox_index9"] = p.ToxIndex9
	p.fieldMap["tox_index10"] = p.ToxIndex10
	p.fieldMap["tox_index11"] = p.ToxIndex11
	p.fieldMap["tox_index12"] = p.ToxIndex12
	p.fieldMap["tox_index13"] = p.ToxIndex13
	p.fieldMap["tox_index14"] = p.ToxIndex14
	p.fieldMap["tox_index15"] = p.ToxIndex15
	p.fieldMap["tox_index16"] = p.ToxIndex16
	p.fieldMap["tox_index17"] = p.ToxIndex17
	p.fieldMap["tox_index18"] = p.ToxIndex18
	p.fieldMap["tox_index19"] = p.ToxIndex19
	p.fieldMap["tox_index20"] = p.ToxIndex20
	p.fieldMap["tox_index21"] = p.ToxIndex21
	p.fieldMap["tox_index22"] = p.ToxIndex22
}

func (p pastureToxIndex) clone(db *gorm.DB) pastureToxIndex {
	p.pastureToxIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureToxIndex) replaceDB(db *gorm.DB) pastureToxIndex {
	p.pastureToxIndexDo.ReplaceDB(db)
	return p
}

type pastureToxIndexDo struct{ gen.DO }

type IPastureToxIndexDo interface {
	gen.SubQuery
	Debug() IPastureToxIndexDo
	WithContext(ctx context.Context) IPastureToxIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureToxIndexDo
	WriteDB() IPastureToxIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureToxIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureToxIndexDo
	Not(conds ...gen.Condition) IPastureToxIndexDo
	Or(conds ...gen.Condition) IPastureToxIndexDo
	Select(conds ...field.Expr) IPastureToxIndexDo
	Where(conds ...gen.Condition) IPastureToxIndexDo
	Order(conds ...field.Expr) IPastureToxIndexDo
	Distinct(cols ...field.Expr) IPastureToxIndexDo
	Omit(cols ...field.Expr) IPastureToxIndexDo
	Join(table schema.Tabler, on ...field.Expr) IPastureToxIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureToxIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureToxIndexDo
	Group(cols ...field.Expr) IPastureToxIndexDo
	Having(conds ...gen.Condition) IPastureToxIndexDo
	Limit(limit int) IPastureToxIndexDo
	Offset(offset int) IPastureToxIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureToxIndexDo
	Unscoped() IPastureToxIndexDo
	Create(values ...*pasture.PastureToxIndex) error
	CreateInBatches(values []*pasture.PastureToxIndex, batchSize int) error
	Save(values ...*pasture.PastureToxIndex) error
	First() (*pasture.PastureToxIndex, error)
	Take() (*pasture.PastureToxIndex, error)
	Last() (*pasture.PastureToxIndex, error)
	Find() ([]*pasture.PastureToxIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureToxIndex, err error)
	FindInBatches(result *[]*pasture.PastureToxIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureToxIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureToxIndexDo
	Assign(attrs ...field.AssignExpr) IPastureToxIndexDo
	Joins(fields ...field.RelationField) IPastureToxIndexDo
	Preload(fields ...field.RelationField) IPastureToxIndexDo
	FirstOrInit() (*pasture.PastureToxIndex, error)
	FirstOrCreate() (*pasture.PastureToxIndex, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureToxIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureToxIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureToxIndexDo) Debug() IPastureToxIndexDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureToxIndexDo) WithContext(ctx context.Context) IPastureToxIndexDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureToxIndexDo) ReadDB() IPastureToxIndexDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureToxIndexDo) WriteDB() IPastureToxIndexDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureToxIndexDo) Session(config *gorm.Session) IPastureToxIndexDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureToxIndexDo) Clauses(conds ...clause.Expression) IPastureToxIndexDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureToxIndexDo) Returning(value interface{}, columns ...string) IPastureToxIndexDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureToxIndexDo) Not(conds ...gen.Condition) IPastureToxIndexDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureToxIndexDo) Or(conds ...gen.Condition) IPastureToxIndexDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureToxIndexDo) Select(conds ...field.Expr) IPastureToxIndexDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureToxIndexDo) Where(conds ...gen.Condition) IPastureToxIndexDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureToxIndexDo) Order(conds ...field.Expr) IPastureToxIndexDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureToxIndexDo) Distinct(cols ...field.Expr) IPastureToxIndexDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureToxIndexDo) Omit(cols ...field.Expr) IPastureToxIndexDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureToxIndexDo) Join(table schema.Tabler, on ...field.Expr) IPastureToxIndexDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureToxIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureToxIndexDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureToxIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureToxIndexDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureToxIndexDo) Group(cols ...field.Expr) IPastureToxIndexDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureToxIndexDo) Having(conds ...gen.Condition) IPastureToxIndexDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureToxIndexDo) Limit(limit int) IPastureToxIndexDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureToxIndexDo) Offset(offset int) IPastureToxIndexDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureToxIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureToxIndexDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureToxIndexDo) Unscoped() IPastureToxIndexDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureToxIndexDo) Create(values ...*pasture.PastureToxIndex) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureToxIndexDo) CreateInBatches(values []*pasture.PastureToxIndex, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureToxIndexDo) Save(values ...*pasture.PastureToxIndex) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureToxIndexDo) First() (*pasture.PastureToxIndex, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureToxIndex), nil
	}
}

func (p pastureToxIndexDo) Take() (*pasture.PastureToxIndex, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureToxIndex), nil
	}
}

func (p pastureToxIndexDo) Last() (*pasture.PastureToxIndex, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureToxIndex), nil
	}
}

func (p pastureToxIndexDo) Find() ([]*pasture.PastureToxIndex, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureToxIndex), err
}

func (p pastureToxIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureToxIndex, err error) {
	buf := make([]*pasture.PastureToxIndex, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureToxIndexDo) FindInBatches(result *[]*pasture.PastureToxIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureToxIndexDo) Attrs(attrs ...field.AssignExpr) IPastureToxIndexDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureToxIndexDo) Assign(attrs ...field.AssignExpr) IPastureToxIndexDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureToxIndexDo) Joins(fields ...field.RelationField) IPastureToxIndexDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureToxIndexDo) Preload(fields ...field.RelationField) IPastureToxIndexDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureToxIndexDo) FirstOrInit() (*pasture.PastureToxIndex, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureToxIndex), nil
	}
}

func (p pastureToxIndexDo) FirstOrCreate() (*pasture.PastureToxIndex, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureToxIndex), nil
	}
}

func (p pastureToxIndexDo) FindByPage(offset int, limit int) (result []*pasture.PastureToxIndex, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureToxIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureToxIndexDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureToxIndexDo) Delete(models ...*pasture.PastureToxIndex) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureToxIndexDo) withDO(do gen.Dao) *pastureToxIndexDo {
	p.DO = *do.(*gen.DO)
	return p
}
