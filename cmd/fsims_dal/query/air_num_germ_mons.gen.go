// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAirNumGermMon(db *gorm.DB, opts ...gen.DOOption) airNumGermMon {
	_airNumGermMon := airNumGermMon{}

	_airNumGermMon.airNumGermMonDo.UseDB(db, opts...)
	_airNumGermMon.airNumGermMonDo.UseModel(&slaughter.AirNumGermMon{})

	tableName := _airNumGermMon.airNumGermMonDo.TableName()
	_airNumGermMon.ALL = field.NewAsterisk(tableName)
	_airNumGermMon.ID = field.NewUint(tableName, "id")
	_airNumGermMon.CreatedAt = field.NewTime(tableName, "created_at")
	_airNumGermMon.UpdatedAt = field.NewTime(tableName, "updated_at")
	_airNumGermMon.DeletedAt = field.NewField(tableName, "deleted_at")
	_airNumGermMon.AirNumGermMon1 = field.NewFloat32(tableName, "air_num_germ_mon1")
	_airNumGermMon.AirNumGermMon2 = field.NewFloat32(tableName, "air_num_germ_mon2")
	_airNumGermMon.AirNumGermMon3 = field.NewFloat32(tableName, "air_num_germ_mon3")

	_airNumGermMon.fillFieldMap()

	return _airNumGermMon
}

type airNumGermMon struct {
	airNumGermMonDo airNumGermMonDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	AirNumGermMon1 field.Float32
	AirNumGermMon2 field.Float32
	AirNumGermMon3 field.Float32

	fieldMap map[string]field.Expr
}

func (a airNumGermMon) Table(newTableName string) *airNumGermMon {
	a.airNumGermMonDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a airNumGermMon) As(alias string) *airNumGermMon {
	a.airNumGermMonDo.DO = *(a.airNumGermMonDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *airNumGermMon) updateTableName(table string) *airNumGermMon {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.AirNumGermMon1 = field.NewFloat32(table, "air_num_germ_mon1")
	a.AirNumGermMon2 = field.NewFloat32(table, "air_num_germ_mon2")
	a.AirNumGermMon3 = field.NewFloat32(table, "air_num_germ_mon3")

	a.fillFieldMap()

	return a
}

func (a *airNumGermMon) WithContext(ctx context.Context) IAirNumGermMonDo {
	return a.airNumGermMonDo.WithContext(ctx)
}

func (a airNumGermMon) TableName() string { return a.airNumGermMonDo.TableName() }

func (a airNumGermMon) Alias() string { return a.airNumGermMonDo.Alias() }

func (a airNumGermMon) Columns(cols ...field.Expr) gen.Columns {
	return a.airNumGermMonDo.Columns(cols...)
}

func (a *airNumGermMon) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *airNumGermMon) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["air_num_germ_mon1"] = a.AirNumGermMon1
	a.fieldMap["air_num_germ_mon2"] = a.AirNumGermMon2
	a.fieldMap["air_num_germ_mon3"] = a.AirNumGermMon3
}

func (a airNumGermMon) clone(db *gorm.DB) airNumGermMon {
	a.airNumGermMonDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a airNumGermMon) replaceDB(db *gorm.DB) airNumGermMon {
	a.airNumGermMonDo.ReplaceDB(db)
	return a
}

type airNumGermMonDo struct{ gen.DO }

type IAirNumGermMonDo interface {
	gen.SubQuery
	Debug() IAirNumGermMonDo
	WithContext(ctx context.Context) IAirNumGermMonDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAirNumGermMonDo
	WriteDB() IAirNumGermMonDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAirNumGermMonDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAirNumGermMonDo
	Not(conds ...gen.Condition) IAirNumGermMonDo
	Or(conds ...gen.Condition) IAirNumGermMonDo
	Select(conds ...field.Expr) IAirNumGermMonDo
	Where(conds ...gen.Condition) IAirNumGermMonDo
	Order(conds ...field.Expr) IAirNumGermMonDo
	Distinct(cols ...field.Expr) IAirNumGermMonDo
	Omit(cols ...field.Expr) IAirNumGermMonDo
	Join(table schema.Tabler, on ...field.Expr) IAirNumGermMonDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAirNumGermMonDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAirNumGermMonDo
	Group(cols ...field.Expr) IAirNumGermMonDo
	Having(conds ...gen.Condition) IAirNumGermMonDo
	Limit(limit int) IAirNumGermMonDo
	Offset(offset int) IAirNumGermMonDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAirNumGermMonDo
	Unscoped() IAirNumGermMonDo
	Create(values ...*slaughter.AirNumGermMon) error
	CreateInBatches(values []*slaughter.AirNumGermMon, batchSize int) error
	Save(values ...*slaughter.AirNumGermMon) error
	First() (*slaughter.AirNumGermMon, error)
	Take() (*slaughter.AirNumGermMon, error)
	Last() (*slaughter.AirNumGermMon, error)
	Find() ([]*slaughter.AirNumGermMon, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.AirNumGermMon, err error)
	FindInBatches(result *[]*slaughter.AirNumGermMon, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.AirNumGermMon) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAirNumGermMonDo
	Assign(attrs ...field.AssignExpr) IAirNumGermMonDo
	Joins(fields ...field.RelationField) IAirNumGermMonDo
	Preload(fields ...field.RelationField) IAirNumGermMonDo
	FirstOrInit() (*slaughter.AirNumGermMon, error)
	FirstOrCreate() (*slaughter.AirNumGermMon, error)
	FindByPage(offset int, limit int) (result []*slaughter.AirNumGermMon, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAirNumGermMonDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a airNumGermMonDo) Debug() IAirNumGermMonDo {
	return a.withDO(a.DO.Debug())
}

func (a airNumGermMonDo) WithContext(ctx context.Context) IAirNumGermMonDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a airNumGermMonDo) ReadDB() IAirNumGermMonDo {
	return a.Clauses(dbresolver.Read)
}

func (a airNumGermMonDo) WriteDB() IAirNumGermMonDo {
	return a.Clauses(dbresolver.Write)
}

func (a airNumGermMonDo) Session(config *gorm.Session) IAirNumGermMonDo {
	return a.withDO(a.DO.Session(config))
}

func (a airNumGermMonDo) Clauses(conds ...clause.Expression) IAirNumGermMonDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a airNumGermMonDo) Returning(value interface{}, columns ...string) IAirNumGermMonDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a airNumGermMonDo) Not(conds ...gen.Condition) IAirNumGermMonDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a airNumGermMonDo) Or(conds ...gen.Condition) IAirNumGermMonDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a airNumGermMonDo) Select(conds ...field.Expr) IAirNumGermMonDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a airNumGermMonDo) Where(conds ...gen.Condition) IAirNumGermMonDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a airNumGermMonDo) Order(conds ...field.Expr) IAirNumGermMonDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a airNumGermMonDo) Distinct(cols ...field.Expr) IAirNumGermMonDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a airNumGermMonDo) Omit(cols ...field.Expr) IAirNumGermMonDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a airNumGermMonDo) Join(table schema.Tabler, on ...field.Expr) IAirNumGermMonDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a airNumGermMonDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAirNumGermMonDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a airNumGermMonDo) RightJoin(table schema.Tabler, on ...field.Expr) IAirNumGermMonDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a airNumGermMonDo) Group(cols ...field.Expr) IAirNumGermMonDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a airNumGermMonDo) Having(conds ...gen.Condition) IAirNumGermMonDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a airNumGermMonDo) Limit(limit int) IAirNumGermMonDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a airNumGermMonDo) Offset(offset int) IAirNumGermMonDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a airNumGermMonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAirNumGermMonDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a airNumGermMonDo) Unscoped() IAirNumGermMonDo {
	return a.withDO(a.DO.Unscoped())
}

func (a airNumGermMonDo) Create(values ...*slaughter.AirNumGermMon) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a airNumGermMonDo) CreateInBatches(values []*slaughter.AirNumGermMon, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a airNumGermMonDo) Save(values ...*slaughter.AirNumGermMon) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a airNumGermMonDo) First() (*slaughter.AirNumGermMon, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AirNumGermMon), nil
	}
}

func (a airNumGermMonDo) Take() (*slaughter.AirNumGermMon, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AirNumGermMon), nil
	}
}

func (a airNumGermMonDo) Last() (*slaughter.AirNumGermMon, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AirNumGermMon), nil
	}
}

func (a airNumGermMonDo) Find() ([]*slaughter.AirNumGermMon, error) {
	result, err := a.DO.Find()
	return result.([]*slaughter.AirNumGermMon), err
}

func (a airNumGermMonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.AirNumGermMon, err error) {
	buf := make([]*slaughter.AirNumGermMon, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a airNumGermMonDo) FindInBatches(result *[]*slaughter.AirNumGermMon, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a airNumGermMonDo) Attrs(attrs ...field.AssignExpr) IAirNumGermMonDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a airNumGermMonDo) Assign(attrs ...field.AssignExpr) IAirNumGermMonDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a airNumGermMonDo) Joins(fields ...field.RelationField) IAirNumGermMonDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a airNumGermMonDo) Preload(fields ...field.RelationField) IAirNumGermMonDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a airNumGermMonDo) FirstOrInit() (*slaughter.AirNumGermMon, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AirNumGermMon), nil
	}
}

func (a airNumGermMonDo) FirstOrCreate() (*slaughter.AirNumGermMon, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AirNumGermMon), nil
	}
}

func (a airNumGermMonDo) FindByPage(offset int, limit int) (result []*slaughter.AirNumGermMon, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a airNumGermMonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a airNumGermMonDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a airNumGermMonDo) Delete(models ...*slaughter.AirNumGermMon) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *airNumGermMonDo) withDO(do gen.Dao) *airNumGermMonDo {
	a.DO = *do.(*gen.DO)
	return a
}
