// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPaddingRequire(db *gorm.DB, opts ...gen.DOOption) paddingRequire {
	_paddingRequire := paddingRequire{}

	_paddingRequire.paddingRequireDo.UseDB(db, opts...)
	_paddingRequire.paddingRequireDo.UseModel(&pasture.PaddingRequire{})

	tableName := _paddingRequire.paddingRequireDo.TableName()
	_paddingRequire.ALL = field.NewAsterisk(tableName)
	_paddingRequire.ID = field.NewUint(tableName, "id")
	_paddingRequire.CreatedAt = field.NewTime(tableName, "created_at")
	_paddingRequire.UpdatedAt = field.NewTime(tableName, "updated_at")
	_paddingRequire.DeletedAt = field.NewField(tableName, "deleted_at")
	_paddingRequire.FarmEnvironmentID = field.NewUint(tableName, "farm_environment_id")
	_paddingRequire.PaddingRequire1 = field.NewFloat32(tableName, "padding_require1")
	_paddingRequire.PaddingRequire2 = field.NewFloat32(tableName, "padding_require2")
	_paddingRequire.PaddingRequire3 = field.NewFloat32(tableName, "padding_require3")
	_paddingRequire.PaddingRequire4 = field.NewFloat32(tableName, "padding_require4")
	_paddingRequire.PaddingRequire5 = field.NewFloat32(tableName, "padding_require5")
	_paddingRequire.PaddingRequire6 = field.NewFloat32(tableName, "padding_require6")
	_paddingRequire.PaddingRequire7 = field.NewFloat32(tableName, "padding_require7")
	_paddingRequire.PaddingRequire8 = field.NewFloat32(tableName, "padding_require8")

	_paddingRequire.fillFieldMap()

	return _paddingRequire
}

type paddingRequire struct {
	paddingRequireDo paddingRequireDo

	ALL               field.Asterisk
	ID                field.Uint
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	FarmEnvironmentID field.Uint
	PaddingRequire1   field.Float32
	PaddingRequire2   field.Float32
	PaddingRequire3   field.Float32
	PaddingRequire4   field.Float32
	PaddingRequire5   field.Float32
	PaddingRequire6   field.Float32
	PaddingRequire7   field.Float32
	PaddingRequire8   field.Float32

	fieldMap map[string]field.Expr
}

func (p paddingRequire) Table(newTableName string) *paddingRequire {
	p.paddingRequireDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paddingRequire) As(alias string) *paddingRequire {
	p.paddingRequireDo.DO = *(p.paddingRequireDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paddingRequire) updateTableName(table string) *paddingRequire {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.FarmEnvironmentID = field.NewUint(table, "farm_environment_id")
	p.PaddingRequire1 = field.NewFloat32(table, "padding_require1")
	p.PaddingRequire2 = field.NewFloat32(table, "padding_require2")
	p.PaddingRequire3 = field.NewFloat32(table, "padding_require3")
	p.PaddingRequire4 = field.NewFloat32(table, "padding_require4")
	p.PaddingRequire5 = field.NewFloat32(table, "padding_require5")
	p.PaddingRequire6 = field.NewFloat32(table, "padding_require6")
	p.PaddingRequire7 = field.NewFloat32(table, "padding_require7")
	p.PaddingRequire8 = field.NewFloat32(table, "padding_require8")

	p.fillFieldMap()

	return p
}

func (p *paddingRequire) WithContext(ctx context.Context) IPaddingRequireDo {
	return p.paddingRequireDo.WithContext(ctx)
}

func (p paddingRequire) TableName() string { return p.paddingRequireDo.TableName() }

func (p paddingRequire) Alias() string { return p.paddingRequireDo.Alias() }

func (p paddingRequire) Columns(cols ...field.Expr) gen.Columns {
	return p.paddingRequireDo.Columns(cols...)
}

func (p *paddingRequire) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paddingRequire) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["farm_environment_id"] = p.FarmEnvironmentID
	p.fieldMap["padding_require1"] = p.PaddingRequire1
	p.fieldMap["padding_require2"] = p.PaddingRequire2
	p.fieldMap["padding_require3"] = p.PaddingRequire3
	p.fieldMap["padding_require4"] = p.PaddingRequire4
	p.fieldMap["padding_require5"] = p.PaddingRequire5
	p.fieldMap["padding_require6"] = p.PaddingRequire6
	p.fieldMap["padding_require7"] = p.PaddingRequire7
	p.fieldMap["padding_require8"] = p.PaddingRequire8
}

func (p paddingRequire) clone(db *gorm.DB) paddingRequire {
	p.paddingRequireDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paddingRequire) replaceDB(db *gorm.DB) paddingRequire {
	p.paddingRequireDo.ReplaceDB(db)
	return p
}

type paddingRequireDo struct{ gen.DO }

type IPaddingRequireDo interface {
	gen.SubQuery
	Debug() IPaddingRequireDo
	WithContext(ctx context.Context) IPaddingRequireDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPaddingRequireDo
	WriteDB() IPaddingRequireDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPaddingRequireDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPaddingRequireDo
	Not(conds ...gen.Condition) IPaddingRequireDo
	Or(conds ...gen.Condition) IPaddingRequireDo
	Select(conds ...field.Expr) IPaddingRequireDo
	Where(conds ...gen.Condition) IPaddingRequireDo
	Order(conds ...field.Expr) IPaddingRequireDo
	Distinct(cols ...field.Expr) IPaddingRequireDo
	Omit(cols ...field.Expr) IPaddingRequireDo
	Join(table schema.Tabler, on ...field.Expr) IPaddingRequireDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPaddingRequireDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPaddingRequireDo
	Group(cols ...field.Expr) IPaddingRequireDo
	Having(conds ...gen.Condition) IPaddingRequireDo
	Limit(limit int) IPaddingRequireDo
	Offset(offset int) IPaddingRequireDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPaddingRequireDo
	Unscoped() IPaddingRequireDo
	Create(values ...*pasture.PaddingRequire) error
	CreateInBatches(values []*pasture.PaddingRequire, batchSize int) error
	Save(values ...*pasture.PaddingRequire) error
	First() (*pasture.PaddingRequire, error)
	Take() (*pasture.PaddingRequire, error)
	Last() (*pasture.PaddingRequire, error)
	Find() ([]*pasture.PaddingRequire, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PaddingRequire, err error)
	FindInBatches(result *[]*pasture.PaddingRequire, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PaddingRequire) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPaddingRequireDo
	Assign(attrs ...field.AssignExpr) IPaddingRequireDo
	Joins(fields ...field.RelationField) IPaddingRequireDo
	Preload(fields ...field.RelationField) IPaddingRequireDo
	FirstOrInit() (*pasture.PaddingRequire, error)
	FirstOrCreate() (*pasture.PaddingRequire, error)
	FindByPage(offset int, limit int) (result []*pasture.PaddingRequire, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPaddingRequireDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p paddingRequireDo) Debug() IPaddingRequireDo {
	return p.withDO(p.DO.Debug())
}

func (p paddingRequireDo) WithContext(ctx context.Context) IPaddingRequireDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paddingRequireDo) ReadDB() IPaddingRequireDo {
	return p.Clauses(dbresolver.Read)
}

func (p paddingRequireDo) WriteDB() IPaddingRequireDo {
	return p.Clauses(dbresolver.Write)
}

func (p paddingRequireDo) Session(config *gorm.Session) IPaddingRequireDo {
	return p.withDO(p.DO.Session(config))
}

func (p paddingRequireDo) Clauses(conds ...clause.Expression) IPaddingRequireDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paddingRequireDo) Returning(value interface{}, columns ...string) IPaddingRequireDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paddingRequireDo) Not(conds ...gen.Condition) IPaddingRequireDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paddingRequireDo) Or(conds ...gen.Condition) IPaddingRequireDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paddingRequireDo) Select(conds ...field.Expr) IPaddingRequireDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paddingRequireDo) Where(conds ...gen.Condition) IPaddingRequireDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paddingRequireDo) Order(conds ...field.Expr) IPaddingRequireDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paddingRequireDo) Distinct(cols ...field.Expr) IPaddingRequireDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paddingRequireDo) Omit(cols ...field.Expr) IPaddingRequireDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paddingRequireDo) Join(table schema.Tabler, on ...field.Expr) IPaddingRequireDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paddingRequireDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPaddingRequireDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paddingRequireDo) RightJoin(table schema.Tabler, on ...field.Expr) IPaddingRequireDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paddingRequireDo) Group(cols ...field.Expr) IPaddingRequireDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paddingRequireDo) Having(conds ...gen.Condition) IPaddingRequireDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paddingRequireDo) Limit(limit int) IPaddingRequireDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paddingRequireDo) Offset(offset int) IPaddingRequireDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paddingRequireDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPaddingRequireDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paddingRequireDo) Unscoped() IPaddingRequireDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paddingRequireDo) Create(values ...*pasture.PaddingRequire) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paddingRequireDo) CreateInBatches(values []*pasture.PaddingRequire, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paddingRequireDo) Save(values ...*pasture.PaddingRequire) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paddingRequireDo) First() (*pasture.PaddingRequire, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PaddingRequire), nil
	}
}

func (p paddingRequireDo) Take() (*pasture.PaddingRequire, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PaddingRequire), nil
	}
}

func (p paddingRequireDo) Last() (*pasture.PaddingRequire, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PaddingRequire), nil
	}
}

func (p paddingRequireDo) Find() ([]*pasture.PaddingRequire, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PaddingRequire), err
}

func (p paddingRequireDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PaddingRequire, err error) {
	buf := make([]*pasture.PaddingRequire, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paddingRequireDo) FindInBatches(result *[]*pasture.PaddingRequire, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paddingRequireDo) Attrs(attrs ...field.AssignExpr) IPaddingRequireDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paddingRequireDo) Assign(attrs ...field.AssignExpr) IPaddingRequireDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paddingRequireDo) Joins(fields ...field.RelationField) IPaddingRequireDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paddingRequireDo) Preload(fields ...field.RelationField) IPaddingRequireDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paddingRequireDo) FirstOrInit() (*pasture.PaddingRequire, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PaddingRequire), nil
	}
}

func (p paddingRequireDo) FirstOrCreate() (*pasture.PaddingRequire, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PaddingRequire), nil
	}
}

func (p paddingRequireDo) FindByPage(offset int, limit int) (result []*pasture.PaddingRequire, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paddingRequireDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paddingRequireDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paddingRequireDo) Delete(models ...*pasture.PaddingRequire) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paddingRequireDo) withDO(do gen.Dao) *paddingRequireDo {
	p.DO = *do.(*gen.DO)
	return p
}
