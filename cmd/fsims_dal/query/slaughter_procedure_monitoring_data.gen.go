// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSlaughterProcedureMonitoringData(db *gorm.DB, opts ...gen.DOOption) slaughterProcedureMonitoringData {
	_slaughterProcedureMonitoringData := slaughterProcedureMonitoringData{}

	_slaughterProcedureMonitoringData.slaughterProcedureMonitoringDataDo.UseDB(db, opts...)
	_slaughterProcedureMonitoringData.slaughterProcedureMonitoringDataDo.UseModel(&slaughter.SlaughterProcedureMonitoringData{})

	tableName := _slaughterProcedureMonitoringData.slaughterProcedureMonitoringDataDo.TableName()
	_slaughterProcedureMonitoringData.ALL = field.NewAsterisk(tableName)
	_slaughterProcedureMonitoringData.ID = field.NewUint(tableName, "id")
	_slaughterProcedureMonitoringData.CreatedAt = field.NewTime(tableName, "created_at")
	_slaughterProcedureMonitoringData.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slaughterProcedureMonitoringData.DeletedAt = field.NewField(tableName, "deleted_at")
	_slaughterProcedureMonitoringData.PID = field.NewString(tableName, "p_id")
	_slaughterProcedureMonitoringData.SlaughterDisinfectHotWaterTempMoni = slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoni{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SlaughterDisinfectHotWaterTempMoni", "slaughter.SlaughterDisinfectHotWaterTempMoni"),
	}

	_slaughterProcedureMonitoringData.SlaughterStun = slaughterProcedureMonitoringDataHasOneSlaughterStun{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("SlaughterStun", "slaughter.SlaughterStun"),
	}

	_slaughterProcedureMonitoringData.BleedElectronic = slaughterProcedureMonitoringDataHasOneBleedElectronic{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("BleedElectronic", "slaughter.BleedElectronic"),
	}

	_slaughterProcedureMonitoringData.AnalMeatPhMoni = slaughterProcedureMonitoringDataHasOneAnalMeatPhMoni{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AnalMeatPhMoni", "slaughter.AnalMeatPhMoni"),
	}

	_slaughterProcedureMonitoringData.ToNumGermMon = slaughterProcedureMonitoringDataHasOneToNumGermMon{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ToNumGermMon", "slaughter.ToNumGermMon"),
	}

	_slaughterProcedureMonitoringData.fillFieldMap()

	return _slaughterProcedureMonitoringData
}

type slaughterProcedureMonitoringData struct {
	slaughterProcedureMonitoringDataDo slaughterProcedureMonitoringDataDo

	ALL                                field.Asterisk
	ID                                 field.Uint
	CreatedAt                          field.Time
	UpdatedAt                          field.Time
	DeletedAt                          field.Field
	PID                                field.String
	SlaughterDisinfectHotWaterTempMoni slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoni

	SlaughterStun slaughterProcedureMonitoringDataHasOneSlaughterStun

	BleedElectronic slaughterProcedureMonitoringDataHasOneBleedElectronic

	AnalMeatPhMoni slaughterProcedureMonitoringDataHasOneAnalMeatPhMoni

	ToNumGermMon slaughterProcedureMonitoringDataHasOneToNumGermMon

	fieldMap map[string]field.Expr
}

func (s slaughterProcedureMonitoringData) Table(newTableName string) *slaughterProcedureMonitoringData {
	s.slaughterProcedureMonitoringDataDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slaughterProcedureMonitoringData) As(alias string) *slaughterProcedureMonitoringData {
	s.slaughterProcedureMonitoringDataDo.DO = *(s.slaughterProcedureMonitoringDataDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slaughterProcedureMonitoringData) updateTableName(table string) *slaughterProcedureMonitoringData {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.PID = field.NewString(table, "p_id")

	s.fillFieldMap()

	return s
}

func (s *slaughterProcedureMonitoringData) WithContext(ctx context.Context) ISlaughterProcedureMonitoringDataDo {
	return s.slaughterProcedureMonitoringDataDo.WithContext(ctx)
}

func (s slaughterProcedureMonitoringData) TableName() string {
	return s.slaughterProcedureMonitoringDataDo.TableName()
}

func (s slaughterProcedureMonitoringData) Alias() string {
	return s.slaughterProcedureMonitoringDataDo.Alias()
}

func (s slaughterProcedureMonitoringData) Columns(cols ...field.Expr) gen.Columns {
	return s.slaughterProcedureMonitoringDataDo.Columns(cols...)
}

func (s *slaughterProcedureMonitoringData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slaughterProcedureMonitoringData) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["p_id"] = s.PID

}

func (s slaughterProcedureMonitoringData) clone(db *gorm.DB) slaughterProcedureMonitoringData {
	s.slaughterProcedureMonitoringDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slaughterProcedureMonitoringData) replaceDB(db *gorm.DB) slaughterProcedureMonitoringData {
	s.slaughterProcedureMonitoringDataDo.ReplaceDB(db)
	return s
}

type slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoni struct {
	db *gorm.DB

	field.RelationField
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoni) Where(conds ...field.Expr) *slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoni {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoni) WithContext(ctx context.Context) *slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoni {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoni) Session(session *gorm.Session) *slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoni {
	a.db = a.db.Session(session)
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoni) Model(m *slaughter.SlaughterProcedureMonitoringData) *slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoniTx {
	return &slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoniTx{a.db.Model(m).Association(a.Name())}
}

type slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoniTx struct{ tx *gorm.Association }

func (a slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoniTx) Find() (result *slaughter.SlaughterDisinfectHotWaterTempMoni, err error) {
	return result, a.tx.Find(&result)
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoniTx) Append(values ...*slaughter.SlaughterDisinfectHotWaterTempMoni) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoniTx) Replace(values ...*slaughter.SlaughterDisinfectHotWaterTempMoni) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoniTx) Delete(values ...*slaughter.SlaughterDisinfectHotWaterTempMoni) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoniTx) Clear() error {
	return a.tx.Clear()
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterDisinfectHotWaterTempMoniTx) Count() int64 {
	return a.tx.Count()
}

type slaughterProcedureMonitoringDataHasOneSlaughterStun struct {
	db *gorm.DB

	field.RelationField
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterStun) Where(conds ...field.Expr) *slaughterProcedureMonitoringDataHasOneSlaughterStun {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterStun) WithContext(ctx context.Context) *slaughterProcedureMonitoringDataHasOneSlaughterStun {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterStun) Session(session *gorm.Session) *slaughterProcedureMonitoringDataHasOneSlaughterStun {
	a.db = a.db.Session(session)
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterStun) Model(m *slaughter.SlaughterProcedureMonitoringData) *slaughterProcedureMonitoringDataHasOneSlaughterStunTx {
	return &slaughterProcedureMonitoringDataHasOneSlaughterStunTx{a.db.Model(m).Association(a.Name())}
}

type slaughterProcedureMonitoringDataHasOneSlaughterStunTx struct{ tx *gorm.Association }

func (a slaughterProcedureMonitoringDataHasOneSlaughterStunTx) Find() (result *slaughter.SlaughterStun, err error) {
	return result, a.tx.Find(&result)
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterStunTx) Append(values ...*slaughter.SlaughterStun) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterStunTx) Replace(values ...*slaughter.SlaughterStun) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterStunTx) Delete(values ...*slaughter.SlaughterStun) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterStunTx) Clear() error {
	return a.tx.Clear()
}

func (a slaughterProcedureMonitoringDataHasOneSlaughterStunTx) Count() int64 {
	return a.tx.Count()
}

type slaughterProcedureMonitoringDataHasOneBleedElectronic struct {
	db *gorm.DB

	field.RelationField
}

func (a slaughterProcedureMonitoringDataHasOneBleedElectronic) Where(conds ...field.Expr) *slaughterProcedureMonitoringDataHasOneBleedElectronic {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneBleedElectronic) WithContext(ctx context.Context) *slaughterProcedureMonitoringDataHasOneBleedElectronic {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneBleedElectronic) Session(session *gorm.Session) *slaughterProcedureMonitoringDataHasOneBleedElectronic {
	a.db = a.db.Session(session)
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneBleedElectronic) Model(m *slaughter.SlaughterProcedureMonitoringData) *slaughterProcedureMonitoringDataHasOneBleedElectronicTx {
	return &slaughterProcedureMonitoringDataHasOneBleedElectronicTx{a.db.Model(m).Association(a.Name())}
}

type slaughterProcedureMonitoringDataHasOneBleedElectronicTx struct{ tx *gorm.Association }

func (a slaughterProcedureMonitoringDataHasOneBleedElectronicTx) Find() (result *slaughter.BleedElectronic, err error) {
	return result, a.tx.Find(&result)
}

func (a slaughterProcedureMonitoringDataHasOneBleedElectronicTx) Append(values ...*slaughter.BleedElectronic) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneBleedElectronicTx) Replace(values ...*slaughter.BleedElectronic) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneBleedElectronicTx) Delete(values ...*slaughter.BleedElectronic) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneBleedElectronicTx) Clear() error {
	return a.tx.Clear()
}

func (a slaughterProcedureMonitoringDataHasOneBleedElectronicTx) Count() int64 {
	return a.tx.Count()
}

type slaughterProcedureMonitoringDataHasOneAnalMeatPhMoni struct {
	db *gorm.DB

	field.RelationField
}

func (a slaughterProcedureMonitoringDataHasOneAnalMeatPhMoni) Where(conds ...field.Expr) *slaughterProcedureMonitoringDataHasOneAnalMeatPhMoni {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneAnalMeatPhMoni) WithContext(ctx context.Context) *slaughterProcedureMonitoringDataHasOneAnalMeatPhMoni {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneAnalMeatPhMoni) Session(session *gorm.Session) *slaughterProcedureMonitoringDataHasOneAnalMeatPhMoni {
	a.db = a.db.Session(session)
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneAnalMeatPhMoni) Model(m *slaughter.SlaughterProcedureMonitoringData) *slaughterProcedureMonitoringDataHasOneAnalMeatPhMoniTx {
	return &slaughterProcedureMonitoringDataHasOneAnalMeatPhMoniTx{a.db.Model(m).Association(a.Name())}
}

type slaughterProcedureMonitoringDataHasOneAnalMeatPhMoniTx struct{ tx *gorm.Association }

func (a slaughterProcedureMonitoringDataHasOneAnalMeatPhMoniTx) Find() (result *slaughter.AnalMeatPhMoni, err error) {
	return result, a.tx.Find(&result)
}

func (a slaughterProcedureMonitoringDataHasOneAnalMeatPhMoniTx) Append(values ...*slaughter.AnalMeatPhMoni) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneAnalMeatPhMoniTx) Replace(values ...*slaughter.AnalMeatPhMoni) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneAnalMeatPhMoniTx) Delete(values ...*slaughter.AnalMeatPhMoni) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneAnalMeatPhMoniTx) Clear() error {
	return a.tx.Clear()
}

func (a slaughterProcedureMonitoringDataHasOneAnalMeatPhMoniTx) Count() int64 {
	return a.tx.Count()
}

type slaughterProcedureMonitoringDataHasOneToNumGermMon struct {
	db *gorm.DB

	field.RelationField
}

func (a slaughterProcedureMonitoringDataHasOneToNumGermMon) Where(conds ...field.Expr) *slaughterProcedureMonitoringDataHasOneToNumGermMon {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneToNumGermMon) WithContext(ctx context.Context) *slaughterProcedureMonitoringDataHasOneToNumGermMon {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneToNumGermMon) Session(session *gorm.Session) *slaughterProcedureMonitoringDataHasOneToNumGermMon {
	a.db = a.db.Session(session)
	return &a
}

func (a slaughterProcedureMonitoringDataHasOneToNumGermMon) Model(m *slaughter.SlaughterProcedureMonitoringData) *slaughterProcedureMonitoringDataHasOneToNumGermMonTx {
	return &slaughterProcedureMonitoringDataHasOneToNumGermMonTx{a.db.Model(m).Association(a.Name())}
}

type slaughterProcedureMonitoringDataHasOneToNumGermMonTx struct{ tx *gorm.Association }

func (a slaughterProcedureMonitoringDataHasOneToNumGermMonTx) Find() (result *slaughter.ToNumGermMon, err error) {
	return result, a.tx.Find(&result)
}

func (a slaughterProcedureMonitoringDataHasOneToNumGermMonTx) Append(values ...*slaughter.ToNumGermMon) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneToNumGermMonTx) Replace(values ...*slaughter.ToNumGermMon) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneToNumGermMonTx) Delete(values ...*slaughter.ToNumGermMon) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a slaughterProcedureMonitoringDataHasOneToNumGermMonTx) Clear() error {
	return a.tx.Clear()
}

func (a slaughterProcedureMonitoringDataHasOneToNumGermMonTx) Count() int64 {
	return a.tx.Count()
}

type slaughterProcedureMonitoringDataDo struct{ gen.DO }

type ISlaughterProcedureMonitoringDataDo interface {
	gen.SubQuery
	Debug() ISlaughterProcedureMonitoringDataDo
	WithContext(ctx context.Context) ISlaughterProcedureMonitoringDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlaughterProcedureMonitoringDataDo
	WriteDB() ISlaughterProcedureMonitoringDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlaughterProcedureMonitoringDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlaughterProcedureMonitoringDataDo
	Not(conds ...gen.Condition) ISlaughterProcedureMonitoringDataDo
	Or(conds ...gen.Condition) ISlaughterProcedureMonitoringDataDo
	Select(conds ...field.Expr) ISlaughterProcedureMonitoringDataDo
	Where(conds ...gen.Condition) ISlaughterProcedureMonitoringDataDo
	Order(conds ...field.Expr) ISlaughterProcedureMonitoringDataDo
	Distinct(cols ...field.Expr) ISlaughterProcedureMonitoringDataDo
	Omit(cols ...field.Expr) ISlaughterProcedureMonitoringDataDo
	Join(table schema.Tabler, on ...field.Expr) ISlaughterProcedureMonitoringDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterProcedureMonitoringDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterProcedureMonitoringDataDo
	Group(cols ...field.Expr) ISlaughterProcedureMonitoringDataDo
	Having(conds ...gen.Condition) ISlaughterProcedureMonitoringDataDo
	Limit(limit int) ISlaughterProcedureMonitoringDataDo
	Offset(offset int) ISlaughterProcedureMonitoringDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterProcedureMonitoringDataDo
	Unscoped() ISlaughterProcedureMonitoringDataDo
	Create(values ...*slaughter.SlaughterProcedureMonitoringData) error
	CreateInBatches(values []*slaughter.SlaughterProcedureMonitoringData, batchSize int) error
	Save(values ...*slaughter.SlaughterProcedureMonitoringData) error
	First() (*slaughter.SlaughterProcedureMonitoringData, error)
	Take() (*slaughter.SlaughterProcedureMonitoringData, error)
	Last() (*slaughter.SlaughterProcedureMonitoringData, error)
	Find() ([]*slaughter.SlaughterProcedureMonitoringData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.SlaughterProcedureMonitoringData, err error)
	FindInBatches(result *[]*slaughter.SlaughterProcedureMonitoringData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.SlaughterProcedureMonitoringData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlaughterProcedureMonitoringDataDo
	Assign(attrs ...field.AssignExpr) ISlaughterProcedureMonitoringDataDo
	Joins(fields ...field.RelationField) ISlaughterProcedureMonitoringDataDo
	Preload(fields ...field.RelationField) ISlaughterProcedureMonitoringDataDo
	FirstOrInit() (*slaughter.SlaughterProcedureMonitoringData, error)
	FirstOrCreate() (*slaughter.SlaughterProcedureMonitoringData, error)
	FindByPage(offset int, limit int) (result []*slaughter.SlaughterProcedureMonitoringData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlaughterProcedureMonitoringDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slaughterProcedureMonitoringDataDo) Debug() ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Debug())
}

func (s slaughterProcedureMonitoringDataDo) WithContext(ctx context.Context) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slaughterProcedureMonitoringDataDo) ReadDB() ISlaughterProcedureMonitoringDataDo {
	return s.Clauses(dbresolver.Read)
}

func (s slaughterProcedureMonitoringDataDo) WriteDB() ISlaughterProcedureMonitoringDataDo {
	return s.Clauses(dbresolver.Write)
}

func (s slaughterProcedureMonitoringDataDo) Session(config *gorm.Session) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Session(config))
}

func (s slaughterProcedureMonitoringDataDo) Clauses(conds ...clause.Expression) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slaughterProcedureMonitoringDataDo) Returning(value interface{}, columns ...string) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slaughterProcedureMonitoringDataDo) Not(conds ...gen.Condition) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slaughterProcedureMonitoringDataDo) Or(conds ...gen.Condition) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slaughterProcedureMonitoringDataDo) Select(conds ...field.Expr) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slaughterProcedureMonitoringDataDo) Where(conds ...gen.Condition) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slaughterProcedureMonitoringDataDo) Order(conds ...field.Expr) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slaughterProcedureMonitoringDataDo) Distinct(cols ...field.Expr) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slaughterProcedureMonitoringDataDo) Omit(cols ...field.Expr) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slaughterProcedureMonitoringDataDo) Join(table schema.Tabler, on ...field.Expr) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slaughterProcedureMonitoringDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slaughterProcedureMonitoringDataDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slaughterProcedureMonitoringDataDo) Group(cols ...field.Expr) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slaughterProcedureMonitoringDataDo) Having(conds ...gen.Condition) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slaughterProcedureMonitoringDataDo) Limit(limit int) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slaughterProcedureMonitoringDataDo) Offset(offset int) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slaughterProcedureMonitoringDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slaughterProcedureMonitoringDataDo) Unscoped() ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slaughterProcedureMonitoringDataDo) Create(values ...*slaughter.SlaughterProcedureMonitoringData) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slaughterProcedureMonitoringDataDo) CreateInBatches(values []*slaughter.SlaughterProcedureMonitoringData, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slaughterProcedureMonitoringDataDo) Save(values ...*slaughter.SlaughterProcedureMonitoringData) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slaughterProcedureMonitoringDataDo) First() (*slaughter.SlaughterProcedureMonitoringData, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterProcedureMonitoringData), nil
	}
}

func (s slaughterProcedureMonitoringDataDo) Take() (*slaughter.SlaughterProcedureMonitoringData, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterProcedureMonitoringData), nil
	}
}

func (s slaughterProcedureMonitoringDataDo) Last() (*slaughter.SlaughterProcedureMonitoringData, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterProcedureMonitoringData), nil
	}
}

func (s slaughterProcedureMonitoringDataDo) Find() ([]*slaughter.SlaughterProcedureMonitoringData, error) {
	result, err := s.DO.Find()
	return result.([]*slaughter.SlaughterProcedureMonitoringData), err
}

func (s slaughterProcedureMonitoringDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.SlaughterProcedureMonitoringData, err error) {
	buf := make([]*slaughter.SlaughterProcedureMonitoringData, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slaughterProcedureMonitoringDataDo) FindInBatches(result *[]*slaughter.SlaughterProcedureMonitoringData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slaughterProcedureMonitoringDataDo) Attrs(attrs ...field.AssignExpr) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slaughterProcedureMonitoringDataDo) Assign(attrs ...field.AssignExpr) ISlaughterProcedureMonitoringDataDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slaughterProcedureMonitoringDataDo) Joins(fields ...field.RelationField) ISlaughterProcedureMonitoringDataDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slaughterProcedureMonitoringDataDo) Preload(fields ...field.RelationField) ISlaughterProcedureMonitoringDataDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slaughterProcedureMonitoringDataDo) FirstOrInit() (*slaughter.SlaughterProcedureMonitoringData, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterProcedureMonitoringData), nil
	}
}

func (s slaughterProcedureMonitoringDataDo) FirstOrCreate() (*slaughter.SlaughterProcedureMonitoringData, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterProcedureMonitoringData), nil
	}
}

func (s slaughterProcedureMonitoringDataDo) FindByPage(offset int, limit int) (result []*slaughter.SlaughterProcedureMonitoringData, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slaughterProcedureMonitoringDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slaughterProcedureMonitoringDataDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slaughterProcedureMonitoringDataDo) Delete(models ...*slaughter.SlaughterProcedureMonitoringData) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slaughterProcedureMonitoringDataDo) withDO(do gen.Dao) *slaughterProcedureMonitoringDataDo {
	s.DO = *do.(*gen.DO)
	return s
}
