// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAnalAfterSlaQuanCar(db *gorm.DB, opts ...gen.DOOption) analAfterSlaQuanCar {
	_analAfterSlaQuanCar := analAfterSlaQuanCar{}

	_analAfterSlaQuanCar.analAfterSlaQuanCarDo.UseDB(db, opts...)
	_analAfterSlaQuanCar.analAfterSlaQuanCarDo.UseModel(&slaughter.AnalAfterSlaQuanCar{})

	tableName := _analAfterSlaQuanCar.analAfterSlaQuanCarDo.TableName()
	_analAfterSlaQuanCar.ALL = field.NewAsterisk(tableName)
	_analAfterSlaQuanCar.ID = field.NewUint(tableName, "id")
	_analAfterSlaQuanCar.CreatedAt = field.NewTime(tableName, "created_at")
	_analAfterSlaQuanCar.UpdatedAt = field.NewTime(tableName, "updated_at")
	_analAfterSlaQuanCar.DeletedAt = field.NewField(tableName, "deleted_at")
	_analAfterSlaQuanCar.SlaInfoMonID = field.NewUint(tableName, "sla_info_mon_id")
	_analAfterSlaQuanCar.AnalAfterSlaQuanCar1 = field.NewString(tableName, "anal_after_sla_quan_car1")
	_analAfterSlaQuanCar.AnalAfterSlaQuanCar2 = field.NewString(tableName, "anal_after_sla_quan_car2")
	_analAfterSlaQuanCar.AnalAfterSlaQuanCar3 = field.NewString(tableName, "anal_after_sla_quan_car3")
	_analAfterSlaQuanCar.AnalAfterSlaQuanCar4 = field.NewString(tableName, "anal_after_sla_quan_car4")

	_analAfterSlaQuanCar.fillFieldMap()

	return _analAfterSlaQuanCar
}

type analAfterSlaQuanCar struct {
	analAfterSlaQuanCarDo analAfterSlaQuanCarDo

	ALL                  field.Asterisk
	ID                   field.Uint
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	SlaInfoMonID         field.Uint
	AnalAfterSlaQuanCar1 field.String
	AnalAfterSlaQuanCar2 field.String
	AnalAfterSlaQuanCar3 field.String
	AnalAfterSlaQuanCar4 field.String

	fieldMap map[string]field.Expr
}

func (a analAfterSlaQuanCar) Table(newTableName string) *analAfterSlaQuanCar {
	a.analAfterSlaQuanCarDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a analAfterSlaQuanCar) As(alias string) *analAfterSlaQuanCar {
	a.analAfterSlaQuanCarDo.DO = *(a.analAfterSlaQuanCarDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *analAfterSlaQuanCar) updateTableName(table string) *analAfterSlaQuanCar {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.SlaInfoMonID = field.NewUint(table, "sla_info_mon_id")
	a.AnalAfterSlaQuanCar1 = field.NewString(table, "anal_after_sla_quan_car1")
	a.AnalAfterSlaQuanCar2 = field.NewString(table, "anal_after_sla_quan_car2")
	a.AnalAfterSlaQuanCar3 = field.NewString(table, "anal_after_sla_quan_car3")
	a.AnalAfterSlaQuanCar4 = field.NewString(table, "anal_after_sla_quan_car4")

	a.fillFieldMap()

	return a
}

func (a *analAfterSlaQuanCar) WithContext(ctx context.Context) IAnalAfterSlaQuanCarDo {
	return a.analAfterSlaQuanCarDo.WithContext(ctx)
}

func (a analAfterSlaQuanCar) TableName() string { return a.analAfterSlaQuanCarDo.TableName() }

func (a analAfterSlaQuanCar) Alias() string { return a.analAfterSlaQuanCarDo.Alias() }

func (a analAfterSlaQuanCar) Columns(cols ...field.Expr) gen.Columns {
	return a.analAfterSlaQuanCarDo.Columns(cols...)
}

func (a *analAfterSlaQuanCar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *analAfterSlaQuanCar) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["sla_info_mon_id"] = a.SlaInfoMonID
	a.fieldMap["anal_after_sla_quan_car1"] = a.AnalAfterSlaQuanCar1
	a.fieldMap["anal_after_sla_quan_car2"] = a.AnalAfterSlaQuanCar2
	a.fieldMap["anal_after_sla_quan_car3"] = a.AnalAfterSlaQuanCar3
	a.fieldMap["anal_after_sla_quan_car4"] = a.AnalAfterSlaQuanCar4
}

func (a analAfterSlaQuanCar) clone(db *gorm.DB) analAfterSlaQuanCar {
	a.analAfterSlaQuanCarDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a analAfterSlaQuanCar) replaceDB(db *gorm.DB) analAfterSlaQuanCar {
	a.analAfterSlaQuanCarDo.ReplaceDB(db)
	return a
}

type analAfterSlaQuanCarDo struct{ gen.DO }

type IAnalAfterSlaQuanCarDo interface {
	gen.SubQuery
	Debug() IAnalAfterSlaQuanCarDo
	WithContext(ctx context.Context) IAnalAfterSlaQuanCarDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAnalAfterSlaQuanCarDo
	WriteDB() IAnalAfterSlaQuanCarDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAnalAfterSlaQuanCarDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAnalAfterSlaQuanCarDo
	Not(conds ...gen.Condition) IAnalAfterSlaQuanCarDo
	Or(conds ...gen.Condition) IAnalAfterSlaQuanCarDo
	Select(conds ...field.Expr) IAnalAfterSlaQuanCarDo
	Where(conds ...gen.Condition) IAnalAfterSlaQuanCarDo
	Order(conds ...field.Expr) IAnalAfterSlaQuanCarDo
	Distinct(cols ...field.Expr) IAnalAfterSlaQuanCarDo
	Omit(cols ...field.Expr) IAnalAfterSlaQuanCarDo
	Join(table schema.Tabler, on ...field.Expr) IAnalAfterSlaQuanCarDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAnalAfterSlaQuanCarDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAnalAfterSlaQuanCarDo
	Group(cols ...field.Expr) IAnalAfterSlaQuanCarDo
	Having(conds ...gen.Condition) IAnalAfterSlaQuanCarDo
	Limit(limit int) IAnalAfterSlaQuanCarDo
	Offset(offset int) IAnalAfterSlaQuanCarDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalAfterSlaQuanCarDo
	Unscoped() IAnalAfterSlaQuanCarDo
	Create(values ...*slaughter.AnalAfterSlaQuanCar) error
	CreateInBatches(values []*slaughter.AnalAfterSlaQuanCar, batchSize int) error
	Save(values ...*slaughter.AnalAfterSlaQuanCar) error
	First() (*slaughter.AnalAfterSlaQuanCar, error)
	Take() (*slaughter.AnalAfterSlaQuanCar, error)
	Last() (*slaughter.AnalAfterSlaQuanCar, error)
	Find() ([]*slaughter.AnalAfterSlaQuanCar, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.AnalAfterSlaQuanCar, err error)
	FindInBatches(result *[]*slaughter.AnalAfterSlaQuanCar, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.AnalAfterSlaQuanCar) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAnalAfterSlaQuanCarDo
	Assign(attrs ...field.AssignExpr) IAnalAfterSlaQuanCarDo
	Joins(fields ...field.RelationField) IAnalAfterSlaQuanCarDo
	Preload(fields ...field.RelationField) IAnalAfterSlaQuanCarDo
	FirstOrInit() (*slaughter.AnalAfterSlaQuanCar, error)
	FirstOrCreate() (*slaughter.AnalAfterSlaQuanCar, error)
	FindByPage(offset int, limit int) (result []*slaughter.AnalAfterSlaQuanCar, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAnalAfterSlaQuanCarDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a analAfterSlaQuanCarDo) Debug() IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Debug())
}

func (a analAfterSlaQuanCarDo) WithContext(ctx context.Context) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a analAfterSlaQuanCarDo) ReadDB() IAnalAfterSlaQuanCarDo {
	return a.Clauses(dbresolver.Read)
}

func (a analAfterSlaQuanCarDo) WriteDB() IAnalAfterSlaQuanCarDo {
	return a.Clauses(dbresolver.Write)
}

func (a analAfterSlaQuanCarDo) Session(config *gorm.Session) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Session(config))
}

func (a analAfterSlaQuanCarDo) Clauses(conds ...clause.Expression) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a analAfterSlaQuanCarDo) Returning(value interface{}, columns ...string) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a analAfterSlaQuanCarDo) Not(conds ...gen.Condition) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a analAfterSlaQuanCarDo) Or(conds ...gen.Condition) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a analAfterSlaQuanCarDo) Select(conds ...field.Expr) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a analAfterSlaQuanCarDo) Where(conds ...gen.Condition) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a analAfterSlaQuanCarDo) Order(conds ...field.Expr) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a analAfterSlaQuanCarDo) Distinct(cols ...field.Expr) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a analAfterSlaQuanCarDo) Omit(cols ...field.Expr) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a analAfterSlaQuanCarDo) Join(table schema.Tabler, on ...field.Expr) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a analAfterSlaQuanCarDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a analAfterSlaQuanCarDo) RightJoin(table schema.Tabler, on ...field.Expr) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a analAfterSlaQuanCarDo) Group(cols ...field.Expr) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a analAfterSlaQuanCarDo) Having(conds ...gen.Condition) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a analAfterSlaQuanCarDo) Limit(limit int) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a analAfterSlaQuanCarDo) Offset(offset int) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a analAfterSlaQuanCarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a analAfterSlaQuanCarDo) Unscoped() IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Unscoped())
}

func (a analAfterSlaQuanCarDo) Create(values ...*slaughter.AnalAfterSlaQuanCar) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a analAfterSlaQuanCarDo) CreateInBatches(values []*slaughter.AnalAfterSlaQuanCar, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a analAfterSlaQuanCarDo) Save(values ...*slaughter.AnalAfterSlaQuanCar) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a analAfterSlaQuanCarDo) First() (*slaughter.AnalAfterSlaQuanCar, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AnalAfterSlaQuanCar), nil
	}
}

func (a analAfterSlaQuanCarDo) Take() (*slaughter.AnalAfterSlaQuanCar, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AnalAfterSlaQuanCar), nil
	}
}

func (a analAfterSlaQuanCarDo) Last() (*slaughter.AnalAfterSlaQuanCar, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AnalAfterSlaQuanCar), nil
	}
}

func (a analAfterSlaQuanCarDo) Find() ([]*slaughter.AnalAfterSlaQuanCar, error) {
	result, err := a.DO.Find()
	return result.([]*slaughter.AnalAfterSlaQuanCar), err
}

func (a analAfterSlaQuanCarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.AnalAfterSlaQuanCar, err error) {
	buf := make([]*slaughter.AnalAfterSlaQuanCar, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a analAfterSlaQuanCarDo) FindInBatches(result *[]*slaughter.AnalAfterSlaQuanCar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a analAfterSlaQuanCarDo) Attrs(attrs ...field.AssignExpr) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a analAfterSlaQuanCarDo) Assign(attrs ...field.AssignExpr) IAnalAfterSlaQuanCarDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a analAfterSlaQuanCarDo) Joins(fields ...field.RelationField) IAnalAfterSlaQuanCarDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a analAfterSlaQuanCarDo) Preload(fields ...field.RelationField) IAnalAfterSlaQuanCarDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a analAfterSlaQuanCarDo) FirstOrInit() (*slaughter.AnalAfterSlaQuanCar, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AnalAfterSlaQuanCar), nil
	}
}

func (a analAfterSlaQuanCarDo) FirstOrCreate() (*slaughter.AnalAfterSlaQuanCar, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AnalAfterSlaQuanCar), nil
	}
}

func (a analAfterSlaQuanCarDo) FindByPage(offset int, limit int) (result []*slaughter.AnalAfterSlaQuanCar, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a analAfterSlaQuanCarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a analAfterSlaQuanCarDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a analAfterSlaQuanCarDo) Delete(models ...*slaughter.AnalAfterSlaQuanCar) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *analAfterSlaQuanCarDo) withDO(do gen.Dao) *analAfterSlaQuanCarDo {
	a.DO = *do.(*gen.DO)
	return a
}
