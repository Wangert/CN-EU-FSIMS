// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAllSlaughtersTrashDisposal(db *gorm.DB, opts ...gen.DOOption) allSlaughtersTrashDisposal {
	_allSlaughtersTrashDisposal := allSlaughtersTrashDisposal{}

	_allSlaughtersTrashDisposal.allSlaughtersTrashDisposalDo.UseDB(db, opts...)
	_allSlaughtersTrashDisposal.allSlaughtersTrashDisposalDo.UseModel(&slaughter.AllSlaughtersTrashDisposal{})

	tableName := _allSlaughtersTrashDisposal.allSlaughtersTrashDisposalDo.TableName()
	_allSlaughtersTrashDisposal.ALL = field.NewAsterisk(tableName)
	_allSlaughtersTrashDisposal.ID = field.NewUint(tableName, "id")
	_allSlaughtersTrashDisposal.CreatedAt = field.NewTime(tableName, "created_at")
	_allSlaughtersTrashDisposal.UpdatedAt = field.NewTime(tableName, "updated_at")
	_allSlaughtersTrashDisposal.DeletedAt = field.NewField(tableName, "deleted_at")
	_allSlaughtersTrashDisposal.TimeStamp = field.NewTime(tableName, "time_stamp")
	_allSlaughtersTrashDisposal.OdorAllSlaughtersTrashDisposal1 = field.NewFloat32(tableName, "odor_all_slaughters_trash_disposal1")
	_allSlaughtersTrashDisposal.OdorAllSlaughtersTrashDisposal2 = field.NewFloat32(tableName, "odor_all_slaughters_trash_disposal2")
	_allSlaughtersTrashDisposal.OdorAllSlaughtersTrashDisposal3 = field.NewFloat32(tableName, "odor_all_slaughters_trash_disposal3")
	_allSlaughtersTrashDisposal.OdorAllSlaughtersTrashDisposal4 = field.NewFloat32(tableName, "odor_all_slaughters_trash_disposal4")
	_allSlaughtersTrashDisposal.ResidueSlaughtersTrashDisposal1 = field.NewFloat32(tableName, "residue_slaughters_trash_disposal1")
	_allSlaughtersTrashDisposal.ResidueSlaughtersTrashDisposal2 = field.NewFloat32(tableName, "residue_slaughters_trash_disposal2")
	_allSlaughtersTrashDisposal.ResidueSlaughtersTrashDisposal3 = field.NewFloat32(tableName, "residue_slaughters_trash_disposal3")
	_allSlaughtersTrashDisposal.ResidueSlaughtersTrashDisposal4 = field.NewFloat32(tableName, "residue_slaughters_trash_disposal4")
	_allSlaughtersTrashDisposal.WaterSlaughtersTrashDisposal1 = field.NewFloat32(tableName, "water_slaughters_trash_disposal1")
	_allSlaughtersTrashDisposal.WaterSlaughtersTrashDisposal2 = field.NewFloat32(tableName, "water_slaughters_trash_disposal2")
	_allSlaughtersTrashDisposal.WaterSlaughtersTrashDisposal3 = field.NewFloat32(tableName, "water_slaughters_trash_disposal3")
	_allSlaughtersTrashDisposal.WaterSlaughtersTrashDisposal4 = field.NewFloat32(tableName, "water_slaughters_trash_disposal4")

	_allSlaughtersTrashDisposal.fillFieldMap()

	return _allSlaughtersTrashDisposal
}

type allSlaughtersTrashDisposal struct {
	allSlaughtersTrashDisposalDo allSlaughtersTrashDisposalDo

	ALL                             field.Asterisk
	ID                              field.Uint
	CreatedAt                       field.Time
	UpdatedAt                       field.Time
	DeletedAt                       field.Field
	TimeStamp                       field.Time
	OdorAllSlaughtersTrashDisposal1 field.Float32
	OdorAllSlaughtersTrashDisposal2 field.Float32
	OdorAllSlaughtersTrashDisposal3 field.Float32
	OdorAllSlaughtersTrashDisposal4 field.Float32
	ResidueSlaughtersTrashDisposal1 field.Float32
	ResidueSlaughtersTrashDisposal2 field.Float32
	ResidueSlaughtersTrashDisposal3 field.Float32
	ResidueSlaughtersTrashDisposal4 field.Float32
	WaterSlaughtersTrashDisposal1   field.Float32
	WaterSlaughtersTrashDisposal2   field.Float32
	WaterSlaughtersTrashDisposal3   field.Float32
	WaterSlaughtersTrashDisposal4   field.Float32

	fieldMap map[string]field.Expr
}

func (a allSlaughtersTrashDisposal) Table(newTableName string) *allSlaughtersTrashDisposal {
	a.allSlaughtersTrashDisposalDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a allSlaughtersTrashDisposal) As(alias string) *allSlaughtersTrashDisposal {
	a.allSlaughtersTrashDisposalDo.DO = *(a.allSlaughtersTrashDisposalDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *allSlaughtersTrashDisposal) updateTableName(table string) *allSlaughtersTrashDisposal {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.TimeStamp = field.NewTime(table, "time_stamp")
	a.OdorAllSlaughtersTrashDisposal1 = field.NewFloat32(table, "odor_all_slaughters_trash_disposal1")
	a.OdorAllSlaughtersTrashDisposal2 = field.NewFloat32(table, "odor_all_slaughters_trash_disposal2")
	a.OdorAllSlaughtersTrashDisposal3 = field.NewFloat32(table, "odor_all_slaughters_trash_disposal3")
	a.OdorAllSlaughtersTrashDisposal4 = field.NewFloat32(table, "odor_all_slaughters_trash_disposal4")
	a.ResidueSlaughtersTrashDisposal1 = field.NewFloat32(table, "residue_slaughters_trash_disposal1")
	a.ResidueSlaughtersTrashDisposal2 = field.NewFloat32(table, "residue_slaughters_trash_disposal2")
	a.ResidueSlaughtersTrashDisposal3 = field.NewFloat32(table, "residue_slaughters_trash_disposal3")
	a.ResidueSlaughtersTrashDisposal4 = field.NewFloat32(table, "residue_slaughters_trash_disposal4")
	a.WaterSlaughtersTrashDisposal1 = field.NewFloat32(table, "water_slaughters_trash_disposal1")
	a.WaterSlaughtersTrashDisposal2 = field.NewFloat32(table, "water_slaughters_trash_disposal2")
	a.WaterSlaughtersTrashDisposal3 = field.NewFloat32(table, "water_slaughters_trash_disposal3")
	a.WaterSlaughtersTrashDisposal4 = field.NewFloat32(table, "water_slaughters_trash_disposal4")

	a.fillFieldMap()

	return a
}

func (a *allSlaughtersTrashDisposal) WithContext(ctx context.Context) IAllSlaughtersTrashDisposalDo {
	return a.allSlaughtersTrashDisposalDo.WithContext(ctx)
}

func (a allSlaughtersTrashDisposal) TableName() string {
	return a.allSlaughtersTrashDisposalDo.TableName()
}

func (a allSlaughtersTrashDisposal) Alias() string { return a.allSlaughtersTrashDisposalDo.Alias() }

func (a allSlaughtersTrashDisposal) Columns(cols ...field.Expr) gen.Columns {
	return a.allSlaughtersTrashDisposalDo.Columns(cols...)
}

func (a *allSlaughtersTrashDisposal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *allSlaughtersTrashDisposal) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["time_stamp"] = a.TimeStamp
	a.fieldMap["odor_all_slaughters_trash_disposal1"] = a.OdorAllSlaughtersTrashDisposal1
	a.fieldMap["odor_all_slaughters_trash_disposal2"] = a.OdorAllSlaughtersTrashDisposal2
	a.fieldMap["odor_all_slaughters_trash_disposal3"] = a.OdorAllSlaughtersTrashDisposal3
	a.fieldMap["odor_all_slaughters_trash_disposal4"] = a.OdorAllSlaughtersTrashDisposal4
	a.fieldMap["residue_slaughters_trash_disposal1"] = a.ResidueSlaughtersTrashDisposal1
	a.fieldMap["residue_slaughters_trash_disposal2"] = a.ResidueSlaughtersTrashDisposal2
	a.fieldMap["residue_slaughters_trash_disposal3"] = a.ResidueSlaughtersTrashDisposal3
	a.fieldMap["residue_slaughters_trash_disposal4"] = a.ResidueSlaughtersTrashDisposal4
	a.fieldMap["water_slaughters_trash_disposal1"] = a.WaterSlaughtersTrashDisposal1
	a.fieldMap["water_slaughters_trash_disposal2"] = a.WaterSlaughtersTrashDisposal2
	a.fieldMap["water_slaughters_trash_disposal3"] = a.WaterSlaughtersTrashDisposal3
	a.fieldMap["water_slaughters_trash_disposal4"] = a.WaterSlaughtersTrashDisposal4
}

func (a allSlaughtersTrashDisposal) clone(db *gorm.DB) allSlaughtersTrashDisposal {
	a.allSlaughtersTrashDisposalDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a allSlaughtersTrashDisposal) replaceDB(db *gorm.DB) allSlaughtersTrashDisposal {
	a.allSlaughtersTrashDisposalDo.ReplaceDB(db)
	return a
}

type allSlaughtersTrashDisposalDo struct{ gen.DO }

type IAllSlaughtersTrashDisposalDo interface {
	gen.SubQuery
	Debug() IAllSlaughtersTrashDisposalDo
	WithContext(ctx context.Context) IAllSlaughtersTrashDisposalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAllSlaughtersTrashDisposalDo
	WriteDB() IAllSlaughtersTrashDisposalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAllSlaughtersTrashDisposalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAllSlaughtersTrashDisposalDo
	Not(conds ...gen.Condition) IAllSlaughtersTrashDisposalDo
	Or(conds ...gen.Condition) IAllSlaughtersTrashDisposalDo
	Select(conds ...field.Expr) IAllSlaughtersTrashDisposalDo
	Where(conds ...gen.Condition) IAllSlaughtersTrashDisposalDo
	Order(conds ...field.Expr) IAllSlaughtersTrashDisposalDo
	Distinct(cols ...field.Expr) IAllSlaughtersTrashDisposalDo
	Omit(cols ...field.Expr) IAllSlaughtersTrashDisposalDo
	Join(table schema.Tabler, on ...field.Expr) IAllSlaughtersTrashDisposalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAllSlaughtersTrashDisposalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAllSlaughtersTrashDisposalDo
	Group(cols ...field.Expr) IAllSlaughtersTrashDisposalDo
	Having(conds ...gen.Condition) IAllSlaughtersTrashDisposalDo
	Limit(limit int) IAllSlaughtersTrashDisposalDo
	Offset(offset int) IAllSlaughtersTrashDisposalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAllSlaughtersTrashDisposalDo
	Unscoped() IAllSlaughtersTrashDisposalDo
	Create(values ...*slaughter.AllSlaughtersTrashDisposal) error
	CreateInBatches(values []*slaughter.AllSlaughtersTrashDisposal, batchSize int) error
	Save(values ...*slaughter.AllSlaughtersTrashDisposal) error
	First() (*slaughter.AllSlaughtersTrashDisposal, error)
	Take() (*slaughter.AllSlaughtersTrashDisposal, error)
	Last() (*slaughter.AllSlaughtersTrashDisposal, error)
	Find() ([]*slaughter.AllSlaughtersTrashDisposal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.AllSlaughtersTrashDisposal, err error)
	FindInBatches(result *[]*slaughter.AllSlaughtersTrashDisposal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.AllSlaughtersTrashDisposal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAllSlaughtersTrashDisposalDo
	Assign(attrs ...field.AssignExpr) IAllSlaughtersTrashDisposalDo
	Joins(fields ...field.RelationField) IAllSlaughtersTrashDisposalDo
	Preload(fields ...field.RelationField) IAllSlaughtersTrashDisposalDo
	FirstOrInit() (*slaughter.AllSlaughtersTrashDisposal, error)
	FirstOrCreate() (*slaughter.AllSlaughtersTrashDisposal, error)
	FindByPage(offset int, limit int) (result []*slaughter.AllSlaughtersTrashDisposal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAllSlaughtersTrashDisposalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a allSlaughtersTrashDisposalDo) Debug() IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Debug())
}

func (a allSlaughtersTrashDisposalDo) WithContext(ctx context.Context) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a allSlaughtersTrashDisposalDo) ReadDB() IAllSlaughtersTrashDisposalDo {
	return a.Clauses(dbresolver.Read)
}

func (a allSlaughtersTrashDisposalDo) WriteDB() IAllSlaughtersTrashDisposalDo {
	return a.Clauses(dbresolver.Write)
}

func (a allSlaughtersTrashDisposalDo) Session(config *gorm.Session) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Session(config))
}

func (a allSlaughtersTrashDisposalDo) Clauses(conds ...clause.Expression) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a allSlaughtersTrashDisposalDo) Returning(value interface{}, columns ...string) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a allSlaughtersTrashDisposalDo) Not(conds ...gen.Condition) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a allSlaughtersTrashDisposalDo) Or(conds ...gen.Condition) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a allSlaughtersTrashDisposalDo) Select(conds ...field.Expr) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a allSlaughtersTrashDisposalDo) Where(conds ...gen.Condition) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a allSlaughtersTrashDisposalDo) Order(conds ...field.Expr) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a allSlaughtersTrashDisposalDo) Distinct(cols ...field.Expr) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a allSlaughtersTrashDisposalDo) Omit(cols ...field.Expr) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a allSlaughtersTrashDisposalDo) Join(table schema.Tabler, on ...field.Expr) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a allSlaughtersTrashDisposalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a allSlaughtersTrashDisposalDo) RightJoin(table schema.Tabler, on ...field.Expr) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a allSlaughtersTrashDisposalDo) Group(cols ...field.Expr) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a allSlaughtersTrashDisposalDo) Having(conds ...gen.Condition) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a allSlaughtersTrashDisposalDo) Limit(limit int) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a allSlaughtersTrashDisposalDo) Offset(offset int) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a allSlaughtersTrashDisposalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a allSlaughtersTrashDisposalDo) Unscoped() IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Unscoped())
}

func (a allSlaughtersTrashDisposalDo) Create(values ...*slaughter.AllSlaughtersTrashDisposal) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a allSlaughtersTrashDisposalDo) CreateInBatches(values []*slaughter.AllSlaughtersTrashDisposal, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a allSlaughtersTrashDisposalDo) Save(values ...*slaughter.AllSlaughtersTrashDisposal) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a allSlaughtersTrashDisposalDo) First() (*slaughter.AllSlaughtersTrashDisposal, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AllSlaughtersTrashDisposal), nil
	}
}

func (a allSlaughtersTrashDisposalDo) Take() (*slaughter.AllSlaughtersTrashDisposal, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AllSlaughtersTrashDisposal), nil
	}
}

func (a allSlaughtersTrashDisposalDo) Last() (*slaughter.AllSlaughtersTrashDisposal, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AllSlaughtersTrashDisposal), nil
	}
}

func (a allSlaughtersTrashDisposalDo) Find() ([]*slaughter.AllSlaughtersTrashDisposal, error) {
	result, err := a.DO.Find()
	return result.([]*slaughter.AllSlaughtersTrashDisposal), err
}

func (a allSlaughtersTrashDisposalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.AllSlaughtersTrashDisposal, err error) {
	buf := make([]*slaughter.AllSlaughtersTrashDisposal, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a allSlaughtersTrashDisposalDo) FindInBatches(result *[]*slaughter.AllSlaughtersTrashDisposal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a allSlaughtersTrashDisposalDo) Attrs(attrs ...field.AssignExpr) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a allSlaughtersTrashDisposalDo) Assign(attrs ...field.AssignExpr) IAllSlaughtersTrashDisposalDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a allSlaughtersTrashDisposalDo) Joins(fields ...field.RelationField) IAllSlaughtersTrashDisposalDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a allSlaughtersTrashDisposalDo) Preload(fields ...field.RelationField) IAllSlaughtersTrashDisposalDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a allSlaughtersTrashDisposalDo) FirstOrInit() (*slaughter.AllSlaughtersTrashDisposal, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AllSlaughtersTrashDisposal), nil
	}
}

func (a allSlaughtersTrashDisposalDo) FirstOrCreate() (*slaughter.AllSlaughtersTrashDisposal, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.AllSlaughtersTrashDisposal), nil
	}
}

func (a allSlaughtersTrashDisposalDo) FindByPage(offset int, limit int) (result []*slaughter.AllSlaughtersTrashDisposal, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a allSlaughtersTrashDisposalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a allSlaughtersTrashDisposalDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a allSlaughtersTrashDisposalDo) Delete(models ...*slaughter.AllSlaughtersTrashDisposal) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *allSlaughtersTrashDisposalDo) withDO(do gen.Dao) *allSlaughtersTrashDisposalDo {
	a.DO = *do.(*gen.DO)
	return a
}
