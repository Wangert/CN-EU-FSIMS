// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureFloorBeddingPhysicalHazard(db *gorm.DB, opts ...gen.DOOption) pastureFloorBeddingPhysicalHazard {
	_pastureFloorBeddingPhysicalHazard := pastureFloorBeddingPhysicalHazard{}

	_pastureFloorBeddingPhysicalHazard.pastureFloorBeddingPhysicalHazardDo.UseDB(db, opts...)
	_pastureFloorBeddingPhysicalHazard.pastureFloorBeddingPhysicalHazardDo.UseModel(&pasture.PastureFloorBeddingPhysicalHazard{})

	tableName := _pastureFloorBeddingPhysicalHazard.pastureFloorBeddingPhysicalHazardDo.TableName()
	_pastureFloorBeddingPhysicalHazard.ALL = field.NewAsterisk(tableName)
	_pastureFloorBeddingPhysicalHazard.ID = field.NewUint(tableName, "id")
	_pastureFloorBeddingPhysicalHazard.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureFloorBeddingPhysicalHazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureFloorBeddingPhysicalHazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureFloorBeddingPhysicalHazard.Mercury = field.NewFloat64(tableName, "mercury")
	_pastureFloorBeddingPhysicalHazard.Cadmium = field.NewFloat64(tableName, "cadmium")
	_pastureFloorBeddingPhysicalHazard.Lead = field.NewFloat64(tableName, "lead")
	_pastureFloorBeddingPhysicalHazard.Chromium = field.NewFloat64(tableName, "chromium")
	_pastureFloorBeddingPhysicalHazard.PastureFloorBeddingID = field.NewUint(tableName, "pasture_floor_bedding_id")

	_pastureFloorBeddingPhysicalHazard.fillFieldMap()

	return _pastureFloorBeddingPhysicalHazard
}

type pastureFloorBeddingPhysicalHazard struct {
	pastureFloorBeddingPhysicalHazardDo pastureFloorBeddingPhysicalHazardDo

	ALL                   field.Asterisk
	ID                    field.Uint
	CreatedAt             field.Time
	UpdatedAt             field.Time
	DeletedAt             field.Field
	Mercury               field.Float64
	Cadmium               field.Float64
	Lead                  field.Float64
	Chromium              field.Float64
	PastureFloorBeddingID field.Uint

	fieldMap map[string]field.Expr
}

func (p pastureFloorBeddingPhysicalHazard) Table(newTableName string) *pastureFloorBeddingPhysicalHazard {
	p.pastureFloorBeddingPhysicalHazardDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureFloorBeddingPhysicalHazard) As(alias string) *pastureFloorBeddingPhysicalHazard {
	p.pastureFloorBeddingPhysicalHazardDo.DO = *(p.pastureFloorBeddingPhysicalHazardDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureFloorBeddingPhysicalHazard) updateTableName(table string) *pastureFloorBeddingPhysicalHazard {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Mercury = field.NewFloat64(table, "mercury")
	p.Cadmium = field.NewFloat64(table, "cadmium")
	p.Lead = field.NewFloat64(table, "lead")
	p.Chromium = field.NewFloat64(table, "chromium")
	p.PastureFloorBeddingID = field.NewUint(table, "pasture_floor_bedding_id")

	p.fillFieldMap()

	return p
}

func (p *pastureFloorBeddingPhysicalHazard) WithContext(ctx context.Context) IPastureFloorBeddingPhysicalHazardDo {
	return p.pastureFloorBeddingPhysicalHazardDo.WithContext(ctx)
}

func (p pastureFloorBeddingPhysicalHazard) TableName() string {
	return p.pastureFloorBeddingPhysicalHazardDo.TableName()
}

func (p pastureFloorBeddingPhysicalHazard) Alias() string {
	return p.pastureFloorBeddingPhysicalHazardDo.Alias()
}

func (p pastureFloorBeddingPhysicalHazard) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureFloorBeddingPhysicalHazardDo.Columns(cols...)
}

func (p *pastureFloorBeddingPhysicalHazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureFloorBeddingPhysicalHazard) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["mercury"] = p.Mercury
	p.fieldMap["cadmium"] = p.Cadmium
	p.fieldMap["lead"] = p.Lead
	p.fieldMap["chromium"] = p.Chromium
	p.fieldMap["pasture_floor_bedding_id"] = p.PastureFloorBeddingID
}

func (p pastureFloorBeddingPhysicalHazard) clone(db *gorm.DB) pastureFloorBeddingPhysicalHazard {
	p.pastureFloorBeddingPhysicalHazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureFloorBeddingPhysicalHazard) replaceDB(db *gorm.DB) pastureFloorBeddingPhysicalHazard {
	p.pastureFloorBeddingPhysicalHazardDo.ReplaceDB(db)
	return p
}

type pastureFloorBeddingPhysicalHazardDo struct{ gen.DO }

type IPastureFloorBeddingPhysicalHazardDo interface {
	gen.SubQuery
	Debug() IPastureFloorBeddingPhysicalHazardDo
	WithContext(ctx context.Context) IPastureFloorBeddingPhysicalHazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureFloorBeddingPhysicalHazardDo
	WriteDB() IPastureFloorBeddingPhysicalHazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureFloorBeddingPhysicalHazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureFloorBeddingPhysicalHazardDo
	Not(conds ...gen.Condition) IPastureFloorBeddingPhysicalHazardDo
	Or(conds ...gen.Condition) IPastureFloorBeddingPhysicalHazardDo
	Select(conds ...field.Expr) IPastureFloorBeddingPhysicalHazardDo
	Where(conds ...gen.Condition) IPastureFloorBeddingPhysicalHazardDo
	Order(conds ...field.Expr) IPastureFloorBeddingPhysicalHazardDo
	Distinct(cols ...field.Expr) IPastureFloorBeddingPhysicalHazardDo
	Omit(cols ...field.Expr) IPastureFloorBeddingPhysicalHazardDo
	Join(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingPhysicalHazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingPhysicalHazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingPhysicalHazardDo
	Group(cols ...field.Expr) IPastureFloorBeddingPhysicalHazardDo
	Having(conds ...gen.Condition) IPastureFloorBeddingPhysicalHazardDo
	Limit(limit int) IPastureFloorBeddingPhysicalHazardDo
	Offset(offset int) IPastureFloorBeddingPhysicalHazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFloorBeddingPhysicalHazardDo
	Unscoped() IPastureFloorBeddingPhysicalHazardDo
	Create(values ...*pasture.PastureFloorBeddingPhysicalHazard) error
	CreateInBatches(values []*pasture.PastureFloorBeddingPhysicalHazard, batchSize int) error
	Save(values ...*pasture.PastureFloorBeddingPhysicalHazard) error
	First() (*pasture.PastureFloorBeddingPhysicalHazard, error)
	Take() (*pasture.PastureFloorBeddingPhysicalHazard, error)
	Last() (*pasture.PastureFloorBeddingPhysicalHazard, error)
	Find() ([]*pasture.PastureFloorBeddingPhysicalHazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFloorBeddingPhysicalHazard, err error)
	FindInBatches(result *[]*pasture.PastureFloorBeddingPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureFloorBeddingPhysicalHazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureFloorBeddingPhysicalHazardDo
	Assign(attrs ...field.AssignExpr) IPastureFloorBeddingPhysicalHazardDo
	Joins(fields ...field.RelationField) IPastureFloorBeddingPhysicalHazardDo
	Preload(fields ...field.RelationField) IPastureFloorBeddingPhysicalHazardDo
	FirstOrInit() (*pasture.PastureFloorBeddingPhysicalHazard, error)
	FirstOrCreate() (*pasture.PastureFloorBeddingPhysicalHazard, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureFloorBeddingPhysicalHazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureFloorBeddingPhysicalHazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureFloorBeddingPhysicalHazardDo) Debug() IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureFloorBeddingPhysicalHazardDo) WithContext(ctx context.Context) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureFloorBeddingPhysicalHazardDo) ReadDB() IPastureFloorBeddingPhysicalHazardDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureFloorBeddingPhysicalHazardDo) WriteDB() IPastureFloorBeddingPhysicalHazardDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureFloorBeddingPhysicalHazardDo) Session(config *gorm.Session) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureFloorBeddingPhysicalHazardDo) Clauses(conds ...clause.Expression) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Returning(value interface{}, columns ...string) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Not(conds ...gen.Condition) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Or(conds ...gen.Condition) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Select(conds ...field.Expr) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Where(conds ...gen.Condition) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Order(conds ...field.Expr) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Distinct(cols ...field.Expr) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Omit(cols ...field.Expr) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Join(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureFloorBeddingPhysicalHazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureFloorBeddingPhysicalHazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Group(cols ...field.Expr) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Having(conds ...gen.Condition) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Limit(limit int) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureFloorBeddingPhysicalHazardDo) Offset(offset int) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureFloorBeddingPhysicalHazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Unscoped() IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureFloorBeddingPhysicalHazardDo) Create(values ...*pasture.PastureFloorBeddingPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureFloorBeddingPhysicalHazardDo) CreateInBatches(values []*pasture.PastureFloorBeddingPhysicalHazard, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureFloorBeddingPhysicalHazardDo) Save(values ...*pasture.PastureFloorBeddingPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureFloorBeddingPhysicalHazardDo) First() (*pasture.PastureFloorBeddingPhysicalHazard, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBeddingPhysicalHazard), nil
	}
}

func (p pastureFloorBeddingPhysicalHazardDo) Take() (*pasture.PastureFloorBeddingPhysicalHazard, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBeddingPhysicalHazard), nil
	}
}

func (p pastureFloorBeddingPhysicalHazardDo) Last() (*pasture.PastureFloorBeddingPhysicalHazard, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBeddingPhysicalHazard), nil
	}
}

func (p pastureFloorBeddingPhysicalHazardDo) Find() ([]*pasture.PastureFloorBeddingPhysicalHazard, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureFloorBeddingPhysicalHazard), err
}

func (p pastureFloorBeddingPhysicalHazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFloorBeddingPhysicalHazard, err error) {
	buf := make([]*pasture.PastureFloorBeddingPhysicalHazard, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureFloorBeddingPhysicalHazardDo) FindInBatches(result *[]*pasture.PastureFloorBeddingPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureFloorBeddingPhysicalHazardDo) Attrs(attrs ...field.AssignExpr) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Assign(attrs ...field.AssignExpr) IPastureFloorBeddingPhysicalHazardDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureFloorBeddingPhysicalHazardDo) Joins(fields ...field.RelationField) IPastureFloorBeddingPhysicalHazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureFloorBeddingPhysicalHazardDo) Preload(fields ...field.RelationField) IPastureFloorBeddingPhysicalHazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureFloorBeddingPhysicalHazardDo) FirstOrInit() (*pasture.PastureFloorBeddingPhysicalHazard, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBeddingPhysicalHazard), nil
	}
}

func (p pastureFloorBeddingPhysicalHazardDo) FirstOrCreate() (*pasture.PastureFloorBeddingPhysicalHazard, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFloorBeddingPhysicalHazard), nil
	}
}

func (p pastureFloorBeddingPhysicalHazardDo) FindByPage(offset int, limit int) (result []*pasture.PastureFloorBeddingPhysicalHazard, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureFloorBeddingPhysicalHazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureFloorBeddingPhysicalHazardDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureFloorBeddingPhysicalHazardDo) Delete(models ...*pasture.PastureFloorBeddingPhysicalHazard) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureFloorBeddingPhysicalHazardDo) withDO(do gen.Dao) *pastureFloorBeddingPhysicalHazardDo {
	p.DO = *do.(*gen.DO)
	return p
}
