// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDisRecord(db *gorm.DB, opts ...gen.DOOption) disRecord {
	_disRecord := disRecord{}

	_disRecord.disRecordDo.UseDB(db, opts...)
	_disRecord.disRecordDo.UseModel(&slaughter.DisRecord{})

	tableName := _disRecord.disRecordDo.TableName()
	_disRecord.ALL = field.NewAsterisk(tableName)
	_disRecord.ID = field.NewUint(tableName, "id")
	_disRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_disRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_disRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_disRecord.DivShopID = field.NewUint(tableName, "div_shop_id")
	_disRecord.SlaShopID = field.NewUint(tableName, "sla_shop_id")
	_disRecord.AcidShopID = field.NewUint(tableName, "acid_shop_id")
	_disRecord.PackShopID = field.NewUint(tableName, "pack_shop_id")
	_disRecord.FroShopID = field.NewUint(tableName, "fro_shop_id")
	_disRecord.StaUniID = field.NewUint(tableName, "sta_uni_id")
	_disRecord.SlaInfoMonID = field.NewUint(tableName, "sla_info_mon_id")
	_disRecord.DisRecord1 = field.NewString(tableName, "dis_record1")
	_disRecord.DisRecord2 = field.NewFloat32(tableName, "dis_record2")
	_disRecord.DisRecord3 = field.NewString(tableName, "dis_record3")
	_disRecord.DisRecord4 = field.NewString(tableName, "dis_record4")
	_disRecord.DisRecord5 = field.NewString(tableName, "dis_record5")

	_disRecord.fillFieldMap()

	return _disRecord
}

type disRecord struct {
	disRecordDo disRecordDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	DivShopID    field.Uint
	SlaShopID    field.Uint
	AcidShopID   field.Uint
	PackShopID   field.Uint
	FroShopID    field.Uint
	StaUniID     field.Uint
	SlaInfoMonID field.Uint
	DisRecord1   field.String
	DisRecord2   field.Float32
	DisRecord3   field.String
	DisRecord4   field.String
	DisRecord5   field.String

	fieldMap map[string]field.Expr
}

func (d disRecord) Table(newTableName string) *disRecord {
	d.disRecordDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d disRecord) As(alias string) *disRecord {
	d.disRecordDo.DO = *(d.disRecordDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *disRecord) updateTableName(table string) *disRecord {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.DivShopID = field.NewUint(table, "div_shop_id")
	d.SlaShopID = field.NewUint(table, "sla_shop_id")
	d.AcidShopID = field.NewUint(table, "acid_shop_id")
	d.PackShopID = field.NewUint(table, "pack_shop_id")
	d.FroShopID = field.NewUint(table, "fro_shop_id")
	d.StaUniID = field.NewUint(table, "sta_uni_id")
	d.SlaInfoMonID = field.NewUint(table, "sla_info_mon_id")
	d.DisRecord1 = field.NewString(table, "dis_record1")
	d.DisRecord2 = field.NewFloat32(table, "dis_record2")
	d.DisRecord3 = field.NewString(table, "dis_record3")
	d.DisRecord4 = field.NewString(table, "dis_record4")
	d.DisRecord5 = field.NewString(table, "dis_record5")

	d.fillFieldMap()

	return d
}

func (d *disRecord) WithContext(ctx context.Context) IDisRecordDo {
	return d.disRecordDo.WithContext(ctx)
}

func (d disRecord) TableName() string { return d.disRecordDo.TableName() }

func (d disRecord) Alias() string { return d.disRecordDo.Alias() }

func (d disRecord) Columns(cols ...field.Expr) gen.Columns { return d.disRecordDo.Columns(cols...) }

func (d *disRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *disRecord) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 16)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["div_shop_id"] = d.DivShopID
	d.fieldMap["sla_shop_id"] = d.SlaShopID
	d.fieldMap["acid_shop_id"] = d.AcidShopID
	d.fieldMap["pack_shop_id"] = d.PackShopID
	d.fieldMap["fro_shop_id"] = d.FroShopID
	d.fieldMap["sta_uni_id"] = d.StaUniID
	d.fieldMap["sla_info_mon_id"] = d.SlaInfoMonID
	d.fieldMap["dis_record1"] = d.DisRecord1
	d.fieldMap["dis_record2"] = d.DisRecord2
	d.fieldMap["dis_record3"] = d.DisRecord3
	d.fieldMap["dis_record4"] = d.DisRecord4
	d.fieldMap["dis_record5"] = d.DisRecord5
}

func (d disRecord) clone(db *gorm.DB) disRecord {
	d.disRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d disRecord) replaceDB(db *gorm.DB) disRecord {
	d.disRecordDo.ReplaceDB(db)
	return d
}

type disRecordDo struct{ gen.DO }

type IDisRecordDo interface {
	gen.SubQuery
	Debug() IDisRecordDo
	WithContext(ctx context.Context) IDisRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDisRecordDo
	WriteDB() IDisRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDisRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDisRecordDo
	Not(conds ...gen.Condition) IDisRecordDo
	Or(conds ...gen.Condition) IDisRecordDo
	Select(conds ...field.Expr) IDisRecordDo
	Where(conds ...gen.Condition) IDisRecordDo
	Order(conds ...field.Expr) IDisRecordDo
	Distinct(cols ...field.Expr) IDisRecordDo
	Omit(cols ...field.Expr) IDisRecordDo
	Join(table schema.Tabler, on ...field.Expr) IDisRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDisRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDisRecordDo
	Group(cols ...field.Expr) IDisRecordDo
	Having(conds ...gen.Condition) IDisRecordDo
	Limit(limit int) IDisRecordDo
	Offset(offset int) IDisRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDisRecordDo
	Unscoped() IDisRecordDo
	Create(values ...*slaughter.DisRecord) error
	CreateInBatches(values []*slaughter.DisRecord, batchSize int) error
	Save(values ...*slaughter.DisRecord) error
	First() (*slaughter.DisRecord, error)
	Take() (*slaughter.DisRecord, error)
	Last() (*slaughter.DisRecord, error)
	Find() ([]*slaughter.DisRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.DisRecord, err error)
	FindInBatches(result *[]*slaughter.DisRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.DisRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDisRecordDo
	Assign(attrs ...field.AssignExpr) IDisRecordDo
	Joins(fields ...field.RelationField) IDisRecordDo
	Preload(fields ...field.RelationField) IDisRecordDo
	FirstOrInit() (*slaughter.DisRecord, error)
	FirstOrCreate() (*slaughter.DisRecord, error)
	FindByPage(offset int, limit int) (result []*slaughter.DisRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDisRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d disRecordDo) Debug() IDisRecordDo {
	return d.withDO(d.DO.Debug())
}

func (d disRecordDo) WithContext(ctx context.Context) IDisRecordDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d disRecordDo) ReadDB() IDisRecordDo {
	return d.Clauses(dbresolver.Read)
}

func (d disRecordDo) WriteDB() IDisRecordDo {
	return d.Clauses(dbresolver.Write)
}

func (d disRecordDo) Session(config *gorm.Session) IDisRecordDo {
	return d.withDO(d.DO.Session(config))
}

func (d disRecordDo) Clauses(conds ...clause.Expression) IDisRecordDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d disRecordDo) Returning(value interface{}, columns ...string) IDisRecordDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d disRecordDo) Not(conds ...gen.Condition) IDisRecordDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d disRecordDo) Or(conds ...gen.Condition) IDisRecordDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d disRecordDo) Select(conds ...field.Expr) IDisRecordDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d disRecordDo) Where(conds ...gen.Condition) IDisRecordDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d disRecordDo) Order(conds ...field.Expr) IDisRecordDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d disRecordDo) Distinct(cols ...field.Expr) IDisRecordDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d disRecordDo) Omit(cols ...field.Expr) IDisRecordDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d disRecordDo) Join(table schema.Tabler, on ...field.Expr) IDisRecordDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d disRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDisRecordDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d disRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IDisRecordDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d disRecordDo) Group(cols ...field.Expr) IDisRecordDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d disRecordDo) Having(conds ...gen.Condition) IDisRecordDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d disRecordDo) Limit(limit int) IDisRecordDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d disRecordDo) Offset(offset int) IDisRecordDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d disRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDisRecordDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d disRecordDo) Unscoped() IDisRecordDo {
	return d.withDO(d.DO.Unscoped())
}

func (d disRecordDo) Create(values ...*slaughter.DisRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d disRecordDo) CreateInBatches(values []*slaughter.DisRecord, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d disRecordDo) Save(values ...*slaughter.DisRecord) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d disRecordDo) First() (*slaughter.DisRecord, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.DisRecord), nil
	}
}

func (d disRecordDo) Take() (*slaughter.DisRecord, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.DisRecord), nil
	}
}

func (d disRecordDo) Last() (*slaughter.DisRecord, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.DisRecord), nil
	}
}

func (d disRecordDo) Find() ([]*slaughter.DisRecord, error) {
	result, err := d.DO.Find()
	return result.([]*slaughter.DisRecord), err
}

func (d disRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.DisRecord, err error) {
	buf := make([]*slaughter.DisRecord, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d disRecordDo) FindInBatches(result *[]*slaughter.DisRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d disRecordDo) Attrs(attrs ...field.AssignExpr) IDisRecordDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d disRecordDo) Assign(attrs ...field.AssignExpr) IDisRecordDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d disRecordDo) Joins(fields ...field.RelationField) IDisRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d disRecordDo) Preload(fields ...field.RelationField) IDisRecordDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d disRecordDo) FirstOrInit() (*slaughter.DisRecord, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.DisRecord), nil
	}
}

func (d disRecordDo) FirstOrCreate() (*slaughter.DisRecord, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.DisRecord), nil
	}
}

func (d disRecordDo) FindByPage(offset int, limit int) (result []*slaughter.DisRecord, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d disRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d disRecordDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d disRecordDo) Delete(models ...*slaughter.DisRecord) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *disRecordDo) withDO(do gen.Dao) *disRecordDo {
	d.DO = *do.(*gen.DO)
	return d
}
