// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package sensorquery

import (
	"CN-EU-FSIMS/internal/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSensor(db *gorm.DB, opts ...gen.DOOption) sensor {
	_sensor := sensor{}

	_sensor.sensorDo.UseDB(db, opts...)
	_sensor.sensorDo.UseModel(&models.Sensor{})

	tableName := _sensor.sensorDo.TableName()
	_sensor.ALL = field.NewAsterisk(tableName)
	_sensor.ID = field.NewUint(tableName, "id")
	_sensor.CreatedAt = field.NewTime(tableName, "created_at")
	_sensor.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sensor.DeletedAt = field.NewField(tableName, "deleted_at")
	_sensor.DeviceCode = field.NewString(tableName, "device_code")
	_sensor.Location = field.NewString(tableName, "location")
	_sensor.State = field.NewString(tableName, "state")
	_sensor.Type = field.NewString(tableName, "type")

	_sensor.fillFieldMap()

	return _sensor
}

type sensor struct {
	sensorDo sensorDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	DeviceCode field.String
	Location   field.String
	State      field.String
	Type       field.String

	fieldMap map[string]field.Expr
}

func (s sensor) Table(newTableName string) *sensor {
	s.sensorDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sensor) As(alias string) *sensor {
	s.sensorDo.DO = *(s.sensorDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sensor) updateTableName(table string) *sensor {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.DeviceCode = field.NewString(table, "device_code")
	s.Location = field.NewString(table, "location")
	s.State = field.NewString(table, "state")
	s.Type = field.NewString(table, "type")

	s.fillFieldMap()

	return s
}

func (s *sensor) WithContext(ctx context.Context) ISensorDo { return s.sensorDo.WithContext(ctx) }

func (s sensor) TableName() string { return s.sensorDo.TableName() }

func (s sensor) Alias() string { return s.sensorDo.Alias() }

func (s sensor) Columns(cols ...field.Expr) gen.Columns { return s.sensorDo.Columns(cols...) }

func (s *sensor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sensor) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["device_code"] = s.DeviceCode
	s.fieldMap["location"] = s.Location
	s.fieldMap["state"] = s.State
	s.fieldMap["type"] = s.Type
}

func (s sensor) clone(db *gorm.DB) sensor {
	s.sensorDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sensor) replaceDB(db *gorm.DB) sensor {
	s.sensorDo.ReplaceDB(db)
	return s
}

type sensorDo struct{ gen.DO }

type ISensorDo interface {
	gen.SubQuery
	Debug() ISensorDo
	WithContext(ctx context.Context) ISensorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISensorDo
	WriteDB() ISensorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISensorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISensorDo
	Not(conds ...gen.Condition) ISensorDo
	Or(conds ...gen.Condition) ISensorDo
	Select(conds ...field.Expr) ISensorDo
	Where(conds ...gen.Condition) ISensorDo
	Order(conds ...field.Expr) ISensorDo
	Distinct(cols ...field.Expr) ISensorDo
	Omit(cols ...field.Expr) ISensorDo
	Join(table schema.Tabler, on ...field.Expr) ISensorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISensorDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISensorDo
	Group(cols ...field.Expr) ISensorDo
	Having(conds ...gen.Condition) ISensorDo
	Limit(limit int) ISensorDo
	Offset(offset int) ISensorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISensorDo
	Unscoped() ISensorDo
	Create(values ...*models.Sensor) error
	CreateInBatches(values []*models.Sensor, batchSize int) error
	Save(values ...*models.Sensor) error
	First() (*models.Sensor, error)
	Take() (*models.Sensor, error)
	Last() (*models.Sensor, error)
	Find() ([]*models.Sensor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Sensor, err error)
	FindInBatches(result *[]*models.Sensor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Sensor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISensorDo
	Assign(attrs ...field.AssignExpr) ISensorDo
	Joins(fields ...field.RelationField) ISensorDo
	Preload(fields ...field.RelationField) ISensorDo
	FirstOrInit() (*models.Sensor, error)
	FirstOrCreate() (*models.Sensor, error)
	FindByPage(offset int, limit int) (result []*models.Sensor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISensorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sensorDo) Debug() ISensorDo {
	return s.withDO(s.DO.Debug())
}

func (s sensorDo) WithContext(ctx context.Context) ISensorDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sensorDo) ReadDB() ISensorDo {
	return s.Clauses(dbresolver.Read)
}

func (s sensorDo) WriteDB() ISensorDo {
	return s.Clauses(dbresolver.Write)
}

func (s sensorDo) Session(config *gorm.Session) ISensorDo {
	return s.withDO(s.DO.Session(config))
}

func (s sensorDo) Clauses(conds ...clause.Expression) ISensorDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sensorDo) Returning(value interface{}, columns ...string) ISensorDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sensorDo) Not(conds ...gen.Condition) ISensorDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sensorDo) Or(conds ...gen.Condition) ISensorDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sensorDo) Select(conds ...field.Expr) ISensorDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sensorDo) Where(conds ...gen.Condition) ISensorDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sensorDo) Order(conds ...field.Expr) ISensorDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sensorDo) Distinct(cols ...field.Expr) ISensorDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sensorDo) Omit(cols ...field.Expr) ISensorDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sensorDo) Join(table schema.Tabler, on ...field.Expr) ISensorDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sensorDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISensorDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sensorDo) RightJoin(table schema.Tabler, on ...field.Expr) ISensorDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sensorDo) Group(cols ...field.Expr) ISensorDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sensorDo) Having(conds ...gen.Condition) ISensorDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sensorDo) Limit(limit int) ISensorDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sensorDo) Offset(offset int) ISensorDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sensorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISensorDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sensorDo) Unscoped() ISensorDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sensorDo) Create(values ...*models.Sensor) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sensorDo) CreateInBatches(values []*models.Sensor, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sensorDo) Save(values ...*models.Sensor) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sensorDo) First() (*models.Sensor, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Sensor), nil
	}
}

func (s sensorDo) Take() (*models.Sensor, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Sensor), nil
	}
}

func (s sensorDo) Last() (*models.Sensor, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Sensor), nil
	}
}

func (s sensorDo) Find() ([]*models.Sensor, error) {
	result, err := s.DO.Find()
	return result.([]*models.Sensor), err
}

func (s sensorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Sensor, err error) {
	buf := make([]*models.Sensor, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sensorDo) FindInBatches(result *[]*models.Sensor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sensorDo) Attrs(attrs ...field.AssignExpr) ISensorDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sensorDo) Assign(attrs ...field.AssignExpr) ISensorDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sensorDo) Joins(fields ...field.RelationField) ISensorDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sensorDo) Preload(fields ...field.RelationField) ISensorDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sensorDo) FirstOrInit() (*models.Sensor, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Sensor), nil
	}
}

func (s sensorDo) FirstOrCreate() (*models.Sensor, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Sensor), nil
	}
}

func (s sensorDo) FindByPage(offset int, limit int) (result []*models.Sensor, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sensorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sensorDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sensorDo) Delete(models ...*models.Sensor) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sensorDo) withDO(do gen.Dao) *sensorDo {
	s.DO = *do.(*gen.DO)
	return s
}
