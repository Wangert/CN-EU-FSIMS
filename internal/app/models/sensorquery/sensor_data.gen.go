// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package sensorquery

import (
	"CN-EU-FSIMS/internal/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSensorData(db *gorm.DB, opts ...gen.DOOption) sensorData {
	_sensorData := sensorData{}

	_sensorData.sensorDataDo.UseDB(db, opts...)
	_sensorData.sensorDataDo.UseModel(&models.SensorData{})

	tableName := _sensorData.sensorDataDo.TableName()
	_sensorData.ALL = field.NewAsterisk(tableName)
	_sensorData.ID = field.NewUint(tableName, "id")
	_sensorData.CreatedAt = field.NewTime(tableName, "created_at")
	_sensorData.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sensorData.DeletedAt = field.NewField(tableName, "deleted_at")
	_sensorData.TimeStamp = field.NewTime(tableName, "time_stamp")
	_sensorData.AirTemperature = field.NewString(tableName, "air_temperature")
	_sensorData.Lllumination = field.NewString(tableName, "lllumination")
	_sensorData.DeviceCode = field.NewString(tableName, "device_code")
	_sensorData.CO2 = field.NewString(tableName, "co2")
	_sensorData.AirHumidity = field.NewString(tableName, "air_humidity")
	_sensorData.NH3 = field.NewString(tableName, "nh3")
	_sensorData.H2S = field.NewString(tableName, "h2_s")
	_sensorData.AtmosphericPressure = field.NewString(tableName, "atmospheric_pressure")
	_sensorData.WindSpeed = field.NewString(tableName, "wind_speed")
	_sensorData.CO = field.NewString(tableName, "co")
	_sensorData.AirDewpoint = field.NewString(tableName, "air_dewpoint")

	_sensorData.fillFieldMap()

	return _sensorData
}

type sensorData struct {
	sensorDataDo sensorDataDo

	ALL                 field.Asterisk
	ID                  field.Uint
	CreatedAt           field.Time
	UpdatedAt           field.Time
	DeletedAt           field.Field
	TimeStamp           field.Time
	AirTemperature      field.String
	Lllumination        field.String
	DeviceCode          field.String
	CO2                 field.String
	AirHumidity         field.String
	NH3                 field.String
	H2S                 field.String
	AtmosphericPressure field.String
	WindSpeed           field.String
	CO                  field.String
	AirDewpoint         field.String

	fieldMap map[string]field.Expr
}

func (s sensorData) Table(newTableName string) *sensorData {
	s.sensorDataDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sensorData) As(alias string) *sensorData {
	s.sensorDataDo.DO = *(s.sensorDataDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sensorData) updateTableName(table string) *sensorData {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.TimeStamp = field.NewTime(table, "time_stamp")
	s.AirTemperature = field.NewString(table, "air_temperature")
	s.Lllumination = field.NewString(table, "lllumination")
	s.DeviceCode = field.NewString(table, "device_code")
	s.CO2 = field.NewString(table, "co2")
	s.AirHumidity = field.NewString(table, "air_humidity")
	s.NH3 = field.NewString(table, "nh3")
	s.H2S = field.NewString(table, "h2_s")
	s.AtmosphericPressure = field.NewString(table, "atmospheric_pressure")
	s.WindSpeed = field.NewString(table, "wind_speed")
	s.CO = field.NewString(table, "co")
	s.AirDewpoint = field.NewString(table, "air_dewpoint")

	s.fillFieldMap()

	return s
}

func (s *sensorData) WithContext(ctx context.Context) ISensorDataDo {
	return s.sensorDataDo.WithContext(ctx)
}

func (s sensorData) TableName() string { return s.sensorDataDo.TableName() }

func (s sensorData) Alias() string { return s.sensorDataDo.Alias() }

func (s sensorData) Columns(cols ...field.Expr) gen.Columns { return s.sensorDataDo.Columns(cols...) }

func (s *sensorData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sensorData) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["time_stamp"] = s.TimeStamp
	s.fieldMap["air_temperature"] = s.AirTemperature
	s.fieldMap["lllumination"] = s.Lllumination
	s.fieldMap["device_code"] = s.DeviceCode
	s.fieldMap["co2"] = s.CO2
	s.fieldMap["air_humidity"] = s.AirHumidity
	s.fieldMap["nh3"] = s.NH3
	s.fieldMap["h2_s"] = s.H2S
	s.fieldMap["atmospheric_pressure"] = s.AtmosphericPressure
	s.fieldMap["wind_speed"] = s.WindSpeed
	s.fieldMap["co"] = s.CO
	s.fieldMap["air_dewpoint"] = s.AirDewpoint
}

func (s sensorData) clone(db *gorm.DB) sensorData {
	s.sensorDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sensorData) replaceDB(db *gorm.DB) sensorData {
	s.sensorDataDo.ReplaceDB(db)
	return s
}

type sensorDataDo struct{ gen.DO }

type ISensorDataDo interface {
	gen.SubQuery
	Debug() ISensorDataDo
	WithContext(ctx context.Context) ISensorDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISensorDataDo
	WriteDB() ISensorDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISensorDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISensorDataDo
	Not(conds ...gen.Condition) ISensorDataDo
	Or(conds ...gen.Condition) ISensorDataDo
	Select(conds ...field.Expr) ISensorDataDo
	Where(conds ...gen.Condition) ISensorDataDo
	Order(conds ...field.Expr) ISensorDataDo
	Distinct(cols ...field.Expr) ISensorDataDo
	Omit(cols ...field.Expr) ISensorDataDo
	Join(table schema.Tabler, on ...field.Expr) ISensorDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISensorDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISensorDataDo
	Group(cols ...field.Expr) ISensorDataDo
	Having(conds ...gen.Condition) ISensorDataDo
	Limit(limit int) ISensorDataDo
	Offset(offset int) ISensorDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISensorDataDo
	Unscoped() ISensorDataDo
	Create(values ...*models.SensorData) error
	CreateInBatches(values []*models.SensorData, batchSize int) error
	Save(values ...*models.SensorData) error
	First() (*models.SensorData, error)
	Take() (*models.SensorData, error)
	Last() (*models.SensorData, error)
	Find() ([]*models.SensorData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SensorData, err error)
	FindInBatches(result *[]*models.SensorData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.SensorData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISensorDataDo
	Assign(attrs ...field.AssignExpr) ISensorDataDo
	Joins(fields ...field.RelationField) ISensorDataDo
	Preload(fields ...field.RelationField) ISensorDataDo
	FirstOrInit() (*models.SensorData, error)
	FirstOrCreate() (*models.SensorData, error)
	FindByPage(offset int, limit int) (result []*models.SensorData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISensorDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sensorDataDo) Debug() ISensorDataDo {
	return s.withDO(s.DO.Debug())
}

func (s sensorDataDo) WithContext(ctx context.Context) ISensorDataDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sensorDataDo) ReadDB() ISensorDataDo {
	return s.Clauses(dbresolver.Read)
}

func (s sensorDataDo) WriteDB() ISensorDataDo {
	return s.Clauses(dbresolver.Write)
}

func (s sensorDataDo) Session(config *gorm.Session) ISensorDataDo {
	return s.withDO(s.DO.Session(config))
}

func (s sensorDataDo) Clauses(conds ...clause.Expression) ISensorDataDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sensorDataDo) Returning(value interface{}, columns ...string) ISensorDataDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sensorDataDo) Not(conds ...gen.Condition) ISensorDataDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sensorDataDo) Or(conds ...gen.Condition) ISensorDataDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sensorDataDo) Select(conds ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sensorDataDo) Where(conds ...gen.Condition) ISensorDataDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sensorDataDo) Order(conds ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sensorDataDo) Distinct(cols ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sensorDataDo) Omit(cols ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sensorDataDo) Join(table schema.Tabler, on ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sensorDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sensorDataDo) RightJoin(table schema.Tabler, on ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sensorDataDo) Group(cols ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sensorDataDo) Having(conds ...gen.Condition) ISensorDataDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sensorDataDo) Limit(limit int) ISensorDataDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sensorDataDo) Offset(offset int) ISensorDataDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sensorDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISensorDataDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sensorDataDo) Unscoped() ISensorDataDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sensorDataDo) Create(values ...*models.SensorData) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sensorDataDo) CreateInBatches(values []*models.SensorData, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sensorDataDo) Save(values ...*models.SensorData) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sensorDataDo) First() (*models.SensorData, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.SensorData), nil
	}
}

func (s sensorDataDo) Take() (*models.SensorData, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.SensorData), nil
	}
}

func (s sensorDataDo) Last() (*models.SensorData, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.SensorData), nil
	}
}

func (s sensorDataDo) Find() ([]*models.SensorData, error) {
	result, err := s.DO.Find()
	return result.([]*models.SensorData), err
}

func (s sensorDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SensorData, err error) {
	buf := make([]*models.SensorData, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sensorDataDo) FindInBatches(result *[]*models.SensorData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sensorDataDo) Attrs(attrs ...field.AssignExpr) ISensorDataDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sensorDataDo) Assign(attrs ...field.AssignExpr) ISensorDataDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sensorDataDo) Joins(fields ...field.RelationField) ISensorDataDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sensorDataDo) Preload(fields ...field.RelationField) ISensorDataDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sensorDataDo) FirstOrInit() (*models.SensorData, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.SensorData), nil
	}
}

func (s sensorDataDo) FirstOrCreate() (*models.SensorData, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.SensorData), nil
	}
}

func (s sensorDataDo) FindByPage(offset int, limit int) (result []*models.SensorData, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sensorDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sensorDataDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sensorDataDo) Delete(models ...*models.SensorData) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sensorDataDo) withDO(do gen.Dao) *sensorDataDo {
	s.DO = *do.(*gen.DO)
	return s
}
