// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"CN-EU-FSIMS/internal/app/models/product"
	"CN-EU-FSIMS/internal/app/models/warehouse"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureHouse(db *gorm.DB, opts ...gen.DOOption) pastureHouse {
	_pastureHouse := pastureHouse{}

	_pastureHouse.pastureHouseDo.UseDB(db, opts...)
	_pastureHouse.pastureHouseDo.UseModel(&pasture.PastureHouse{})

	tableName := _pastureHouse.pastureHouseDo.TableName()
	_pastureHouse.ALL = field.NewAsterisk(tableName)
	_pastureHouse.ID = field.NewUint(tableName, "id")
	_pastureHouse.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureHouse.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureHouse.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureHouse.HouseNumber = field.NewString(tableName, "house_number")
	_pastureHouse.Name = field.NewString(tableName, "name")
	_pastureHouse.Address = field.NewString(tableName, "address")
	_pastureHouse.State = field.NewUint(tableName, "state")
	_pastureHouse.LegalPerson = field.NewString(tableName, "legal_person")
	_pastureHouse.Cows = pastureHouseHasManyCows{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Cows", "product.Cow"),
	}

	_pastureHouse.FeedingRecord = pastureHouseHasManyFeedingRecord{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("FeedingRecord", "pasture.FeedingBatch"),
		Cows: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("FeedingRecord.Cows", "product.Cow"),
		},
	}

	_pastureHouse.PasHRecord = pastureHouseHasManyPasHRecord{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PasHRecord", "warehouse.PastureWarehouse"),
	}

	_pastureHouse.HeavyMetalRecords = pastureHouseHasManyHeavyMetalRecords{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("HeavyMetalRecords", "pasture.PastureFeedHeavyMetal"),
		PastureFeedAs: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("HeavyMetalRecords.PastureFeedAs", "pasture.PastureFeedAs"),
		},
		PastureFeedPb: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("HeavyMetalRecords.PastureFeedPb", "pasture.PastureFeedPb"),
		},
		PastureFeedCd: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("HeavyMetalRecords.PastureFeedCd", "pasture.PastureFeedCd"),
		},
		PastureFeedCr: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("HeavyMetalRecords.PastureFeedCr", "pasture.PastureFeedCr"),
		},
	}

	_pastureHouse.PastureAreaRecords = pastureHouseHasManyPastureAreaRecords{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PastureAreaRecords", "pasture.PastureArea"),
	}

	_pastureHouse.WaterRecords = pastureHouseHasManyWaterRecords{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("WaterRecords", "pasture.PastureWaterRecord"),
		OapGci: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("WaterRecords.OapGci", "pasture.PastureOapGci"),
		},
		ToxIndex: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("WaterRecords.ToxIndex", "pasture.PastureToxIndex"),
		},
		MicroIndex: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("WaterRecords.MicroIndex", "pasture.PastureMicroIndex"),
		},
	}

	_pastureHouse.fillFieldMap()

	return _pastureHouse
}

type pastureHouse struct {
	pastureHouseDo pastureHouseDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	HouseNumber field.String
	Name        field.String
	Address     field.String
	State       field.Uint
	LegalPerson field.String
	Cows        pastureHouseHasManyCows

	FeedingRecord pastureHouseHasManyFeedingRecord

	PasHRecord pastureHouseHasManyPasHRecord

	HeavyMetalRecords pastureHouseHasManyHeavyMetalRecords

	PastureAreaRecords pastureHouseHasManyPastureAreaRecords

	WaterRecords pastureHouseHasManyWaterRecords

	fieldMap map[string]field.Expr
}

func (p pastureHouse) Table(newTableName string) *pastureHouse {
	p.pastureHouseDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureHouse) As(alias string) *pastureHouse {
	p.pastureHouseDo.DO = *(p.pastureHouseDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureHouse) updateTableName(table string) *pastureHouse {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.HouseNumber = field.NewString(table, "house_number")
	p.Name = field.NewString(table, "name")
	p.Address = field.NewString(table, "address")
	p.State = field.NewUint(table, "state")
	p.LegalPerson = field.NewString(table, "legal_person")

	p.fillFieldMap()

	return p
}

func (p *pastureHouse) WithContext(ctx context.Context) IPastureHouseDo {
	return p.pastureHouseDo.WithContext(ctx)
}

func (p pastureHouse) TableName() string { return p.pastureHouseDo.TableName() }

func (p pastureHouse) Alias() string { return p.pastureHouseDo.Alias() }

func (p pastureHouse) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureHouseDo.Columns(cols...)
}

func (p *pastureHouse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureHouse) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 15)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["house_number"] = p.HouseNumber
	p.fieldMap["name"] = p.Name
	p.fieldMap["address"] = p.Address
	p.fieldMap["state"] = p.State
	p.fieldMap["legal_person"] = p.LegalPerson

}

func (p pastureHouse) clone(db *gorm.DB) pastureHouse {
	p.pastureHouseDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureHouse) replaceDB(db *gorm.DB) pastureHouse {
	p.pastureHouseDo.ReplaceDB(db)
	return p
}

type pastureHouseHasManyCows struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureHouseHasManyCows) Where(conds ...field.Expr) *pastureHouseHasManyCows {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureHouseHasManyCows) WithContext(ctx context.Context) *pastureHouseHasManyCows {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureHouseHasManyCows) Session(session *gorm.Session) *pastureHouseHasManyCows {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureHouseHasManyCows) Model(m *pasture.PastureHouse) *pastureHouseHasManyCowsTx {
	return &pastureHouseHasManyCowsTx{a.db.Model(m).Association(a.Name())}
}

type pastureHouseHasManyCowsTx struct{ tx *gorm.Association }

func (a pastureHouseHasManyCowsTx) Find() (result []*product.Cow, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureHouseHasManyCowsTx) Append(values ...*product.Cow) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureHouseHasManyCowsTx) Replace(values ...*product.Cow) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureHouseHasManyCowsTx) Delete(values ...*product.Cow) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureHouseHasManyCowsTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureHouseHasManyCowsTx) Count() int64 {
	return a.tx.Count()
}

type pastureHouseHasManyFeedingRecord struct {
	db *gorm.DB

	field.RelationField

	Cows struct {
		field.RelationField
	}
}

func (a pastureHouseHasManyFeedingRecord) Where(conds ...field.Expr) *pastureHouseHasManyFeedingRecord {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureHouseHasManyFeedingRecord) WithContext(ctx context.Context) *pastureHouseHasManyFeedingRecord {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureHouseHasManyFeedingRecord) Session(session *gorm.Session) *pastureHouseHasManyFeedingRecord {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureHouseHasManyFeedingRecord) Model(m *pasture.PastureHouse) *pastureHouseHasManyFeedingRecordTx {
	return &pastureHouseHasManyFeedingRecordTx{a.db.Model(m).Association(a.Name())}
}

type pastureHouseHasManyFeedingRecordTx struct{ tx *gorm.Association }

func (a pastureHouseHasManyFeedingRecordTx) Find() (result []*pasture.FeedingBatch, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureHouseHasManyFeedingRecordTx) Append(values ...*pasture.FeedingBatch) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureHouseHasManyFeedingRecordTx) Replace(values ...*pasture.FeedingBatch) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureHouseHasManyFeedingRecordTx) Delete(values ...*pasture.FeedingBatch) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureHouseHasManyFeedingRecordTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureHouseHasManyFeedingRecordTx) Count() int64 {
	return a.tx.Count()
}

type pastureHouseHasManyPasHRecord struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureHouseHasManyPasHRecord) Where(conds ...field.Expr) *pastureHouseHasManyPasHRecord {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureHouseHasManyPasHRecord) WithContext(ctx context.Context) *pastureHouseHasManyPasHRecord {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureHouseHasManyPasHRecord) Session(session *gorm.Session) *pastureHouseHasManyPasHRecord {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureHouseHasManyPasHRecord) Model(m *pasture.PastureHouse) *pastureHouseHasManyPasHRecordTx {
	return &pastureHouseHasManyPasHRecordTx{a.db.Model(m).Association(a.Name())}
}

type pastureHouseHasManyPasHRecordTx struct{ tx *gorm.Association }

func (a pastureHouseHasManyPasHRecordTx) Find() (result []*warehouse.PastureWarehouse, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureHouseHasManyPasHRecordTx) Append(values ...*warehouse.PastureWarehouse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureHouseHasManyPasHRecordTx) Replace(values ...*warehouse.PastureWarehouse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureHouseHasManyPasHRecordTx) Delete(values ...*warehouse.PastureWarehouse) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureHouseHasManyPasHRecordTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureHouseHasManyPasHRecordTx) Count() int64 {
	return a.tx.Count()
}

type pastureHouseHasManyHeavyMetalRecords struct {
	db *gorm.DB

	field.RelationField

	PastureFeedAs struct {
		field.RelationField
	}
	PastureFeedPb struct {
		field.RelationField
	}
	PastureFeedCd struct {
		field.RelationField
	}
	PastureFeedCr struct {
		field.RelationField
	}
}

func (a pastureHouseHasManyHeavyMetalRecords) Where(conds ...field.Expr) *pastureHouseHasManyHeavyMetalRecords {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureHouseHasManyHeavyMetalRecords) WithContext(ctx context.Context) *pastureHouseHasManyHeavyMetalRecords {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureHouseHasManyHeavyMetalRecords) Session(session *gorm.Session) *pastureHouseHasManyHeavyMetalRecords {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureHouseHasManyHeavyMetalRecords) Model(m *pasture.PastureHouse) *pastureHouseHasManyHeavyMetalRecordsTx {
	return &pastureHouseHasManyHeavyMetalRecordsTx{a.db.Model(m).Association(a.Name())}
}

type pastureHouseHasManyHeavyMetalRecordsTx struct{ tx *gorm.Association }

func (a pastureHouseHasManyHeavyMetalRecordsTx) Find() (result []*pasture.PastureFeedHeavyMetal, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureHouseHasManyHeavyMetalRecordsTx) Append(values ...*pasture.PastureFeedHeavyMetal) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureHouseHasManyHeavyMetalRecordsTx) Replace(values ...*pasture.PastureFeedHeavyMetal) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureHouseHasManyHeavyMetalRecordsTx) Delete(values ...*pasture.PastureFeedHeavyMetal) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureHouseHasManyHeavyMetalRecordsTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureHouseHasManyHeavyMetalRecordsTx) Count() int64 {
	return a.tx.Count()
}

type pastureHouseHasManyPastureAreaRecords struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureHouseHasManyPastureAreaRecords) Where(conds ...field.Expr) *pastureHouseHasManyPastureAreaRecords {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureHouseHasManyPastureAreaRecords) WithContext(ctx context.Context) *pastureHouseHasManyPastureAreaRecords {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureHouseHasManyPastureAreaRecords) Session(session *gorm.Session) *pastureHouseHasManyPastureAreaRecords {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureHouseHasManyPastureAreaRecords) Model(m *pasture.PastureHouse) *pastureHouseHasManyPastureAreaRecordsTx {
	return &pastureHouseHasManyPastureAreaRecordsTx{a.db.Model(m).Association(a.Name())}
}

type pastureHouseHasManyPastureAreaRecordsTx struct{ tx *gorm.Association }

func (a pastureHouseHasManyPastureAreaRecordsTx) Find() (result []*pasture.PastureArea, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureHouseHasManyPastureAreaRecordsTx) Append(values ...*pasture.PastureArea) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureHouseHasManyPastureAreaRecordsTx) Replace(values ...*pasture.PastureArea) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureHouseHasManyPastureAreaRecordsTx) Delete(values ...*pasture.PastureArea) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureHouseHasManyPastureAreaRecordsTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureHouseHasManyPastureAreaRecordsTx) Count() int64 {
	return a.tx.Count()
}

type pastureHouseHasManyWaterRecords struct {
	db *gorm.DB

	field.RelationField

	OapGci struct {
		field.RelationField
	}
	ToxIndex struct {
		field.RelationField
	}
	MicroIndex struct {
		field.RelationField
	}
}

func (a pastureHouseHasManyWaterRecords) Where(conds ...field.Expr) *pastureHouseHasManyWaterRecords {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureHouseHasManyWaterRecords) WithContext(ctx context.Context) *pastureHouseHasManyWaterRecords {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureHouseHasManyWaterRecords) Session(session *gorm.Session) *pastureHouseHasManyWaterRecords {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureHouseHasManyWaterRecords) Model(m *pasture.PastureHouse) *pastureHouseHasManyWaterRecordsTx {
	return &pastureHouseHasManyWaterRecordsTx{a.db.Model(m).Association(a.Name())}
}

type pastureHouseHasManyWaterRecordsTx struct{ tx *gorm.Association }

func (a pastureHouseHasManyWaterRecordsTx) Find() (result []*pasture.PastureWaterRecord, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureHouseHasManyWaterRecordsTx) Append(values ...*pasture.PastureWaterRecord) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureHouseHasManyWaterRecordsTx) Replace(values ...*pasture.PastureWaterRecord) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureHouseHasManyWaterRecordsTx) Delete(values ...*pasture.PastureWaterRecord) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureHouseHasManyWaterRecordsTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureHouseHasManyWaterRecordsTx) Count() int64 {
	return a.tx.Count()
}

type pastureHouseDo struct{ gen.DO }

type IPastureHouseDo interface {
	gen.SubQuery
	Debug() IPastureHouseDo
	WithContext(ctx context.Context) IPastureHouseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureHouseDo
	WriteDB() IPastureHouseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureHouseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureHouseDo
	Not(conds ...gen.Condition) IPastureHouseDo
	Or(conds ...gen.Condition) IPastureHouseDo
	Select(conds ...field.Expr) IPastureHouseDo
	Where(conds ...gen.Condition) IPastureHouseDo
	Order(conds ...field.Expr) IPastureHouseDo
	Distinct(cols ...field.Expr) IPastureHouseDo
	Omit(cols ...field.Expr) IPastureHouseDo
	Join(table schema.Tabler, on ...field.Expr) IPastureHouseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureHouseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureHouseDo
	Group(cols ...field.Expr) IPastureHouseDo
	Having(conds ...gen.Condition) IPastureHouseDo
	Limit(limit int) IPastureHouseDo
	Offset(offset int) IPastureHouseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureHouseDo
	Unscoped() IPastureHouseDo
	Create(values ...*pasture.PastureHouse) error
	CreateInBatches(values []*pasture.PastureHouse, batchSize int) error
	Save(values ...*pasture.PastureHouse) error
	First() (*pasture.PastureHouse, error)
	Take() (*pasture.PastureHouse, error)
	Last() (*pasture.PastureHouse, error)
	Find() ([]*pasture.PastureHouse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureHouse, err error)
	FindInBatches(result *[]*pasture.PastureHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureHouse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureHouseDo
	Assign(attrs ...field.AssignExpr) IPastureHouseDo
	Joins(fields ...field.RelationField) IPastureHouseDo
	Preload(fields ...field.RelationField) IPastureHouseDo
	FirstOrInit() (*pasture.PastureHouse, error)
	FirstOrCreate() (*pasture.PastureHouse, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureHouse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureHouseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureHouseDo) Debug() IPastureHouseDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureHouseDo) WithContext(ctx context.Context) IPastureHouseDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureHouseDo) ReadDB() IPastureHouseDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureHouseDo) WriteDB() IPastureHouseDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureHouseDo) Session(config *gorm.Session) IPastureHouseDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureHouseDo) Clauses(conds ...clause.Expression) IPastureHouseDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureHouseDo) Returning(value interface{}, columns ...string) IPastureHouseDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureHouseDo) Not(conds ...gen.Condition) IPastureHouseDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureHouseDo) Or(conds ...gen.Condition) IPastureHouseDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureHouseDo) Select(conds ...field.Expr) IPastureHouseDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureHouseDo) Where(conds ...gen.Condition) IPastureHouseDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureHouseDo) Order(conds ...field.Expr) IPastureHouseDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureHouseDo) Distinct(cols ...field.Expr) IPastureHouseDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureHouseDo) Omit(cols ...field.Expr) IPastureHouseDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureHouseDo) Join(table schema.Tabler, on ...field.Expr) IPastureHouseDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureHouseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureHouseDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureHouseDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureHouseDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureHouseDo) Group(cols ...field.Expr) IPastureHouseDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureHouseDo) Having(conds ...gen.Condition) IPastureHouseDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureHouseDo) Limit(limit int) IPastureHouseDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureHouseDo) Offset(offset int) IPastureHouseDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureHouseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureHouseDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureHouseDo) Unscoped() IPastureHouseDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureHouseDo) Create(values ...*pasture.PastureHouse) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureHouseDo) CreateInBatches(values []*pasture.PastureHouse, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureHouseDo) Save(values ...*pasture.PastureHouse) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureHouseDo) First() (*pasture.PastureHouse, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureHouse), nil
	}
}

func (p pastureHouseDo) Take() (*pasture.PastureHouse, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureHouse), nil
	}
}

func (p pastureHouseDo) Last() (*pasture.PastureHouse, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureHouse), nil
	}
}

func (p pastureHouseDo) Find() ([]*pasture.PastureHouse, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureHouse), err
}

func (p pastureHouseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureHouse, err error) {
	buf := make([]*pasture.PastureHouse, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureHouseDo) FindInBatches(result *[]*pasture.PastureHouse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureHouseDo) Attrs(attrs ...field.AssignExpr) IPastureHouseDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureHouseDo) Assign(attrs ...field.AssignExpr) IPastureHouseDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureHouseDo) Joins(fields ...field.RelationField) IPastureHouseDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureHouseDo) Preload(fields ...field.RelationField) IPastureHouseDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureHouseDo) FirstOrInit() (*pasture.PastureHouse, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureHouse), nil
	}
}

func (p pastureHouseDo) FirstOrCreate() (*pasture.PastureHouse, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureHouse), nil
	}
}

func (p pastureHouseDo) FindByPage(offset int, limit int) (result []*pasture.PastureHouse, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureHouseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureHouseDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureHouseDo) Delete(models ...*pasture.PastureHouse) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureHouseDo) withDO(do gen.Dao) *pastureHouseDo {
	p.DO = *do.(*gen.DO)
	return p
}
