// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/product"
	"CN-EU-FSIMS/internal/app/models/sell"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMall(db *gorm.DB, opts ...gen.DOOption) mall {
	_mall := mall{}

	_mall.mallDo.UseDB(db, opts...)
	_mall.mallDo.UseModel(&sell.Mall{})

	tableName := _mall.mallDo.TableName()
	_mall.ALL = field.NewAsterisk(tableName)
	_mall.ID = field.NewUint(tableName, "id")
	_mall.CreatedAt = field.NewTime(tableName, "created_at")
	_mall.UpdatedAt = field.NewTime(tableName, "updated_at")
	_mall.DeletedAt = field.NewField(tableName, "deleted_at")
	_mall.Number = field.NewString(tableName, "number")
	_mall.Name = field.NewString(tableName, "name")
	_mall.Address = field.NewString(tableName, "address")
	_mall.State = field.NewUint(tableName, "state")
	_mall.LegalPerson = field.NewString(tableName, "legal_person")
	_mall.Goods = mallHasManyGoods{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Goods", "product.MallGood"),
	}

	_mall.fillFieldMap()

	return _mall
}

type mall struct {
	mallDo mallDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Number      field.String
	Name        field.String
	Address     field.String
	State       field.Uint
	LegalPerson field.String
	Goods       mallHasManyGoods

	fieldMap map[string]field.Expr
}

func (m mall) Table(newTableName string) *mall {
	m.mallDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mall) As(alias string) *mall {
	m.mallDo.DO = *(m.mallDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mall) updateTableName(table string) *mall {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.Number = field.NewString(table, "number")
	m.Name = field.NewString(table, "name")
	m.Address = field.NewString(table, "address")
	m.State = field.NewUint(table, "state")
	m.LegalPerson = field.NewString(table, "legal_person")

	m.fillFieldMap()

	return m
}

func (m *mall) WithContext(ctx context.Context) IMallDo { return m.mallDo.WithContext(ctx) }

func (m mall) TableName() string { return m.mallDo.TableName() }

func (m mall) Alias() string { return m.mallDo.Alias() }

func (m mall) Columns(cols ...field.Expr) gen.Columns { return m.mallDo.Columns(cols...) }

func (m *mall) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mall) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 10)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["number"] = m.Number
	m.fieldMap["name"] = m.Name
	m.fieldMap["address"] = m.Address
	m.fieldMap["state"] = m.State
	m.fieldMap["legal_person"] = m.LegalPerson

}

func (m mall) clone(db *gorm.DB) mall {
	m.mallDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mall) replaceDB(db *gorm.DB) mall {
	m.mallDo.ReplaceDB(db)
	return m
}

type mallHasManyGoods struct {
	db *gorm.DB

	field.RelationField
}

func (a mallHasManyGoods) Where(conds ...field.Expr) *mallHasManyGoods {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a mallHasManyGoods) WithContext(ctx context.Context) *mallHasManyGoods {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a mallHasManyGoods) Session(session *gorm.Session) *mallHasManyGoods {
	a.db = a.db.Session(session)
	return &a
}

func (a mallHasManyGoods) Model(m *sell.Mall) *mallHasManyGoodsTx {
	return &mallHasManyGoodsTx{a.db.Model(m).Association(a.Name())}
}

type mallHasManyGoodsTx struct{ tx *gorm.Association }

func (a mallHasManyGoodsTx) Find() (result []*product.MallGood, err error) {
	return result, a.tx.Find(&result)
}

func (a mallHasManyGoodsTx) Append(values ...*product.MallGood) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a mallHasManyGoodsTx) Replace(values ...*product.MallGood) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a mallHasManyGoodsTx) Delete(values ...*product.MallGood) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a mallHasManyGoodsTx) Clear() error {
	return a.tx.Clear()
}

func (a mallHasManyGoodsTx) Count() int64 {
	return a.tx.Count()
}

type mallDo struct{ gen.DO }

type IMallDo interface {
	gen.SubQuery
	Debug() IMallDo
	WithContext(ctx context.Context) IMallDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMallDo
	WriteDB() IMallDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMallDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMallDo
	Not(conds ...gen.Condition) IMallDo
	Or(conds ...gen.Condition) IMallDo
	Select(conds ...field.Expr) IMallDo
	Where(conds ...gen.Condition) IMallDo
	Order(conds ...field.Expr) IMallDo
	Distinct(cols ...field.Expr) IMallDo
	Omit(cols ...field.Expr) IMallDo
	Join(table schema.Tabler, on ...field.Expr) IMallDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMallDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMallDo
	Group(cols ...field.Expr) IMallDo
	Having(conds ...gen.Condition) IMallDo
	Limit(limit int) IMallDo
	Offset(offset int) IMallDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMallDo
	Unscoped() IMallDo
	Create(values ...*sell.Mall) error
	CreateInBatches(values []*sell.Mall, batchSize int) error
	Save(values ...*sell.Mall) error
	First() (*sell.Mall, error)
	Take() (*sell.Mall, error)
	Last() (*sell.Mall, error)
	Find() ([]*sell.Mall, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sell.Mall, err error)
	FindInBatches(result *[]*sell.Mall, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*sell.Mall) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMallDo
	Assign(attrs ...field.AssignExpr) IMallDo
	Joins(fields ...field.RelationField) IMallDo
	Preload(fields ...field.RelationField) IMallDo
	FirstOrInit() (*sell.Mall, error)
	FirstOrCreate() (*sell.Mall, error)
	FindByPage(offset int, limit int) (result []*sell.Mall, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMallDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mallDo) Debug() IMallDo {
	return m.withDO(m.DO.Debug())
}

func (m mallDo) WithContext(ctx context.Context) IMallDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mallDo) ReadDB() IMallDo {
	return m.Clauses(dbresolver.Read)
}

func (m mallDo) WriteDB() IMallDo {
	return m.Clauses(dbresolver.Write)
}

func (m mallDo) Session(config *gorm.Session) IMallDo {
	return m.withDO(m.DO.Session(config))
}

func (m mallDo) Clauses(conds ...clause.Expression) IMallDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mallDo) Returning(value interface{}, columns ...string) IMallDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mallDo) Not(conds ...gen.Condition) IMallDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mallDo) Or(conds ...gen.Condition) IMallDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mallDo) Select(conds ...field.Expr) IMallDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mallDo) Where(conds ...gen.Condition) IMallDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mallDo) Order(conds ...field.Expr) IMallDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mallDo) Distinct(cols ...field.Expr) IMallDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mallDo) Omit(cols ...field.Expr) IMallDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mallDo) Join(table schema.Tabler, on ...field.Expr) IMallDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mallDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMallDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mallDo) RightJoin(table schema.Tabler, on ...field.Expr) IMallDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mallDo) Group(cols ...field.Expr) IMallDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mallDo) Having(conds ...gen.Condition) IMallDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mallDo) Limit(limit int) IMallDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mallDo) Offset(offset int) IMallDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mallDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMallDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mallDo) Unscoped() IMallDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mallDo) Create(values ...*sell.Mall) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mallDo) CreateInBatches(values []*sell.Mall, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mallDo) Save(values ...*sell.Mall) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mallDo) First() (*sell.Mall, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*sell.Mall), nil
	}
}

func (m mallDo) Take() (*sell.Mall, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*sell.Mall), nil
	}
}

func (m mallDo) Last() (*sell.Mall, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*sell.Mall), nil
	}
}

func (m mallDo) Find() ([]*sell.Mall, error) {
	result, err := m.DO.Find()
	return result.([]*sell.Mall), err
}

func (m mallDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*sell.Mall, err error) {
	buf := make([]*sell.Mall, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mallDo) FindInBatches(result *[]*sell.Mall, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mallDo) Attrs(attrs ...field.AssignExpr) IMallDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mallDo) Assign(attrs ...field.AssignExpr) IMallDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mallDo) Joins(fields ...field.RelationField) IMallDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mallDo) Preload(fields ...field.RelationField) IMallDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mallDo) FirstOrInit() (*sell.Mall, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*sell.Mall), nil
	}
}

func (m mallDo) FirstOrCreate() (*sell.Mall, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*sell.Mall), nil
	}
}

func (m mallDo) FindByPage(offset int, limit int) (result []*sell.Mall, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mallDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mallDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mallDo) Delete(models ...*sell.Mall) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mallDo) withDO(do gen.Dao) *mallDo {
	m.DO = *do.(*gen.DO)
	return m
}
