// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLogs(db *gorm.DB, opts ...gen.DOOption) logs {
	_logs := logs{}

	_logs.logsDo.UseDB(db, opts...)
	_logs.logsDo.UseModel(&models.Logs{})

	tableName := _logs.logsDo.TableName()
	_logs.ALL = field.NewAsterisk(tableName)
	_logs.TimeStamp = field.NewTime(tableName, "time_stamp")
	_logs.UUID = field.NewString(tableName, "uuid")
	_logs.Account = field.NewString(tableName, "account")
	_logs.Type = field.NewInt(tableName, "type")
	_logs.Action = field.NewString(tableName, "action")

	_logs.fillFieldMap()

	return _logs
}

type logs struct {
	logsDo logsDo

	ALL       field.Asterisk
	TimeStamp field.Time
	UUID      field.String
	Account   field.String
	Type      field.Int
	Action    field.String

	fieldMap map[string]field.Expr
}

func (l logs) Table(newTableName string) *logs {
	l.logsDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logs) As(alias string) *logs {
	l.logsDo.DO = *(l.logsDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logs) updateTableName(table string) *logs {
	l.ALL = field.NewAsterisk(table)
	l.TimeStamp = field.NewTime(table, "time_stamp")
	l.UUID = field.NewString(table, "uuid")
	l.Account = field.NewString(table, "account")
	l.Type = field.NewInt(table, "type")
	l.Action = field.NewString(table, "action")

	l.fillFieldMap()

	return l
}

func (l *logs) WithContext(ctx context.Context) ILogsDo { return l.logsDo.WithContext(ctx) }

func (l logs) TableName() string { return l.logsDo.TableName() }

func (l logs) Alias() string { return l.logsDo.Alias() }

func (l logs) Columns(cols ...field.Expr) gen.Columns { return l.logsDo.Columns(cols...) }

func (l *logs) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logs) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 5)
	l.fieldMap["time_stamp"] = l.TimeStamp
	l.fieldMap["uuid"] = l.UUID
	l.fieldMap["account"] = l.Account
	l.fieldMap["type"] = l.Type
	l.fieldMap["action"] = l.Action
}

func (l logs) clone(db *gorm.DB) logs {
	l.logsDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logs) replaceDB(db *gorm.DB) logs {
	l.logsDo.ReplaceDB(db)
	return l
}

type logsDo struct{ gen.DO }

type ILogsDo interface {
	gen.SubQuery
	Debug() ILogsDo
	WithContext(ctx context.Context) ILogsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogsDo
	WriteDB() ILogsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogsDo
	Not(conds ...gen.Condition) ILogsDo
	Or(conds ...gen.Condition) ILogsDo
	Select(conds ...field.Expr) ILogsDo
	Where(conds ...gen.Condition) ILogsDo
	Order(conds ...field.Expr) ILogsDo
	Distinct(cols ...field.Expr) ILogsDo
	Omit(cols ...field.Expr) ILogsDo
	Join(table schema.Tabler, on ...field.Expr) ILogsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogsDo
	Group(cols ...field.Expr) ILogsDo
	Having(conds ...gen.Condition) ILogsDo
	Limit(limit int) ILogsDo
	Offset(offset int) ILogsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogsDo
	Unscoped() ILogsDo
	Create(values ...*models.Logs) error
	CreateInBatches(values []*models.Logs, batchSize int) error
	Save(values ...*models.Logs) error
	First() (*models.Logs, error)
	Take() (*models.Logs, error)
	Last() (*models.Logs, error)
	Find() ([]*models.Logs, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Logs, err error)
	FindInBatches(result *[]*models.Logs, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Logs) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogsDo
	Assign(attrs ...field.AssignExpr) ILogsDo
	Joins(fields ...field.RelationField) ILogsDo
	Preload(fields ...field.RelationField) ILogsDo
	FirstOrInit() (*models.Logs, error)
	FirstOrCreate() (*models.Logs, error)
	FindByPage(offset int, limit int) (result []*models.Logs, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logsDo) Debug() ILogsDo {
	return l.withDO(l.DO.Debug())
}

func (l logsDo) WithContext(ctx context.Context) ILogsDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logsDo) ReadDB() ILogsDo {
	return l.Clauses(dbresolver.Read)
}

func (l logsDo) WriteDB() ILogsDo {
	return l.Clauses(dbresolver.Write)
}

func (l logsDo) Session(config *gorm.Session) ILogsDo {
	return l.withDO(l.DO.Session(config))
}

func (l logsDo) Clauses(conds ...clause.Expression) ILogsDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logsDo) Returning(value interface{}, columns ...string) ILogsDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logsDo) Not(conds ...gen.Condition) ILogsDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logsDo) Or(conds ...gen.Condition) ILogsDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logsDo) Select(conds ...field.Expr) ILogsDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logsDo) Where(conds ...gen.Condition) ILogsDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logsDo) Order(conds ...field.Expr) ILogsDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logsDo) Distinct(cols ...field.Expr) ILogsDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logsDo) Omit(cols ...field.Expr) ILogsDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logsDo) Join(table schema.Tabler, on ...field.Expr) ILogsDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogsDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logsDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogsDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logsDo) Group(cols ...field.Expr) ILogsDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logsDo) Having(conds ...gen.Condition) ILogsDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logsDo) Limit(limit int) ILogsDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logsDo) Offset(offset int) ILogsDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogsDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logsDo) Unscoped() ILogsDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logsDo) Create(values ...*models.Logs) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logsDo) CreateInBatches(values []*models.Logs, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logsDo) Save(values ...*models.Logs) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logsDo) First() (*models.Logs, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Logs), nil
	}
}

func (l logsDo) Take() (*models.Logs, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Logs), nil
	}
}

func (l logsDo) Last() (*models.Logs, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Logs), nil
	}
}

func (l logsDo) Find() ([]*models.Logs, error) {
	result, err := l.DO.Find()
	return result.([]*models.Logs), err
}

func (l logsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Logs, err error) {
	buf := make([]*models.Logs, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logsDo) FindInBatches(result *[]*models.Logs, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logsDo) Attrs(attrs ...field.AssignExpr) ILogsDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logsDo) Assign(attrs ...field.AssignExpr) ILogsDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logsDo) Joins(fields ...field.RelationField) ILogsDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logsDo) Preload(fields ...field.RelationField) ILogsDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logsDo) FirstOrInit() (*models.Logs, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Logs), nil
	}
}

func (l logsDo) FirstOrCreate() (*models.Logs, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Logs), nil
	}
}

func (l logsDo) FindByPage(offset int, limit int) (result []*models.Logs, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logsDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logsDo) Delete(models ...*models.Logs) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logsDo) withDO(do gen.Dao) *logsDo {
	l.DO = *do.(*gen.DO)
	return l
}
