// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMicroIndexWaterMonSla(db *gorm.DB, opts ...gen.DOOption) microIndexWaterMonSla {
	_microIndexWaterMonSla := microIndexWaterMonSla{}

	_microIndexWaterMonSla.microIndexWaterMonSlaDo.UseDB(db, opts...)
	_microIndexWaterMonSla.microIndexWaterMonSlaDo.UseModel(&slaughter.MicroIndexWaterMonSla{})

	tableName := _microIndexWaterMonSla.microIndexWaterMonSlaDo.TableName()
	_microIndexWaterMonSla.ALL = field.NewAsterisk(tableName)
	_microIndexWaterMonSla.ID = field.NewUint(tableName, "id")
	_microIndexWaterMonSla.CreatedAt = field.NewTime(tableName, "created_at")
	_microIndexWaterMonSla.UpdatedAt = field.NewTime(tableName, "updated_at")
	_microIndexWaterMonSla.DeletedAt = field.NewField(tableName, "deleted_at")
	_microIndexWaterMonSla.SlaughterWaterQualityMonID = field.NewUint(tableName, "slaughter_water_quality_mon_id")
	_microIndexWaterMonSla.MicroIndexWaterMonSla1 = field.NewFloat32(tableName, "micro_index_water_mon_sla1")
	_microIndexWaterMonSla.MicroIndexWaterMonSla2 = field.NewFloat32(tableName, "micro_index_water_mon_sla2")
	_microIndexWaterMonSla.MicroIndexWaterMonSla3 = field.NewFloat32(tableName, "micro_index_water_mon_sla3")
	_microIndexWaterMonSla.MicroIndexWaterMonSla4 = field.NewFloat32(tableName, "micro_index_water_mon_sla4")

	_microIndexWaterMonSla.fillFieldMap()

	return _microIndexWaterMonSla
}

type microIndexWaterMonSla struct {
	microIndexWaterMonSlaDo microIndexWaterMonSlaDo

	ALL                        field.Asterisk
	ID                         field.Uint
	CreatedAt                  field.Time
	UpdatedAt                  field.Time
	DeletedAt                  field.Field
	SlaughterWaterQualityMonID field.Uint
	MicroIndexWaterMonSla1     field.Float32
	MicroIndexWaterMonSla2     field.Float32
	MicroIndexWaterMonSla3     field.Float32
	MicroIndexWaterMonSla4     field.Float32

	fieldMap map[string]field.Expr
}

func (m microIndexWaterMonSla) Table(newTableName string) *microIndexWaterMonSla {
	m.microIndexWaterMonSlaDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m microIndexWaterMonSla) As(alias string) *microIndexWaterMonSla {
	m.microIndexWaterMonSlaDo.DO = *(m.microIndexWaterMonSlaDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *microIndexWaterMonSla) updateTableName(table string) *microIndexWaterMonSla {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.SlaughterWaterQualityMonID = field.NewUint(table, "slaughter_water_quality_mon_id")
	m.MicroIndexWaterMonSla1 = field.NewFloat32(table, "micro_index_water_mon_sla1")
	m.MicroIndexWaterMonSla2 = field.NewFloat32(table, "micro_index_water_mon_sla2")
	m.MicroIndexWaterMonSla3 = field.NewFloat32(table, "micro_index_water_mon_sla3")
	m.MicroIndexWaterMonSla4 = field.NewFloat32(table, "micro_index_water_mon_sla4")

	m.fillFieldMap()

	return m
}

func (m *microIndexWaterMonSla) WithContext(ctx context.Context) IMicroIndexWaterMonSlaDo {
	return m.microIndexWaterMonSlaDo.WithContext(ctx)
}

func (m microIndexWaterMonSla) TableName() string { return m.microIndexWaterMonSlaDo.TableName() }

func (m microIndexWaterMonSla) Alias() string { return m.microIndexWaterMonSlaDo.Alias() }

func (m microIndexWaterMonSla) Columns(cols ...field.Expr) gen.Columns {
	return m.microIndexWaterMonSlaDo.Columns(cols...)
}

func (m *microIndexWaterMonSla) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *microIndexWaterMonSla) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["slaughter_water_quality_mon_id"] = m.SlaughterWaterQualityMonID
	m.fieldMap["micro_index_water_mon_sla1"] = m.MicroIndexWaterMonSla1
	m.fieldMap["micro_index_water_mon_sla2"] = m.MicroIndexWaterMonSla2
	m.fieldMap["micro_index_water_mon_sla3"] = m.MicroIndexWaterMonSla3
	m.fieldMap["micro_index_water_mon_sla4"] = m.MicroIndexWaterMonSla4
}

func (m microIndexWaterMonSla) clone(db *gorm.DB) microIndexWaterMonSla {
	m.microIndexWaterMonSlaDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m microIndexWaterMonSla) replaceDB(db *gorm.DB) microIndexWaterMonSla {
	m.microIndexWaterMonSlaDo.ReplaceDB(db)
	return m
}

type microIndexWaterMonSlaDo struct{ gen.DO }

type IMicroIndexWaterMonSlaDo interface {
	gen.SubQuery
	Debug() IMicroIndexWaterMonSlaDo
	WithContext(ctx context.Context) IMicroIndexWaterMonSlaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMicroIndexWaterMonSlaDo
	WriteDB() IMicroIndexWaterMonSlaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMicroIndexWaterMonSlaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMicroIndexWaterMonSlaDo
	Not(conds ...gen.Condition) IMicroIndexWaterMonSlaDo
	Or(conds ...gen.Condition) IMicroIndexWaterMonSlaDo
	Select(conds ...field.Expr) IMicroIndexWaterMonSlaDo
	Where(conds ...gen.Condition) IMicroIndexWaterMonSlaDo
	Order(conds ...field.Expr) IMicroIndexWaterMonSlaDo
	Distinct(cols ...field.Expr) IMicroIndexWaterMonSlaDo
	Omit(cols ...field.Expr) IMicroIndexWaterMonSlaDo
	Join(table schema.Tabler, on ...field.Expr) IMicroIndexWaterMonSlaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMicroIndexWaterMonSlaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMicroIndexWaterMonSlaDo
	Group(cols ...field.Expr) IMicroIndexWaterMonSlaDo
	Having(conds ...gen.Condition) IMicroIndexWaterMonSlaDo
	Limit(limit int) IMicroIndexWaterMonSlaDo
	Offset(offset int) IMicroIndexWaterMonSlaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMicroIndexWaterMonSlaDo
	Unscoped() IMicroIndexWaterMonSlaDo
	Create(values ...*slaughter.MicroIndexWaterMonSla) error
	CreateInBatches(values []*slaughter.MicroIndexWaterMonSla, batchSize int) error
	Save(values ...*slaughter.MicroIndexWaterMonSla) error
	First() (*slaughter.MicroIndexWaterMonSla, error)
	Take() (*slaughter.MicroIndexWaterMonSla, error)
	Last() (*slaughter.MicroIndexWaterMonSla, error)
	Find() ([]*slaughter.MicroIndexWaterMonSla, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.MicroIndexWaterMonSla, err error)
	FindInBatches(result *[]*slaughter.MicroIndexWaterMonSla, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.MicroIndexWaterMonSla) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMicroIndexWaterMonSlaDo
	Assign(attrs ...field.AssignExpr) IMicroIndexWaterMonSlaDo
	Joins(fields ...field.RelationField) IMicroIndexWaterMonSlaDo
	Preload(fields ...field.RelationField) IMicroIndexWaterMonSlaDo
	FirstOrInit() (*slaughter.MicroIndexWaterMonSla, error)
	FirstOrCreate() (*slaughter.MicroIndexWaterMonSla, error)
	FindByPage(offset int, limit int) (result []*slaughter.MicroIndexWaterMonSla, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMicroIndexWaterMonSlaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m microIndexWaterMonSlaDo) Debug() IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Debug())
}

func (m microIndexWaterMonSlaDo) WithContext(ctx context.Context) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m microIndexWaterMonSlaDo) ReadDB() IMicroIndexWaterMonSlaDo {
	return m.Clauses(dbresolver.Read)
}

func (m microIndexWaterMonSlaDo) WriteDB() IMicroIndexWaterMonSlaDo {
	return m.Clauses(dbresolver.Write)
}

func (m microIndexWaterMonSlaDo) Session(config *gorm.Session) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Session(config))
}

func (m microIndexWaterMonSlaDo) Clauses(conds ...clause.Expression) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m microIndexWaterMonSlaDo) Returning(value interface{}, columns ...string) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m microIndexWaterMonSlaDo) Not(conds ...gen.Condition) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m microIndexWaterMonSlaDo) Or(conds ...gen.Condition) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m microIndexWaterMonSlaDo) Select(conds ...field.Expr) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m microIndexWaterMonSlaDo) Where(conds ...gen.Condition) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m microIndexWaterMonSlaDo) Order(conds ...field.Expr) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m microIndexWaterMonSlaDo) Distinct(cols ...field.Expr) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m microIndexWaterMonSlaDo) Omit(cols ...field.Expr) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m microIndexWaterMonSlaDo) Join(table schema.Tabler, on ...field.Expr) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m microIndexWaterMonSlaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m microIndexWaterMonSlaDo) RightJoin(table schema.Tabler, on ...field.Expr) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m microIndexWaterMonSlaDo) Group(cols ...field.Expr) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m microIndexWaterMonSlaDo) Having(conds ...gen.Condition) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m microIndexWaterMonSlaDo) Limit(limit int) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m microIndexWaterMonSlaDo) Offset(offset int) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m microIndexWaterMonSlaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m microIndexWaterMonSlaDo) Unscoped() IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Unscoped())
}

func (m microIndexWaterMonSlaDo) Create(values ...*slaughter.MicroIndexWaterMonSla) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m microIndexWaterMonSlaDo) CreateInBatches(values []*slaughter.MicroIndexWaterMonSla, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m microIndexWaterMonSlaDo) Save(values ...*slaughter.MicroIndexWaterMonSla) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m microIndexWaterMonSlaDo) First() (*slaughter.MicroIndexWaterMonSla, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.MicroIndexWaterMonSla), nil
	}
}

func (m microIndexWaterMonSlaDo) Take() (*slaughter.MicroIndexWaterMonSla, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.MicroIndexWaterMonSla), nil
	}
}

func (m microIndexWaterMonSlaDo) Last() (*slaughter.MicroIndexWaterMonSla, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.MicroIndexWaterMonSla), nil
	}
}

func (m microIndexWaterMonSlaDo) Find() ([]*slaughter.MicroIndexWaterMonSla, error) {
	result, err := m.DO.Find()
	return result.([]*slaughter.MicroIndexWaterMonSla), err
}

func (m microIndexWaterMonSlaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.MicroIndexWaterMonSla, err error) {
	buf := make([]*slaughter.MicroIndexWaterMonSla, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m microIndexWaterMonSlaDo) FindInBatches(result *[]*slaughter.MicroIndexWaterMonSla, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m microIndexWaterMonSlaDo) Attrs(attrs ...field.AssignExpr) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m microIndexWaterMonSlaDo) Assign(attrs ...field.AssignExpr) IMicroIndexWaterMonSlaDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m microIndexWaterMonSlaDo) Joins(fields ...field.RelationField) IMicroIndexWaterMonSlaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m microIndexWaterMonSlaDo) Preload(fields ...field.RelationField) IMicroIndexWaterMonSlaDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m microIndexWaterMonSlaDo) FirstOrInit() (*slaughter.MicroIndexWaterMonSla, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.MicroIndexWaterMonSla), nil
	}
}

func (m microIndexWaterMonSlaDo) FirstOrCreate() (*slaughter.MicroIndexWaterMonSla, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.MicroIndexWaterMonSla), nil
	}
}

func (m microIndexWaterMonSlaDo) FindByPage(offset int, limit int) (result []*slaughter.MicroIndexWaterMonSla, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m microIndexWaterMonSlaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m microIndexWaterMonSlaDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m microIndexWaterMonSlaDo) Delete(models ...*slaughter.MicroIndexWaterMonSla) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *microIndexWaterMonSlaDo) withDO(do gen.Dao) *microIndexWaterMonSlaDo {
	m.DO = *do.(*gen.DO)
	return m
}
