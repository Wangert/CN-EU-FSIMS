// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureFodderBiohazard(db *gorm.DB, opts ...gen.DOOption) pastureFodderBiohazard {
	_pastureFodderBiohazard := pastureFodderBiohazard{}

	_pastureFodderBiohazard.pastureFodderBiohazardDo.UseDB(db, opts...)
	_pastureFodderBiohazard.pastureFodderBiohazardDo.UseModel(&pasture.PastureFodderBiohazard{})

	tableName := _pastureFodderBiohazard.pastureFodderBiohazardDo.TableName()
	_pastureFodderBiohazard.ALL = field.NewAsterisk(tableName)
	_pastureFodderBiohazard.ID = field.NewUint(tableName, "id")
	_pastureFodderBiohazard.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureFodderBiohazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureFodderBiohazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureFodderBiohazard.AflatoxinB1 = field.NewUint(tableName, "aflatoxin_b1")
	_pastureFodderBiohazard.OchratoxinA = field.NewUint(tableName, "ochratoxin_a")
	_pastureFodderBiohazard.Zearalenone = field.NewUint(tableName, "zearalenone")
	_pastureFodderBiohazard.Vomitoxin = field.NewUint(tableName, "vomitoxin")
	_pastureFodderBiohazard.T2 = field.NewUint(tableName, "t2")
	_pastureFodderBiohazard.B1B2 = field.NewUint(tableName, "b1_b2")
	_pastureFodderBiohazard.Cyanide = field.NewUint(tableName, "cyanide")
	_pastureFodderBiohazard.FreeGossypol = field.NewUint(tableName, "free_gossypol")
	_pastureFodderBiohazard.Isothiocyanate = field.NewUint(tableName, "isothiocyanate")
	_pastureFodderBiohazard.Oxazolidinethione = field.NewUint(tableName, "oxazolidinethione")
	_pastureFodderBiohazard.TotalBacteria = field.NewUint(tableName, "total_bacteria")
	_pastureFodderBiohazard.TotalMold = field.NewUint(tableName, "total_mold")
	_pastureFodderBiohazard.Salmonella = field.NewUint(tableName, "salmonella")
	_pastureFodderBiohazard.PastureFodderID = field.NewUint(tableName, "pasture_fodder_id")

	_pastureFodderBiohazard.fillFieldMap()

	return _pastureFodderBiohazard
}

type pastureFodderBiohazard struct {
	pastureFodderBiohazardDo pastureFodderBiohazardDo

	ALL               field.Asterisk
	ID                field.Uint
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	AflatoxinB1       field.Uint
	OchratoxinA       field.Uint
	Zearalenone       field.Uint
	Vomitoxin         field.Uint
	T2                field.Uint
	B1B2              field.Uint
	Cyanide           field.Uint
	FreeGossypol      field.Uint
	Isothiocyanate    field.Uint
	Oxazolidinethione field.Uint
	TotalBacteria     field.Uint
	TotalMold         field.Uint
	Salmonella        field.Uint
	PastureFodderID   field.Uint

	fieldMap map[string]field.Expr
}

func (p pastureFodderBiohazard) Table(newTableName string) *pastureFodderBiohazard {
	p.pastureFodderBiohazardDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureFodderBiohazard) As(alias string) *pastureFodderBiohazard {
	p.pastureFodderBiohazardDo.DO = *(p.pastureFodderBiohazardDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureFodderBiohazard) updateTableName(table string) *pastureFodderBiohazard {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.AflatoxinB1 = field.NewUint(table, "aflatoxin_b1")
	p.OchratoxinA = field.NewUint(table, "ochratoxin_a")
	p.Zearalenone = field.NewUint(table, "zearalenone")
	p.Vomitoxin = field.NewUint(table, "vomitoxin")
	p.T2 = field.NewUint(table, "t2")
	p.B1B2 = field.NewUint(table, "b1_b2")
	p.Cyanide = field.NewUint(table, "cyanide")
	p.FreeGossypol = field.NewUint(table, "free_gossypol")
	p.Isothiocyanate = field.NewUint(table, "isothiocyanate")
	p.Oxazolidinethione = field.NewUint(table, "oxazolidinethione")
	p.TotalBacteria = field.NewUint(table, "total_bacteria")
	p.TotalMold = field.NewUint(table, "total_mold")
	p.Salmonella = field.NewUint(table, "salmonella")
	p.PastureFodderID = field.NewUint(table, "pasture_fodder_id")

	p.fillFieldMap()

	return p
}

func (p *pastureFodderBiohazard) WithContext(ctx context.Context) IPastureFodderBiohazardDo {
	return p.pastureFodderBiohazardDo.WithContext(ctx)
}

func (p pastureFodderBiohazard) TableName() string { return p.pastureFodderBiohazardDo.TableName() }

func (p pastureFodderBiohazard) Alias() string { return p.pastureFodderBiohazardDo.Alias() }

func (p pastureFodderBiohazard) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureFodderBiohazardDo.Columns(cols...)
}

func (p *pastureFodderBiohazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureFodderBiohazard) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 18)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["aflatoxin_b1"] = p.AflatoxinB1
	p.fieldMap["ochratoxin_a"] = p.OchratoxinA
	p.fieldMap["zearalenone"] = p.Zearalenone
	p.fieldMap["vomitoxin"] = p.Vomitoxin
	p.fieldMap["t2"] = p.T2
	p.fieldMap["b1_b2"] = p.B1B2
	p.fieldMap["cyanide"] = p.Cyanide
	p.fieldMap["free_gossypol"] = p.FreeGossypol
	p.fieldMap["isothiocyanate"] = p.Isothiocyanate
	p.fieldMap["oxazolidinethione"] = p.Oxazolidinethione
	p.fieldMap["total_bacteria"] = p.TotalBacteria
	p.fieldMap["total_mold"] = p.TotalMold
	p.fieldMap["salmonella"] = p.Salmonella
	p.fieldMap["pasture_fodder_id"] = p.PastureFodderID
}

func (p pastureFodderBiohazard) clone(db *gorm.DB) pastureFodderBiohazard {
	p.pastureFodderBiohazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureFodderBiohazard) replaceDB(db *gorm.DB) pastureFodderBiohazard {
	p.pastureFodderBiohazardDo.ReplaceDB(db)
	return p
}

type pastureFodderBiohazardDo struct{ gen.DO }

type IPastureFodderBiohazardDo interface {
	gen.SubQuery
	Debug() IPastureFodderBiohazardDo
	WithContext(ctx context.Context) IPastureFodderBiohazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureFodderBiohazardDo
	WriteDB() IPastureFodderBiohazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureFodderBiohazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureFodderBiohazardDo
	Not(conds ...gen.Condition) IPastureFodderBiohazardDo
	Or(conds ...gen.Condition) IPastureFodderBiohazardDo
	Select(conds ...field.Expr) IPastureFodderBiohazardDo
	Where(conds ...gen.Condition) IPastureFodderBiohazardDo
	Order(conds ...field.Expr) IPastureFodderBiohazardDo
	Distinct(cols ...field.Expr) IPastureFodderBiohazardDo
	Omit(cols ...field.Expr) IPastureFodderBiohazardDo
	Join(table schema.Tabler, on ...field.Expr) IPastureFodderBiohazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFodderBiohazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureFodderBiohazardDo
	Group(cols ...field.Expr) IPastureFodderBiohazardDo
	Having(conds ...gen.Condition) IPastureFodderBiohazardDo
	Limit(limit int) IPastureFodderBiohazardDo
	Offset(offset int) IPastureFodderBiohazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFodderBiohazardDo
	Unscoped() IPastureFodderBiohazardDo
	Create(values ...*pasture.PastureFodderBiohazard) error
	CreateInBatches(values []*pasture.PastureFodderBiohazard, batchSize int) error
	Save(values ...*pasture.PastureFodderBiohazard) error
	First() (*pasture.PastureFodderBiohazard, error)
	Take() (*pasture.PastureFodderBiohazard, error)
	Last() (*pasture.PastureFodderBiohazard, error)
	Find() ([]*pasture.PastureFodderBiohazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFodderBiohazard, err error)
	FindInBatches(result *[]*pasture.PastureFodderBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureFodderBiohazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureFodderBiohazardDo
	Assign(attrs ...field.AssignExpr) IPastureFodderBiohazardDo
	Joins(fields ...field.RelationField) IPastureFodderBiohazardDo
	Preload(fields ...field.RelationField) IPastureFodderBiohazardDo
	FirstOrInit() (*pasture.PastureFodderBiohazard, error)
	FirstOrCreate() (*pasture.PastureFodderBiohazard, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureFodderBiohazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureFodderBiohazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureFodderBiohazardDo) Debug() IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureFodderBiohazardDo) WithContext(ctx context.Context) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureFodderBiohazardDo) ReadDB() IPastureFodderBiohazardDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureFodderBiohazardDo) WriteDB() IPastureFodderBiohazardDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureFodderBiohazardDo) Session(config *gorm.Session) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureFodderBiohazardDo) Clauses(conds ...clause.Expression) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureFodderBiohazardDo) Returning(value interface{}, columns ...string) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureFodderBiohazardDo) Not(conds ...gen.Condition) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureFodderBiohazardDo) Or(conds ...gen.Condition) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureFodderBiohazardDo) Select(conds ...field.Expr) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureFodderBiohazardDo) Where(conds ...gen.Condition) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureFodderBiohazardDo) Order(conds ...field.Expr) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureFodderBiohazardDo) Distinct(cols ...field.Expr) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureFodderBiohazardDo) Omit(cols ...field.Expr) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureFodderBiohazardDo) Join(table schema.Tabler, on ...field.Expr) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureFodderBiohazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureFodderBiohazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureFodderBiohazardDo) Group(cols ...field.Expr) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureFodderBiohazardDo) Having(conds ...gen.Condition) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureFodderBiohazardDo) Limit(limit int) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureFodderBiohazardDo) Offset(offset int) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureFodderBiohazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureFodderBiohazardDo) Unscoped() IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureFodderBiohazardDo) Create(values ...*pasture.PastureFodderBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureFodderBiohazardDo) CreateInBatches(values []*pasture.PastureFodderBiohazard, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureFodderBiohazardDo) Save(values ...*pasture.PastureFodderBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureFodderBiohazardDo) First() (*pasture.PastureFodderBiohazard, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodderBiohazard), nil
	}
}

func (p pastureFodderBiohazardDo) Take() (*pasture.PastureFodderBiohazard, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodderBiohazard), nil
	}
}

func (p pastureFodderBiohazardDo) Last() (*pasture.PastureFodderBiohazard, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodderBiohazard), nil
	}
}

func (p pastureFodderBiohazardDo) Find() ([]*pasture.PastureFodderBiohazard, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureFodderBiohazard), err
}

func (p pastureFodderBiohazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFodderBiohazard, err error) {
	buf := make([]*pasture.PastureFodderBiohazard, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureFodderBiohazardDo) FindInBatches(result *[]*pasture.PastureFodderBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureFodderBiohazardDo) Attrs(attrs ...field.AssignExpr) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureFodderBiohazardDo) Assign(attrs ...field.AssignExpr) IPastureFodderBiohazardDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureFodderBiohazardDo) Joins(fields ...field.RelationField) IPastureFodderBiohazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureFodderBiohazardDo) Preload(fields ...field.RelationField) IPastureFodderBiohazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureFodderBiohazardDo) FirstOrInit() (*pasture.PastureFodderBiohazard, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodderBiohazard), nil
	}
}

func (p pastureFodderBiohazardDo) FirstOrCreate() (*pasture.PastureFodderBiohazard, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodderBiohazard), nil
	}
}

func (p pastureFodderBiohazardDo) FindByPage(offset int, limit int) (result []*pasture.PastureFodderBiohazard, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureFodderBiohazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureFodderBiohazardDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureFodderBiohazardDo) Delete(models ...*pasture.PastureFodderBiohazard) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureFodderBiohazardDo) withDO(do gen.Dao) *pastureFodderBiohazardDo {
	p.DO = *do.(*gen.DO)
	return p
}
