// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/fatten"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFattenProcedure(db *gorm.DB, opts ...gen.DOOption) fattenProcedure {
	_fattenProcedure := fattenProcedure{}

	_fattenProcedure.fattenProcedureDo.UseDB(db, opts...)
	_fattenProcedure.fattenProcedureDo.UseModel(&fatten.FattenProcedure{})

	tableName := _fattenProcedure.fattenProcedureDo.TableName()
	_fattenProcedure.ALL = field.NewAsterisk(tableName)
	_fattenProcedure.ID = field.NewUint(tableName, "id")
	_fattenProcedure.CreatedAt = field.NewTime(tableName, "created_at")
	_fattenProcedure.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fattenProcedure.DeletedAt = field.NewField(tableName, "deleted_at")
	_fattenProcedure.FatPID = field.NewString(tableName, "fat_p_id")
	_fattenProcedure.Water = fattenProcedureHasOneWater{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Water", "fatten.FattenWater"),
		PhysicalHazard: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Water.PhysicalHazard", "fatten.FattenWaterPhysicalHazard"),
		},
		ChemicalHazard: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Water.ChemicalHazard", "fatten.FattenWaterChemicalHazard"),
		},
		Biohazard: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Water.Biohazard", "fatten.FattenWaterBiohazard"),
		},
		SensoryTraits: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Water.SensoryTraits", "fatten.FattenWaterSensoryTraits"),
		},
	}

	_fattenProcedure.Soil = fattenProcedureHasOneSoil{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Soil", "fatten.FattenSoil"),
		PhysicalHazard: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Soil.PhysicalHazard", "fatten.FattenSoilPhysicalHazard"),
		},
		Biohazard: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Soil.Biohazard", "fatten.FattenSoilBiohazard"),
		},
	}

	_fattenProcedure.fillFieldMap()

	return _fattenProcedure
}

type fattenProcedure struct {
	fattenProcedureDo fattenProcedureDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	FatPID    field.String
	Water     fattenProcedureHasOneWater

	Soil fattenProcedureHasOneSoil

	fieldMap map[string]field.Expr
}

func (f fattenProcedure) Table(newTableName string) *fattenProcedure {
	f.fattenProcedureDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fattenProcedure) As(alias string) *fattenProcedure {
	f.fattenProcedureDo.DO = *(f.fattenProcedureDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fattenProcedure) updateTableName(table string) *fattenProcedure {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.FatPID = field.NewString(table, "fat_p_id")

	f.fillFieldMap()

	return f
}

func (f *fattenProcedure) WithContext(ctx context.Context) IFattenProcedureDo {
	return f.fattenProcedureDo.WithContext(ctx)
}

func (f fattenProcedure) TableName() string { return f.fattenProcedureDo.TableName() }

func (f fattenProcedure) Alias() string { return f.fattenProcedureDo.Alias() }

func (f fattenProcedure) Columns(cols ...field.Expr) gen.Columns {
	return f.fattenProcedureDo.Columns(cols...)
}

func (f *fattenProcedure) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fattenProcedure) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["fat_p_id"] = f.FatPID

}

func (f fattenProcedure) clone(db *gorm.DB) fattenProcedure {
	f.fattenProcedureDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fattenProcedure) replaceDB(db *gorm.DB) fattenProcedure {
	f.fattenProcedureDo.ReplaceDB(db)
	return f
}

type fattenProcedureHasOneWater struct {
	db *gorm.DB

	field.RelationField

	PhysicalHazard struct {
		field.RelationField
	}
	ChemicalHazard struct {
		field.RelationField
	}
	Biohazard struct {
		field.RelationField
	}
	SensoryTraits struct {
		field.RelationField
	}
}

func (a fattenProcedureHasOneWater) Where(conds ...field.Expr) *fattenProcedureHasOneWater {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a fattenProcedureHasOneWater) WithContext(ctx context.Context) *fattenProcedureHasOneWater {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a fattenProcedureHasOneWater) Session(session *gorm.Session) *fattenProcedureHasOneWater {
	a.db = a.db.Session(session)
	return &a
}

func (a fattenProcedureHasOneWater) Model(m *fatten.FattenProcedure) *fattenProcedureHasOneWaterTx {
	return &fattenProcedureHasOneWaterTx{a.db.Model(m).Association(a.Name())}
}

type fattenProcedureHasOneWaterTx struct{ tx *gorm.Association }

func (a fattenProcedureHasOneWaterTx) Find() (result *fatten.FattenWater, err error) {
	return result, a.tx.Find(&result)
}

func (a fattenProcedureHasOneWaterTx) Append(values ...*fatten.FattenWater) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a fattenProcedureHasOneWaterTx) Replace(values ...*fatten.FattenWater) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a fattenProcedureHasOneWaterTx) Delete(values ...*fatten.FattenWater) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a fattenProcedureHasOneWaterTx) Clear() error {
	return a.tx.Clear()
}

func (a fattenProcedureHasOneWaterTx) Count() int64 {
	return a.tx.Count()
}

type fattenProcedureHasOneSoil struct {
	db *gorm.DB

	field.RelationField

	PhysicalHazard struct {
		field.RelationField
	}
	Biohazard struct {
		field.RelationField
	}
}

func (a fattenProcedureHasOneSoil) Where(conds ...field.Expr) *fattenProcedureHasOneSoil {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a fattenProcedureHasOneSoil) WithContext(ctx context.Context) *fattenProcedureHasOneSoil {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a fattenProcedureHasOneSoil) Session(session *gorm.Session) *fattenProcedureHasOneSoil {
	a.db = a.db.Session(session)
	return &a
}

func (a fattenProcedureHasOneSoil) Model(m *fatten.FattenProcedure) *fattenProcedureHasOneSoilTx {
	return &fattenProcedureHasOneSoilTx{a.db.Model(m).Association(a.Name())}
}

type fattenProcedureHasOneSoilTx struct{ tx *gorm.Association }

func (a fattenProcedureHasOneSoilTx) Find() (result *fatten.FattenSoil, err error) {
	return result, a.tx.Find(&result)
}

func (a fattenProcedureHasOneSoilTx) Append(values ...*fatten.FattenSoil) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a fattenProcedureHasOneSoilTx) Replace(values ...*fatten.FattenSoil) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a fattenProcedureHasOneSoilTx) Delete(values ...*fatten.FattenSoil) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a fattenProcedureHasOneSoilTx) Clear() error {
	return a.tx.Clear()
}

func (a fattenProcedureHasOneSoilTx) Count() int64 {
	return a.tx.Count()
}

type fattenProcedureDo struct{ gen.DO }

type IFattenProcedureDo interface {
	gen.SubQuery
	Debug() IFattenProcedureDo
	WithContext(ctx context.Context) IFattenProcedureDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFattenProcedureDo
	WriteDB() IFattenProcedureDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFattenProcedureDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFattenProcedureDo
	Not(conds ...gen.Condition) IFattenProcedureDo
	Or(conds ...gen.Condition) IFattenProcedureDo
	Select(conds ...field.Expr) IFattenProcedureDo
	Where(conds ...gen.Condition) IFattenProcedureDo
	Order(conds ...field.Expr) IFattenProcedureDo
	Distinct(cols ...field.Expr) IFattenProcedureDo
	Omit(cols ...field.Expr) IFattenProcedureDo
	Join(table schema.Tabler, on ...field.Expr) IFattenProcedureDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFattenProcedureDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFattenProcedureDo
	Group(cols ...field.Expr) IFattenProcedureDo
	Having(conds ...gen.Condition) IFattenProcedureDo
	Limit(limit int) IFattenProcedureDo
	Offset(offset int) IFattenProcedureDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenProcedureDo
	Unscoped() IFattenProcedureDo
	Create(values ...*fatten.FattenProcedure) error
	CreateInBatches(values []*fatten.FattenProcedure, batchSize int) error
	Save(values ...*fatten.FattenProcedure) error
	First() (*fatten.FattenProcedure, error)
	Take() (*fatten.FattenProcedure, error)
	Last() (*fatten.FattenProcedure, error)
	Find() ([]*fatten.FattenProcedure, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenProcedure, err error)
	FindInBatches(result *[]*fatten.FattenProcedure, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*fatten.FattenProcedure) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFattenProcedureDo
	Assign(attrs ...field.AssignExpr) IFattenProcedureDo
	Joins(fields ...field.RelationField) IFattenProcedureDo
	Preload(fields ...field.RelationField) IFattenProcedureDo
	FirstOrInit() (*fatten.FattenProcedure, error)
	FirstOrCreate() (*fatten.FattenProcedure, error)
	FindByPage(offset int, limit int) (result []*fatten.FattenProcedure, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFattenProcedureDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fattenProcedureDo) Debug() IFattenProcedureDo {
	return f.withDO(f.DO.Debug())
}

func (f fattenProcedureDo) WithContext(ctx context.Context) IFattenProcedureDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fattenProcedureDo) ReadDB() IFattenProcedureDo {
	return f.Clauses(dbresolver.Read)
}

func (f fattenProcedureDo) WriteDB() IFattenProcedureDo {
	return f.Clauses(dbresolver.Write)
}

func (f fattenProcedureDo) Session(config *gorm.Session) IFattenProcedureDo {
	return f.withDO(f.DO.Session(config))
}

func (f fattenProcedureDo) Clauses(conds ...clause.Expression) IFattenProcedureDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fattenProcedureDo) Returning(value interface{}, columns ...string) IFattenProcedureDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fattenProcedureDo) Not(conds ...gen.Condition) IFattenProcedureDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fattenProcedureDo) Or(conds ...gen.Condition) IFattenProcedureDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fattenProcedureDo) Select(conds ...field.Expr) IFattenProcedureDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fattenProcedureDo) Where(conds ...gen.Condition) IFattenProcedureDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fattenProcedureDo) Order(conds ...field.Expr) IFattenProcedureDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fattenProcedureDo) Distinct(cols ...field.Expr) IFattenProcedureDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fattenProcedureDo) Omit(cols ...field.Expr) IFattenProcedureDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fattenProcedureDo) Join(table schema.Tabler, on ...field.Expr) IFattenProcedureDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fattenProcedureDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFattenProcedureDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fattenProcedureDo) RightJoin(table schema.Tabler, on ...field.Expr) IFattenProcedureDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fattenProcedureDo) Group(cols ...field.Expr) IFattenProcedureDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fattenProcedureDo) Having(conds ...gen.Condition) IFattenProcedureDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fattenProcedureDo) Limit(limit int) IFattenProcedureDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fattenProcedureDo) Offset(offset int) IFattenProcedureDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fattenProcedureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenProcedureDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fattenProcedureDo) Unscoped() IFattenProcedureDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fattenProcedureDo) Create(values ...*fatten.FattenProcedure) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fattenProcedureDo) CreateInBatches(values []*fatten.FattenProcedure, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fattenProcedureDo) Save(values ...*fatten.FattenProcedure) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fattenProcedureDo) First() (*fatten.FattenProcedure, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenProcedure), nil
	}
}

func (f fattenProcedureDo) Take() (*fatten.FattenProcedure, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenProcedure), nil
	}
}

func (f fattenProcedureDo) Last() (*fatten.FattenProcedure, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenProcedure), nil
	}
}

func (f fattenProcedureDo) Find() ([]*fatten.FattenProcedure, error) {
	result, err := f.DO.Find()
	return result.([]*fatten.FattenProcedure), err
}

func (f fattenProcedureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenProcedure, err error) {
	buf := make([]*fatten.FattenProcedure, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fattenProcedureDo) FindInBatches(result *[]*fatten.FattenProcedure, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fattenProcedureDo) Attrs(attrs ...field.AssignExpr) IFattenProcedureDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fattenProcedureDo) Assign(attrs ...field.AssignExpr) IFattenProcedureDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fattenProcedureDo) Joins(fields ...field.RelationField) IFattenProcedureDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fattenProcedureDo) Preload(fields ...field.RelationField) IFattenProcedureDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fattenProcedureDo) FirstOrInit() (*fatten.FattenProcedure, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenProcedure), nil
	}
}

func (f fattenProcedureDo) FirstOrCreate() (*fatten.FattenProcedure, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenProcedure), nil
	}
}

func (f fattenProcedureDo) FindByPage(offset int, limit int) (result []*fatten.FattenProcedure, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fattenProcedureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fattenProcedureDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fattenProcedureDo) Delete(models ...*fatten.FattenProcedure) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fattenProcedureDo) withDO(do gen.Dao) *fattenProcedureDo {
	f.DO = *do.(*gen.DO)
	return f
}
