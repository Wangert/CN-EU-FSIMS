// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newOtherIndex(db *gorm.DB, opts ...gen.DOOption) otherIndex {
	_otherIndex := otherIndex{}

	_otherIndex.otherIndexDo.UseDB(db, opts...)
	_otherIndex.otherIndexDo.UseModel(&slaughter.OtherIndex{})

	tableName := _otherIndex.otherIndexDo.TableName()
	_otherIndex.ALL = field.NewAsterisk(tableName)
	_otherIndex.ID = field.NewUint(tableName, "id")
	_otherIndex.CreatedAt = field.NewTime(tableName, "created_at")
	_otherIndex.UpdatedAt = field.NewTime(tableName, "updated_at")
	_otherIndex.DeletedAt = field.NewField(tableName, "deleted_at")
	_otherIndex.ChiledFreshIndexID = field.NewUint(tableName, "chiled_fresh_index_id")
	_otherIndex.OtherIndex1 = field.NewFloat32(tableName, "other_index1")
	_otherIndex.OtherIndex2 = field.NewFloat32(tableName, "other_index2")
	_otherIndex.OtherIndex3 = field.NewFloat32(tableName, "other_index3")
	_otherIndex.OtherIndex4 = field.NewFloat32(tableName, "other_index4")
	_otherIndex.OtherIndex5 = field.NewFloat32(tableName, "other_index5")
	_otherIndex.OtherIndex6 = field.NewFloat32(tableName, "other_index6")
	_otherIndex.OtherIndex7 = field.NewFloat32(tableName, "other_index7")
	_otherIndex.OtherIndex8 = field.NewFloat32(tableName, "other_index8")
	_otherIndex.OtherIndex9 = field.NewFloat32(tableName, "other_index9")

	_otherIndex.fillFieldMap()

	return _otherIndex
}

type otherIndex struct {
	otherIndexDo otherIndexDo

	ALL                field.Asterisk
	ID                 field.Uint
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field
	ChiledFreshIndexID field.Uint
	OtherIndex1        field.Float32
	OtherIndex2        field.Float32
	OtherIndex3        field.Float32
	OtherIndex4        field.Float32
	OtherIndex5        field.Float32
	OtherIndex6        field.Float32
	OtherIndex7        field.Float32
	OtherIndex8        field.Float32
	OtherIndex9        field.Float32

	fieldMap map[string]field.Expr
}

func (o otherIndex) Table(newTableName string) *otherIndex {
	o.otherIndexDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o otherIndex) As(alias string) *otherIndex {
	o.otherIndexDo.DO = *(o.otherIndexDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *otherIndex) updateTableName(table string) *otherIndex {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.ChiledFreshIndexID = field.NewUint(table, "chiled_fresh_index_id")
	o.OtherIndex1 = field.NewFloat32(table, "other_index1")
	o.OtherIndex2 = field.NewFloat32(table, "other_index2")
	o.OtherIndex3 = field.NewFloat32(table, "other_index3")
	o.OtherIndex4 = field.NewFloat32(table, "other_index4")
	o.OtherIndex5 = field.NewFloat32(table, "other_index5")
	o.OtherIndex6 = field.NewFloat32(table, "other_index6")
	o.OtherIndex7 = field.NewFloat32(table, "other_index7")
	o.OtherIndex8 = field.NewFloat32(table, "other_index8")
	o.OtherIndex9 = field.NewFloat32(table, "other_index9")

	o.fillFieldMap()

	return o
}

func (o *otherIndex) WithContext(ctx context.Context) IOtherIndexDo {
	return o.otherIndexDo.WithContext(ctx)
}

func (o otherIndex) TableName() string { return o.otherIndexDo.TableName() }

func (o otherIndex) Alias() string { return o.otherIndexDo.Alias() }

func (o otherIndex) Columns(cols ...field.Expr) gen.Columns { return o.otherIndexDo.Columns(cols...) }

func (o *otherIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *otherIndex) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 14)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["chiled_fresh_index_id"] = o.ChiledFreshIndexID
	o.fieldMap["other_index1"] = o.OtherIndex1
	o.fieldMap["other_index2"] = o.OtherIndex2
	o.fieldMap["other_index3"] = o.OtherIndex3
	o.fieldMap["other_index4"] = o.OtherIndex4
	o.fieldMap["other_index5"] = o.OtherIndex5
	o.fieldMap["other_index6"] = o.OtherIndex6
	o.fieldMap["other_index7"] = o.OtherIndex7
	o.fieldMap["other_index8"] = o.OtherIndex8
	o.fieldMap["other_index9"] = o.OtherIndex9
}

func (o otherIndex) clone(db *gorm.DB) otherIndex {
	o.otherIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o otherIndex) replaceDB(db *gorm.DB) otherIndex {
	o.otherIndexDo.ReplaceDB(db)
	return o
}

type otherIndexDo struct{ gen.DO }

type IOtherIndexDo interface {
	gen.SubQuery
	Debug() IOtherIndexDo
	WithContext(ctx context.Context) IOtherIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOtherIndexDo
	WriteDB() IOtherIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOtherIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOtherIndexDo
	Not(conds ...gen.Condition) IOtherIndexDo
	Or(conds ...gen.Condition) IOtherIndexDo
	Select(conds ...field.Expr) IOtherIndexDo
	Where(conds ...gen.Condition) IOtherIndexDo
	Order(conds ...field.Expr) IOtherIndexDo
	Distinct(cols ...field.Expr) IOtherIndexDo
	Omit(cols ...field.Expr) IOtherIndexDo
	Join(table schema.Tabler, on ...field.Expr) IOtherIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOtherIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOtherIndexDo
	Group(cols ...field.Expr) IOtherIndexDo
	Having(conds ...gen.Condition) IOtherIndexDo
	Limit(limit int) IOtherIndexDo
	Offset(offset int) IOtherIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOtherIndexDo
	Unscoped() IOtherIndexDo
	Create(values ...*slaughter.OtherIndex) error
	CreateInBatches(values []*slaughter.OtherIndex, batchSize int) error
	Save(values ...*slaughter.OtherIndex) error
	First() (*slaughter.OtherIndex, error)
	Take() (*slaughter.OtherIndex, error)
	Last() (*slaughter.OtherIndex, error)
	Find() ([]*slaughter.OtherIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.OtherIndex, err error)
	FindInBatches(result *[]*slaughter.OtherIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.OtherIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOtherIndexDo
	Assign(attrs ...field.AssignExpr) IOtherIndexDo
	Joins(fields ...field.RelationField) IOtherIndexDo
	Preload(fields ...field.RelationField) IOtherIndexDo
	FirstOrInit() (*slaughter.OtherIndex, error)
	FirstOrCreate() (*slaughter.OtherIndex, error)
	FindByPage(offset int, limit int) (result []*slaughter.OtherIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOtherIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o otherIndexDo) Debug() IOtherIndexDo {
	return o.withDO(o.DO.Debug())
}

func (o otherIndexDo) WithContext(ctx context.Context) IOtherIndexDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o otherIndexDo) ReadDB() IOtherIndexDo {
	return o.Clauses(dbresolver.Read)
}

func (o otherIndexDo) WriteDB() IOtherIndexDo {
	return o.Clauses(dbresolver.Write)
}

func (o otherIndexDo) Session(config *gorm.Session) IOtherIndexDo {
	return o.withDO(o.DO.Session(config))
}

func (o otherIndexDo) Clauses(conds ...clause.Expression) IOtherIndexDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o otherIndexDo) Returning(value interface{}, columns ...string) IOtherIndexDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o otherIndexDo) Not(conds ...gen.Condition) IOtherIndexDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o otherIndexDo) Or(conds ...gen.Condition) IOtherIndexDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o otherIndexDo) Select(conds ...field.Expr) IOtherIndexDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o otherIndexDo) Where(conds ...gen.Condition) IOtherIndexDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o otherIndexDo) Order(conds ...field.Expr) IOtherIndexDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o otherIndexDo) Distinct(cols ...field.Expr) IOtherIndexDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o otherIndexDo) Omit(cols ...field.Expr) IOtherIndexDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o otherIndexDo) Join(table schema.Tabler, on ...field.Expr) IOtherIndexDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o otherIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOtherIndexDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o otherIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IOtherIndexDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o otherIndexDo) Group(cols ...field.Expr) IOtherIndexDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o otherIndexDo) Having(conds ...gen.Condition) IOtherIndexDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o otherIndexDo) Limit(limit int) IOtherIndexDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o otherIndexDo) Offset(offset int) IOtherIndexDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o otherIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOtherIndexDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o otherIndexDo) Unscoped() IOtherIndexDo {
	return o.withDO(o.DO.Unscoped())
}

func (o otherIndexDo) Create(values ...*slaughter.OtherIndex) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o otherIndexDo) CreateInBatches(values []*slaughter.OtherIndex, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o otherIndexDo) Save(values ...*slaughter.OtherIndex) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o otherIndexDo) First() (*slaughter.OtherIndex, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.OtherIndex), nil
	}
}

func (o otherIndexDo) Take() (*slaughter.OtherIndex, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.OtherIndex), nil
	}
}

func (o otherIndexDo) Last() (*slaughter.OtherIndex, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.OtherIndex), nil
	}
}

func (o otherIndexDo) Find() ([]*slaughter.OtherIndex, error) {
	result, err := o.DO.Find()
	return result.([]*slaughter.OtherIndex), err
}

func (o otherIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.OtherIndex, err error) {
	buf := make([]*slaughter.OtherIndex, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o otherIndexDo) FindInBatches(result *[]*slaughter.OtherIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o otherIndexDo) Attrs(attrs ...field.AssignExpr) IOtherIndexDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o otherIndexDo) Assign(attrs ...field.AssignExpr) IOtherIndexDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o otherIndexDo) Joins(fields ...field.RelationField) IOtherIndexDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o otherIndexDo) Preload(fields ...field.RelationField) IOtherIndexDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o otherIndexDo) FirstOrInit() (*slaughter.OtherIndex, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.OtherIndex), nil
	}
}

func (o otherIndexDo) FirstOrCreate() (*slaughter.OtherIndex, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.OtherIndex), nil
	}
}

func (o otherIndexDo) FindByPage(offset int, limit int) (result []*slaughter.OtherIndex, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o otherIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o otherIndexDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o otherIndexDo) Delete(models ...*slaughter.OtherIndex) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *otherIndexDo) withDO(do gen.Dao) *otherIndexDo {
	o.DO = *do.(*gen.DO)
	return o
}
