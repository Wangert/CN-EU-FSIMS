// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newT2toxin(db *gorm.DB, opts ...gen.DOOption) t2toxin {
	_t2toxin := t2toxin{}

	_t2toxin.t2toxinDo.UseDB(db, opts...)
	_t2toxin.t2toxinDo.UseModel(&pasture.T2toxin{})

	tableName := _t2toxin.t2toxinDo.TableName()
	_t2toxin.ALL = field.NewAsterisk(tableName)
	_t2toxin.ID = field.NewUint(tableName, "id")
	_t2toxin.CreatedAt = field.NewTime(tableName, "created_at")
	_t2toxin.UpdatedAt = field.NewTime(tableName, "updated_at")
	_t2toxin.DeletedAt = field.NewField(tableName, "deleted_at")
	_t2toxin.PastureFeedMycotoxinsID = field.NewUint(tableName, "pasture_feed_mycotoxins_id")
	_t2toxin.T2toxin1 = field.NewFloat64(tableName, "t2toxin1")
	_t2toxin.T2toxin2 = field.NewFloat64(tableName, "t2toxin2")
	_t2toxin.T2toxin3 = field.NewFloat64(tableName, "t2toxin3")

	_t2toxin.fillFieldMap()

	return _t2toxin
}

type t2toxin struct {
	t2toxinDo t2toxinDo

	ALL                     field.Asterisk
	ID                      field.Uint
	CreatedAt               field.Time
	UpdatedAt               field.Time
	DeletedAt               field.Field
	PastureFeedMycotoxinsID field.Uint
	T2toxin1                field.Float64
	T2toxin2                field.Float64
	T2toxin3                field.Float64

	fieldMap map[string]field.Expr
}

func (t t2toxin) Table(newTableName string) *t2toxin {
	t.t2toxinDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t t2toxin) As(alias string) *t2toxin {
	t.t2toxinDo.DO = *(t.t2toxinDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *t2toxin) updateTableName(table string) *t2toxin {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.PastureFeedMycotoxinsID = field.NewUint(table, "pasture_feed_mycotoxins_id")
	t.T2toxin1 = field.NewFloat64(table, "t2toxin1")
	t.T2toxin2 = field.NewFloat64(table, "t2toxin2")
	t.T2toxin3 = field.NewFloat64(table, "t2toxin3")

	t.fillFieldMap()

	return t
}

func (t *t2toxin) WithContext(ctx context.Context) IT2toxinDo { return t.t2toxinDo.WithContext(ctx) }

func (t t2toxin) TableName() string { return t.t2toxinDo.TableName() }

func (t t2toxin) Alias() string { return t.t2toxinDo.Alias() }

func (t t2toxin) Columns(cols ...field.Expr) gen.Columns { return t.t2toxinDo.Columns(cols...) }

func (t *t2toxin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *t2toxin) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["pasture_feed_mycotoxins_id"] = t.PastureFeedMycotoxinsID
	t.fieldMap["t2toxin1"] = t.T2toxin1
	t.fieldMap["t2toxin2"] = t.T2toxin2
	t.fieldMap["t2toxin3"] = t.T2toxin3
}

func (t t2toxin) clone(db *gorm.DB) t2toxin {
	t.t2toxinDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t t2toxin) replaceDB(db *gorm.DB) t2toxin {
	t.t2toxinDo.ReplaceDB(db)
	return t
}

type t2toxinDo struct{ gen.DO }

type IT2toxinDo interface {
	gen.SubQuery
	Debug() IT2toxinDo
	WithContext(ctx context.Context) IT2toxinDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IT2toxinDo
	WriteDB() IT2toxinDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IT2toxinDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IT2toxinDo
	Not(conds ...gen.Condition) IT2toxinDo
	Or(conds ...gen.Condition) IT2toxinDo
	Select(conds ...field.Expr) IT2toxinDo
	Where(conds ...gen.Condition) IT2toxinDo
	Order(conds ...field.Expr) IT2toxinDo
	Distinct(cols ...field.Expr) IT2toxinDo
	Omit(cols ...field.Expr) IT2toxinDo
	Join(table schema.Tabler, on ...field.Expr) IT2toxinDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IT2toxinDo
	RightJoin(table schema.Tabler, on ...field.Expr) IT2toxinDo
	Group(cols ...field.Expr) IT2toxinDo
	Having(conds ...gen.Condition) IT2toxinDo
	Limit(limit int) IT2toxinDo
	Offset(offset int) IT2toxinDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IT2toxinDo
	Unscoped() IT2toxinDo
	Create(values ...*pasture.T2toxin) error
	CreateInBatches(values []*pasture.T2toxin, batchSize int) error
	Save(values ...*pasture.T2toxin) error
	First() (*pasture.T2toxin, error)
	Take() (*pasture.T2toxin, error)
	Last() (*pasture.T2toxin, error)
	Find() ([]*pasture.T2toxin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.T2toxin, err error)
	FindInBatches(result *[]*pasture.T2toxin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.T2toxin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IT2toxinDo
	Assign(attrs ...field.AssignExpr) IT2toxinDo
	Joins(fields ...field.RelationField) IT2toxinDo
	Preload(fields ...field.RelationField) IT2toxinDo
	FirstOrInit() (*pasture.T2toxin, error)
	FirstOrCreate() (*pasture.T2toxin, error)
	FindByPage(offset int, limit int) (result []*pasture.T2toxin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IT2toxinDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t t2toxinDo) Debug() IT2toxinDo {
	return t.withDO(t.DO.Debug())
}

func (t t2toxinDo) WithContext(ctx context.Context) IT2toxinDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t t2toxinDo) ReadDB() IT2toxinDo {
	return t.Clauses(dbresolver.Read)
}

func (t t2toxinDo) WriteDB() IT2toxinDo {
	return t.Clauses(dbresolver.Write)
}

func (t t2toxinDo) Session(config *gorm.Session) IT2toxinDo {
	return t.withDO(t.DO.Session(config))
}

func (t t2toxinDo) Clauses(conds ...clause.Expression) IT2toxinDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t t2toxinDo) Returning(value interface{}, columns ...string) IT2toxinDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t t2toxinDo) Not(conds ...gen.Condition) IT2toxinDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t t2toxinDo) Or(conds ...gen.Condition) IT2toxinDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t t2toxinDo) Select(conds ...field.Expr) IT2toxinDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t t2toxinDo) Where(conds ...gen.Condition) IT2toxinDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t t2toxinDo) Order(conds ...field.Expr) IT2toxinDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t t2toxinDo) Distinct(cols ...field.Expr) IT2toxinDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t t2toxinDo) Omit(cols ...field.Expr) IT2toxinDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t t2toxinDo) Join(table schema.Tabler, on ...field.Expr) IT2toxinDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t t2toxinDo) LeftJoin(table schema.Tabler, on ...field.Expr) IT2toxinDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t t2toxinDo) RightJoin(table schema.Tabler, on ...field.Expr) IT2toxinDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t t2toxinDo) Group(cols ...field.Expr) IT2toxinDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t t2toxinDo) Having(conds ...gen.Condition) IT2toxinDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t t2toxinDo) Limit(limit int) IT2toxinDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t t2toxinDo) Offset(offset int) IT2toxinDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t t2toxinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IT2toxinDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t t2toxinDo) Unscoped() IT2toxinDo {
	return t.withDO(t.DO.Unscoped())
}

func (t t2toxinDo) Create(values ...*pasture.T2toxin) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t t2toxinDo) CreateInBatches(values []*pasture.T2toxin, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t t2toxinDo) Save(values ...*pasture.T2toxin) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t t2toxinDo) First() (*pasture.T2toxin, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.T2toxin), nil
	}
}

func (t t2toxinDo) Take() (*pasture.T2toxin, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.T2toxin), nil
	}
}

func (t t2toxinDo) Last() (*pasture.T2toxin, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.T2toxin), nil
	}
}

func (t t2toxinDo) Find() ([]*pasture.T2toxin, error) {
	result, err := t.DO.Find()
	return result.([]*pasture.T2toxin), err
}

func (t t2toxinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.T2toxin, err error) {
	buf := make([]*pasture.T2toxin, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t t2toxinDo) FindInBatches(result *[]*pasture.T2toxin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t t2toxinDo) Attrs(attrs ...field.AssignExpr) IT2toxinDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t t2toxinDo) Assign(attrs ...field.AssignExpr) IT2toxinDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t t2toxinDo) Joins(fields ...field.RelationField) IT2toxinDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t t2toxinDo) Preload(fields ...field.RelationField) IT2toxinDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t t2toxinDo) FirstOrInit() (*pasture.T2toxin, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.T2toxin), nil
	}
}

func (t t2toxinDo) FirstOrCreate() (*pasture.T2toxin, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.T2toxin), nil
	}
}

func (t t2toxinDo) FindByPage(offset int, limit int) (result []*pasture.T2toxin, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t t2toxinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t t2toxinDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t t2toxinDo) Delete(models ...*pasture.T2toxin) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *t2toxinDo) withDO(do gen.Dao) *t2toxinDo {
	t.DO = *do.(*gen.DO)
	return t
}
