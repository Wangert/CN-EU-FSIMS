// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newCd(db *gorm.DB, opts ...gen.DOOption) cd {
	_cd := cd{}

	_cd.cdDo.UseDB(db, opts...)
	_cd.cdDo.UseModel(&pasture.Cd{})

	tableName := _cd.cdDo.TableName()
	_cd.ALL = field.NewAsterisk(tableName)
	_cd.ID = field.NewUint(tableName, "id")
	_cd.CreatedAt = field.NewTime(tableName, "created_at")
	_cd.UpdatedAt = field.NewTime(tableName, "updated_at")
	_cd.DeletedAt = field.NewField(tableName, "deleted_at")
	_cd.HeavyMetalID = field.NewUint(tableName, "heavy_metal_id")
	_cd.Cd1 = field.NewFloat64(tableName, "cd1")
	_cd.Cd2 = field.NewFloat64(tableName, "cd2")
	_cd.Cd3 = field.NewFloat64(tableName, "cd3")
	_cd.Cd4 = field.NewFloat64(tableName, "cd4")
	_cd.Cd5 = field.NewFloat64(tableName, "cd5")
	_cd.Cd6 = field.NewFloat64(tableName, "cd6")
	_cd.Cd7 = field.NewFloat64(tableName, "cd7")

	_cd.fillFieldMap()

	return _cd
}

type cd struct {
	cdDo cdDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	HeavyMetalID field.Uint
	Cd1          field.Float64
	Cd2          field.Float64
	Cd3          field.Float64
	Cd4          field.Float64
	Cd5          field.Float64
	Cd6          field.Float64
	Cd7          field.Float64

	fieldMap map[string]field.Expr
}

func (c cd) Table(newTableName string) *cd {
	c.cdDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cd) As(alias string) *cd {
	c.cdDo.DO = *(c.cdDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cd) updateTableName(table string) *cd {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.HeavyMetalID = field.NewUint(table, "heavy_metal_id")
	c.Cd1 = field.NewFloat64(table, "cd1")
	c.Cd2 = field.NewFloat64(table, "cd2")
	c.Cd3 = field.NewFloat64(table, "cd3")
	c.Cd4 = field.NewFloat64(table, "cd4")
	c.Cd5 = field.NewFloat64(table, "cd5")
	c.Cd6 = field.NewFloat64(table, "cd6")
	c.Cd7 = field.NewFloat64(table, "cd7")

	c.fillFieldMap()

	return c
}

func (c *cd) WithContext(ctx context.Context) ICdDo { return c.cdDo.WithContext(ctx) }

func (c cd) TableName() string { return c.cdDo.TableName() }

func (c cd) Alias() string { return c.cdDo.Alias() }

func (c cd) Columns(cols ...field.Expr) gen.Columns { return c.cdDo.Columns(cols...) }

func (c *cd) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cd) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["heavy_metal_id"] = c.HeavyMetalID
	c.fieldMap["cd1"] = c.Cd1
	c.fieldMap["cd2"] = c.Cd2
	c.fieldMap["cd3"] = c.Cd3
	c.fieldMap["cd4"] = c.Cd4
	c.fieldMap["cd5"] = c.Cd5
	c.fieldMap["cd6"] = c.Cd6
	c.fieldMap["cd7"] = c.Cd7
}

func (c cd) clone(db *gorm.DB) cd {
	c.cdDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cd) replaceDB(db *gorm.DB) cd {
	c.cdDo.ReplaceDB(db)
	return c
}

type cdDo struct{ gen.DO }

type ICdDo interface {
	gen.SubQuery
	Debug() ICdDo
	WithContext(ctx context.Context) ICdDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICdDo
	WriteDB() ICdDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICdDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICdDo
	Not(conds ...gen.Condition) ICdDo
	Or(conds ...gen.Condition) ICdDo
	Select(conds ...field.Expr) ICdDo
	Where(conds ...gen.Condition) ICdDo
	Order(conds ...field.Expr) ICdDo
	Distinct(cols ...field.Expr) ICdDo
	Omit(cols ...field.Expr) ICdDo
	Join(table schema.Tabler, on ...field.Expr) ICdDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICdDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICdDo
	Group(cols ...field.Expr) ICdDo
	Having(conds ...gen.Condition) ICdDo
	Limit(limit int) ICdDo
	Offset(offset int) ICdDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICdDo
	Unscoped() ICdDo
	Create(values ...*pasture.Cd) error
	CreateInBatches(values []*pasture.Cd, batchSize int) error
	Save(values ...*pasture.Cd) error
	First() (*pasture.Cd, error)
	Take() (*pasture.Cd, error)
	Last() (*pasture.Cd, error)
	Find() ([]*pasture.Cd, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.Cd, err error)
	FindInBatches(result *[]*pasture.Cd, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.Cd) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICdDo
	Assign(attrs ...field.AssignExpr) ICdDo
	Joins(fields ...field.RelationField) ICdDo
	Preload(fields ...field.RelationField) ICdDo
	FirstOrInit() (*pasture.Cd, error)
	FirstOrCreate() (*pasture.Cd, error)
	FindByPage(offset int, limit int) (result []*pasture.Cd, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICdDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cdDo) Debug() ICdDo {
	return c.withDO(c.DO.Debug())
}

func (c cdDo) WithContext(ctx context.Context) ICdDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cdDo) ReadDB() ICdDo {
	return c.Clauses(dbresolver.Read)
}

func (c cdDo) WriteDB() ICdDo {
	return c.Clauses(dbresolver.Write)
}

func (c cdDo) Session(config *gorm.Session) ICdDo {
	return c.withDO(c.DO.Session(config))
}

func (c cdDo) Clauses(conds ...clause.Expression) ICdDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cdDo) Returning(value interface{}, columns ...string) ICdDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cdDo) Not(conds ...gen.Condition) ICdDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cdDo) Or(conds ...gen.Condition) ICdDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cdDo) Select(conds ...field.Expr) ICdDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cdDo) Where(conds ...gen.Condition) ICdDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cdDo) Order(conds ...field.Expr) ICdDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cdDo) Distinct(cols ...field.Expr) ICdDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cdDo) Omit(cols ...field.Expr) ICdDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cdDo) Join(table schema.Tabler, on ...field.Expr) ICdDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cdDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICdDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cdDo) RightJoin(table schema.Tabler, on ...field.Expr) ICdDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cdDo) Group(cols ...field.Expr) ICdDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cdDo) Having(conds ...gen.Condition) ICdDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cdDo) Limit(limit int) ICdDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cdDo) Offset(offset int) ICdDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICdDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cdDo) Unscoped() ICdDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cdDo) Create(values ...*pasture.Cd) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cdDo) CreateInBatches(values []*pasture.Cd, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cdDo) Save(values ...*pasture.Cd) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cdDo) First() (*pasture.Cd, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Cd), nil
	}
}

func (c cdDo) Take() (*pasture.Cd, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Cd), nil
	}
}

func (c cdDo) Last() (*pasture.Cd, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Cd), nil
	}
}

func (c cdDo) Find() ([]*pasture.Cd, error) {
	result, err := c.DO.Find()
	return result.([]*pasture.Cd), err
}

func (c cdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.Cd, err error) {
	buf := make([]*pasture.Cd, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cdDo) FindInBatches(result *[]*pasture.Cd, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cdDo) Attrs(attrs ...field.AssignExpr) ICdDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cdDo) Assign(attrs ...field.AssignExpr) ICdDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cdDo) Joins(fields ...field.RelationField) ICdDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cdDo) Preload(fields ...field.RelationField) ICdDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cdDo) FirstOrInit() (*pasture.Cd, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Cd), nil
	}
}

func (c cdDo) FirstOrCreate() (*pasture.Cd, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.Cd), nil
	}
}

func (c cdDo) FindByPage(offset int, limit int) (result []*pasture.Cd, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cdDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cdDo) Delete(models ...*pasture.Cd) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cdDo) withDO(do gen.Dao) *cdDo {
	c.DO = *do.(*gen.DO)
	return c
}
