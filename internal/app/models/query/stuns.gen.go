// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newStun(db *gorm.DB, opts ...gen.DOOption) stun {
	_stun := stun{}

	_stun.stunDo.UseDB(db, opts...)
	_stun.stunDo.UseModel(&slaughter.Stun{})

	tableName := _stun.stunDo.TableName()
	_stun.ALL = field.NewAsterisk(tableName)
	_stun.ID = field.NewUint(tableName, "id")
	_stun.CreatedAt = field.NewTime(tableName, "created_at")
	_stun.UpdatedAt = field.NewTime(tableName, "updated_at")
	_stun.DeletedAt = field.NewField(tableName, "deleted_at")
	_stun.SlaInfoMonID = field.NewUint(tableName, "sla_info_mon_id")
	_stun.Stun1 = field.NewFloat32(tableName, "stun1")
	_stun.Stun2 = field.NewFloat32(tableName, "stun2")
	_stun.Stun3 = field.NewFloat32(tableName, "stun3")

	_stun.fillFieldMap()

	return _stun
}

type stun struct {
	stunDo stunDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	SlaInfoMonID field.Uint
	Stun1        field.Float32
	Stun2        field.Float32
	Stun3        field.Float32

	fieldMap map[string]field.Expr
}

func (s stun) Table(newTableName string) *stun {
	s.stunDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stun) As(alias string) *stun {
	s.stunDo.DO = *(s.stunDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stun) updateTableName(table string) *stun {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.SlaInfoMonID = field.NewUint(table, "sla_info_mon_id")
	s.Stun1 = field.NewFloat32(table, "stun1")
	s.Stun2 = field.NewFloat32(table, "stun2")
	s.Stun3 = field.NewFloat32(table, "stun3")

	s.fillFieldMap()

	return s
}

func (s *stun) WithContext(ctx context.Context) IStunDo { return s.stunDo.WithContext(ctx) }

func (s stun) TableName() string { return s.stunDo.TableName() }

func (s stun) Alias() string { return s.stunDo.Alias() }

func (s stun) Columns(cols ...field.Expr) gen.Columns { return s.stunDo.Columns(cols...) }

func (s *stun) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stun) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["sla_info_mon_id"] = s.SlaInfoMonID
	s.fieldMap["stun1"] = s.Stun1
	s.fieldMap["stun2"] = s.Stun2
	s.fieldMap["stun3"] = s.Stun3
}

func (s stun) clone(db *gorm.DB) stun {
	s.stunDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stun) replaceDB(db *gorm.DB) stun {
	s.stunDo.ReplaceDB(db)
	return s
}

type stunDo struct{ gen.DO }

type IStunDo interface {
	gen.SubQuery
	Debug() IStunDo
	WithContext(ctx context.Context) IStunDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStunDo
	WriteDB() IStunDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStunDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStunDo
	Not(conds ...gen.Condition) IStunDo
	Or(conds ...gen.Condition) IStunDo
	Select(conds ...field.Expr) IStunDo
	Where(conds ...gen.Condition) IStunDo
	Order(conds ...field.Expr) IStunDo
	Distinct(cols ...field.Expr) IStunDo
	Omit(cols ...field.Expr) IStunDo
	Join(table schema.Tabler, on ...field.Expr) IStunDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStunDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStunDo
	Group(cols ...field.Expr) IStunDo
	Having(conds ...gen.Condition) IStunDo
	Limit(limit int) IStunDo
	Offset(offset int) IStunDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStunDo
	Unscoped() IStunDo
	Create(values ...*slaughter.Stun) error
	CreateInBatches(values []*slaughter.Stun, batchSize int) error
	Save(values ...*slaughter.Stun) error
	First() (*slaughter.Stun, error)
	Take() (*slaughter.Stun, error)
	Last() (*slaughter.Stun, error)
	Find() ([]*slaughter.Stun, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.Stun, err error)
	FindInBatches(result *[]*slaughter.Stun, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.Stun) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStunDo
	Assign(attrs ...field.AssignExpr) IStunDo
	Joins(fields ...field.RelationField) IStunDo
	Preload(fields ...field.RelationField) IStunDo
	FirstOrInit() (*slaughter.Stun, error)
	FirstOrCreate() (*slaughter.Stun, error)
	FindByPage(offset int, limit int) (result []*slaughter.Stun, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStunDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stunDo) Debug() IStunDo {
	return s.withDO(s.DO.Debug())
}

func (s stunDo) WithContext(ctx context.Context) IStunDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stunDo) ReadDB() IStunDo {
	return s.Clauses(dbresolver.Read)
}

func (s stunDo) WriteDB() IStunDo {
	return s.Clauses(dbresolver.Write)
}

func (s stunDo) Session(config *gorm.Session) IStunDo {
	return s.withDO(s.DO.Session(config))
}

func (s stunDo) Clauses(conds ...clause.Expression) IStunDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stunDo) Returning(value interface{}, columns ...string) IStunDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stunDo) Not(conds ...gen.Condition) IStunDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stunDo) Or(conds ...gen.Condition) IStunDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stunDo) Select(conds ...field.Expr) IStunDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stunDo) Where(conds ...gen.Condition) IStunDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stunDo) Order(conds ...field.Expr) IStunDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stunDo) Distinct(cols ...field.Expr) IStunDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stunDo) Omit(cols ...field.Expr) IStunDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stunDo) Join(table schema.Tabler, on ...field.Expr) IStunDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stunDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStunDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stunDo) RightJoin(table schema.Tabler, on ...field.Expr) IStunDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stunDo) Group(cols ...field.Expr) IStunDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stunDo) Having(conds ...gen.Condition) IStunDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stunDo) Limit(limit int) IStunDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stunDo) Offset(offset int) IStunDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stunDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStunDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stunDo) Unscoped() IStunDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stunDo) Create(values ...*slaughter.Stun) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stunDo) CreateInBatches(values []*slaughter.Stun, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stunDo) Save(values ...*slaughter.Stun) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stunDo) First() (*slaughter.Stun, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.Stun), nil
	}
}

func (s stunDo) Take() (*slaughter.Stun, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.Stun), nil
	}
}

func (s stunDo) Last() (*slaughter.Stun, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.Stun), nil
	}
}

func (s stunDo) Find() ([]*slaughter.Stun, error) {
	result, err := s.DO.Find()
	return result.([]*slaughter.Stun), err
}

func (s stunDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.Stun, err error) {
	buf := make([]*slaughter.Stun, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stunDo) FindInBatches(result *[]*slaughter.Stun, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stunDo) Attrs(attrs ...field.AssignExpr) IStunDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stunDo) Assign(attrs ...field.AssignExpr) IStunDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stunDo) Joins(fields ...field.RelationField) IStunDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stunDo) Preload(fields ...field.RelationField) IStunDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stunDo) FirstOrInit() (*slaughter.Stun, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.Stun), nil
	}
}

func (s stunDo) FirstOrCreate() (*slaughter.Stun, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.Stun), nil
	}
}

func (s stunDo) FindByPage(offset int, limit int) (result []*slaughter.Stun, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stunDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stunDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stunDo) Delete(models ...*slaughter.Stun) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stunDo) withDO(do gen.Dao) *stunDo {
	s.DO = *do.(*gen.DO)
	return s
}
