// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/premortem"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newGps(db *gorm.DB, opts ...gen.DOOption) gps {
	_gps := gps{}

	_gps.gpsDo.UseDB(db, opts...)
	_gps.gpsDo.UseModel(&premortem.Gps{})

	tableName := _gps.gpsDo.TableName()
	_gps.ALL = field.NewAsterisk(tableName)
	_gps.ID = field.NewUint(tableName, "id")
	_gps.CreatedAt = field.NewTime(tableName, "created_at")
	_gps.UpdatedAt = field.NewTime(tableName, "updated_at")
	_gps.DeletedAt = field.NewField(tableName, "deleted_at")
	_gps.PreSlaInfoRecID = field.NewUint(tableName, "pre_sla_info_rec_id")
	_gps.ChiledFreshIndexID = field.NewUint(tableName, "chiled_fresh_index_id")
	_gps.Gps1 = field.NewString(tableName, "gps1")
	_gps.Gps2 = field.NewString(tableName, "gps2")

	_gps.fillFieldMap()

	return _gps
}

type gps struct {
	gpsDo gpsDo

	ALL                field.Asterisk
	ID                 field.Uint
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field
	PreSlaInfoRecID    field.Uint
	ChiledFreshIndexID field.Uint
	Gps1               field.String
	Gps2               field.String

	fieldMap map[string]field.Expr
}

func (g gps) Table(newTableName string) *gps {
	g.gpsDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gps) As(alias string) *gps {
	g.gpsDo.DO = *(g.gpsDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gps) updateTableName(table string) *gps {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewUint(table, "id")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")
	g.PreSlaInfoRecID = field.NewUint(table, "pre_sla_info_rec_id")
	g.ChiledFreshIndexID = field.NewUint(table, "chiled_fresh_index_id")
	g.Gps1 = field.NewString(table, "gps1")
	g.Gps2 = field.NewString(table, "gps2")

	g.fillFieldMap()

	return g
}

func (g *gps) WithContext(ctx context.Context) IGpsDo { return g.gpsDo.WithContext(ctx) }

func (g gps) TableName() string { return g.gpsDo.TableName() }

func (g gps) Alias() string { return g.gpsDo.Alias() }

func (g gps) Columns(cols ...field.Expr) gen.Columns { return g.gpsDo.Columns(cols...) }

func (g *gps) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gps) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 8)
	g.fieldMap["id"] = g.ID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
	g.fieldMap["pre_sla_info_rec_id"] = g.PreSlaInfoRecID
	g.fieldMap["chiled_fresh_index_id"] = g.ChiledFreshIndexID
	g.fieldMap["gps1"] = g.Gps1
	g.fieldMap["gps2"] = g.Gps2
}

func (g gps) clone(db *gorm.DB) gps {
	g.gpsDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gps) replaceDB(db *gorm.DB) gps {
	g.gpsDo.ReplaceDB(db)
	return g
}

type gpsDo struct{ gen.DO }

type IGpsDo interface {
	gen.SubQuery
	Debug() IGpsDo
	WithContext(ctx context.Context) IGpsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGpsDo
	WriteDB() IGpsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGpsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGpsDo
	Not(conds ...gen.Condition) IGpsDo
	Or(conds ...gen.Condition) IGpsDo
	Select(conds ...field.Expr) IGpsDo
	Where(conds ...gen.Condition) IGpsDo
	Order(conds ...field.Expr) IGpsDo
	Distinct(cols ...field.Expr) IGpsDo
	Omit(cols ...field.Expr) IGpsDo
	Join(table schema.Tabler, on ...field.Expr) IGpsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGpsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGpsDo
	Group(cols ...field.Expr) IGpsDo
	Having(conds ...gen.Condition) IGpsDo
	Limit(limit int) IGpsDo
	Offset(offset int) IGpsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGpsDo
	Unscoped() IGpsDo
	Create(values ...*premortem.Gps) error
	CreateInBatches(values []*premortem.Gps, batchSize int) error
	Save(values ...*premortem.Gps) error
	First() (*premortem.Gps, error)
	Take() (*premortem.Gps, error)
	Last() (*premortem.Gps, error)
	Find() ([]*premortem.Gps, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*premortem.Gps, err error)
	FindInBatches(result *[]*premortem.Gps, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*premortem.Gps) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGpsDo
	Assign(attrs ...field.AssignExpr) IGpsDo
	Joins(fields ...field.RelationField) IGpsDo
	Preload(fields ...field.RelationField) IGpsDo
	FirstOrInit() (*premortem.Gps, error)
	FirstOrCreate() (*premortem.Gps, error)
	FindByPage(offset int, limit int) (result []*premortem.Gps, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGpsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gpsDo) Debug() IGpsDo {
	return g.withDO(g.DO.Debug())
}

func (g gpsDo) WithContext(ctx context.Context) IGpsDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gpsDo) ReadDB() IGpsDo {
	return g.Clauses(dbresolver.Read)
}

func (g gpsDo) WriteDB() IGpsDo {
	return g.Clauses(dbresolver.Write)
}

func (g gpsDo) Session(config *gorm.Session) IGpsDo {
	return g.withDO(g.DO.Session(config))
}

func (g gpsDo) Clauses(conds ...clause.Expression) IGpsDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gpsDo) Returning(value interface{}, columns ...string) IGpsDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gpsDo) Not(conds ...gen.Condition) IGpsDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gpsDo) Or(conds ...gen.Condition) IGpsDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gpsDo) Select(conds ...field.Expr) IGpsDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gpsDo) Where(conds ...gen.Condition) IGpsDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gpsDo) Order(conds ...field.Expr) IGpsDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gpsDo) Distinct(cols ...field.Expr) IGpsDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gpsDo) Omit(cols ...field.Expr) IGpsDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gpsDo) Join(table schema.Tabler, on ...field.Expr) IGpsDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gpsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGpsDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gpsDo) RightJoin(table schema.Tabler, on ...field.Expr) IGpsDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gpsDo) Group(cols ...field.Expr) IGpsDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gpsDo) Having(conds ...gen.Condition) IGpsDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gpsDo) Limit(limit int) IGpsDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gpsDo) Offset(offset int) IGpsDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gpsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGpsDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gpsDo) Unscoped() IGpsDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gpsDo) Create(values ...*premortem.Gps) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gpsDo) CreateInBatches(values []*premortem.Gps, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gpsDo) Save(values ...*premortem.Gps) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gpsDo) First() (*premortem.Gps, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.Gps), nil
	}
}

func (g gpsDo) Take() (*premortem.Gps, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.Gps), nil
	}
}

func (g gpsDo) Last() (*premortem.Gps, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.Gps), nil
	}
}

func (g gpsDo) Find() ([]*premortem.Gps, error) {
	result, err := g.DO.Find()
	return result.([]*premortem.Gps), err
}

func (g gpsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*premortem.Gps, err error) {
	buf := make([]*premortem.Gps, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gpsDo) FindInBatches(result *[]*premortem.Gps, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gpsDo) Attrs(attrs ...field.AssignExpr) IGpsDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gpsDo) Assign(attrs ...field.AssignExpr) IGpsDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gpsDo) Joins(fields ...field.RelationField) IGpsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gpsDo) Preload(fields ...field.RelationField) IGpsDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gpsDo) FirstOrInit() (*premortem.Gps, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.Gps), nil
	}
}

func (g gpsDo) FirstOrCreate() (*premortem.Gps, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*premortem.Gps), nil
	}
}

func (g gpsDo) FindByPage(offset int, limit int) (result []*premortem.Gps, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gpsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gpsDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gpsDo) Delete(models ...*premortem.Gps) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gpsDo) withDO(do gen.Dao) *gpsDo {
	g.DO = *do.(*gen.DO)
	return g
}
