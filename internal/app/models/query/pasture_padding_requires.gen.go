// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPasturePaddingRequire(db *gorm.DB, opts ...gen.DOOption) pasturePaddingRequire {
	_pasturePaddingRequire := pasturePaddingRequire{}

	_pasturePaddingRequire.pasturePaddingRequireDo.UseDB(db, opts...)
	_pasturePaddingRequire.pasturePaddingRequireDo.UseModel(&pasture.PasturePaddingRequire{})

	tableName := _pasturePaddingRequire.pasturePaddingRequireDo.TableName()
	_pasturePaddingRequire.ALL = field.NewAsterisk(tableName)
	_pasturePaddingRequire.ID = field.NewUint(tableName, "id")
	_pasturePaddingRequire.CreatedAt = field.NewTime(tableName, "created_at")
	_pasturePaddingRequire.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pasturePaddingRequire.DeletedAt = field.NewField(tableName, "deleted_at")
	_pasturePaddingRequire.TimeRecordAt = field.NewTime(tableName, "time_record_at")
	_pasturePaddingRequire.HouseNumber = field.NewString(tableName, "house_number")
	_pasturePaddingRequire.PaddingRequire1 = field.NewFloat32(tableName, "padding_require1")
	_pasturePaddingRequire.PaddingRequire2 = field.NewFloat32(tableName, "padding_require2")
	_pasturePaddingRequire.PaddingRequire3 = field.NewFloat32(tableName, "padding_require3")
	_pasturePaddingRequire.PaddingRequire4 = field.NewFloat32(tableName, "padding_require4")
	_pasturePaddingRequire.PaddingRequire5 = field.NewFloat32(tableName, "padding_require5")
	_pasturePaddingRequire.PaddingRequire6 = field.NewFloat32(tableName, "padding_require6")
	_pasturePaddingRequire.PaddingRequire7 = field.NewFloat32(tableName, "padding_require7")
	_pasturePaddingRequire.PaddingRequire8 = field.NewFloat32(tableName, "padding_require8")

	_pasturePaddingRequire.fillFieldMap()

	return _pasturePaddingRequire
}

type pasturePaddingRequire struct {
	pasturePaddingRequireDo pasturePaddingRequireDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	TimeRecordAt    field.Time
	HouseNumber     field.String
	PaddingRequire1 field.Float32
	PaddingRequire2 field.Float32
	PaddingRequire3 field.Float32
	PaddingRequire4 field.Float32
	PaddingRequire5 field.Float32
	PaddingRequire6 field.Float32
	PaddingRequire7 field.Float32
	PaddingRequire8 field.Float32

	fieldMap map[string]field.Expr
}

func (p pasturePaddingRequire) Table(newTableName string) *pasturePaddingRequire {
	p.pasturePaddingRequireDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pasturePaddingRequire) As(alias string) *pasturePaddingRequire {
	p.pasturePaddingRequireDo.DO = *(p.pasturePaddingRequireDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pasturePaddingRequire) updateTableName(table string) *pasturePaddingRequire {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.TimeRecordAt = field.NewTime(table, "time_record_at")
	p.HouseNumber = field.NewString(table, "house_number")
	p.PaddingRequire1 = field.NewFloat32(table, "padding_require1")
	p.PaddingRequire2 = field.NewFloat32(table, "padding_require2")
	p.PaddingRequire3 = field.NewFloat32(table, "padding_require3")
	p.PaddingRequire4 = field.NewFloat32(table, "padding_require4")
	p.PaddingRequire5 = field.NewFloat32(table, "padding_require5")
	p.PaddingRequire6 = field.NewFloat32(table, "padding_require6")
	p.PaddingRequire7 = field.NewFloat32(table, "padding_require7")
	p.PaddingRequire8 = field.NewFloat32(table, "padding_require8")

	p.fillFieldMap()

	return p
}

func (p *pasturePaddingRequire) WithContext(ctx context.Context) IPasturePaddingRequireDo {
	return p.pasturePaddingRequireDo.WithContext(ctx)
}

func (p pasturePaddingRequire) TableName() string { return p.pasturePaddingRequireDo.TableName() }

func (p pasturePaddingRequire) Alias() string { return p.pasturePaddingRequireDo.Alias() }

func (p pasturePaddingRequire) Columns(cols ...field.Expr) gen.Columns {
	return p.pasturePaddingRequireDo.Columns(cols...)
}

func (p *pasturePaddingRequire) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pasturePaddingRequire) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 14)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["time_record_at"] = p.TimeRecordAt
	p.fieldMap["house_number"] = p.HouseNumber
	p.fieldMap["padding_require1"] = p.PaddingRequire1
	p.fieldMap["padding_require2"] = p.PaddingRequire2
	p.fieldMap["padding_require3"] = p.PaddingRequire3
	p.fieldMap["padding_require4"] = p.PaddingRequire4
	p.fieldMap["padding_require5"] = p.PaddingRequire5
	p.fieldMap["padding_require6"] = p.PaddingRequire6
	p.fieldMap["padding_require7"] = p.PaddingRequire7
	p.fieldMap["padding_require8"] = p.PaddingRequire8
}

func (p pasturePaddingRequire) clone(db *gorm.DB) pasturePaddingRequire {
	p.pasturePaddingRequireDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pasturePaddingRequire) replaceDB(db *gorm.DB) pasturePaddingRequire {
	p.pasturePaddingRequireDo.ReplaceDB(db)
	return p
}

type pasturePaddingRequireDo struct{ gen.DO }

type IPasturePaddingRequireDo interface {
	gen.SubQuery
	Debug() IPasturePaddingRequireDo
	WithContext(ctx context.Context) IPasturePaddingRequireDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPasturePaddingRequireDo
	WriteDB() IPasturePaddingRequireDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPasturePaddingRequireDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPasturePaddingRequireDo
	Not(conds ...gen.Condition) IPasturePaddingRequireDo
	Or(conds ...gen.Condition) IPasturePaddingRequireDo
	Select(conds ...field.Expr) IPasturePaddingRequireDo
	Where(conds ...gen.Condition) IPasturePaddingRequireDo
	Order(conds ...field.Expr) IPasturePaddingRequireDo
	Distinct(cols ...field.Expr) IPasturePaddingRequireDo
	Omit(cols ...field.Expr) IPasturePaddingRequireDo
	Join(table schema.Tabler, on ...field.Expr) IPasturePaddingRequireDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPasturePaddingRequireDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPasturePaddingRequireDo
	Group(cols ...field.Expr) IPasturePaddingRequireDo
	Having(conds ...gen.Condition) IPasturePaddingRequireDo
	Limit(limit int) IPasturePaddingRequireDo
	Offset(offset int) IPasturePaddingRequireDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPasturePaddingRequireDo
	Unscoped() IPasturePaddingRequireDo
	Create(values ...*pasture.PasturePaddingRequire) error
	CreateInBatches(values []*pasture.PasturePaddingRequire, batchSize int) error
	Save(values ...*pasture.PasturePaddingRequire) error
	First() (*pasture.PasturePaddingRequire, error)
	Take() (*pasture.PasturePaddingRequire, error)
	Last() (*pasture.PasturePaddingRequire, error)
	Find() ([]*pasture.PasturePaddingRequire, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PasturePaddingRequire, err error)
	FindInBatches(result *[]*pasture.PasturePaddingRequire, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PasturePaddingRequire) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPasturePaddingRequireDo
	Assign(attrs ...field.AssignExpr) IPasturePaddingRequireDo
	Joins(fields ...field.RelationField) IPasturePaddingRequireDo
	Preload(fields ...field.RelationField) IPasturePaddingRequireDo
	FirstOrInit() (*pasture.PasturePaddingRequire, error)
	FirstOrCreate() (*pasture.PasturePaddingRequire, error)
	FindByPage(offset int, limit int) (result []*pasture.PasturePaddingRequire, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPasturePaddingRequireDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pasturePaddingRequireDo) Debug() IPasturePaddingRequireDo {
	return p.withDO(p.DO.Debug())
}

func (p pasturePaddingRequireDo) WithContext(ctx context.Context) IPasturePaddingRequireDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pasturePaddingRequireDo) ReadDB() IPasturePaddingRequireDo {
	return p.Clauses(dbresolver.Read)
}

func (p pasturePaddingRequireDo) WriteDB() IPasturePaddingRequireDo {
	return p.Clauses(dbresolver.Write)
}

func (p pasturePaddingRequireDo) Session(config *gorm.Session) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Session(config))
}

func (p pasturePaddingRequireDo) Clauses(conds ...clause.Expression) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pasturePaddingRequireDo) Returning(value interface{}, columns ...string) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pasturePaddingRequireDo) Not(conds ...gen.Condition) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pasturePaddingRequireDo) Or(conds ...gen.Condition) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pasturePaddingRequireDo) Select(conds ...field.Expr) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pasturePaddingRequireDo) Where(conds ...gen.Condition) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pasturePaddingRequireDo) Order(conds ...field.Expr) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pasturePaddingRequireDo) Distinct(cols ...field.Expr) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pasturePaddingRequireDo) Omit(cols ...field.Expr) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pasturePaddingRequireDo) Join(table schema.Tabler, on ...field.Expr) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pasturePaddingRequireDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPasturePaddingRequireDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pasturePaddingRequireDo) RightJoin(table schema.Tabler, on ...field.Expr) IPasturePaddingRequireDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pasturePaddingRequireDo) Group(cols ...field.Expr) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pasturePaddingRequireDo) Having(conds ...gen.Condition) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pasturePaddingRequireDo) Limit(limit int) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pasturePaddingRequireDo) Offset(offset int) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pasturePaddingRequireDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pasturePaddingRequireDo) Unscoped() IPasturePaddingRequireDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pasturePaddingRequireDo) Create(values ...*pasture.PasturePaddingRequire) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pasturePaddingRequireDo) CreateInBatches(values []*pasture.PasturePaddingRequire, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pasturePaddingRequireDo) Save(values ...*pasture.PasturePaddingRequire) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pasturePaddingRequireDo) First() (*pasture.PasturePaddingRequire, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PasturePaddingRequire), nil
	}
}

func (p pasturePaddingRequireDo) Take() (*pasture.PasturePaddingRequire, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PasturePaddingRequire), nil
	}
}

func (p pasturePaddingRequireDo) Last() (*pasture.PasturePaddingRequire, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PasturePaddingRequire), nil
	}
}

func (p pasturePaddingRequireDo) Find() ([]*pasture.PasturePaddingRequire, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PasturePaddingRequire), err
}

func (p pasturePaddingRequireDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PasturePaddingRequire, err error) {
	buf := make([]*pasture.PasturePaddingRequire, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pasturePaddingRequireDo) FindInBatches(result *[]*pasture.PasturePaddingRequire, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pasturePaddingRequireDo) Attrs(attrs ...field.AssignExpr) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pasturePaddingRequireDo) Assign(attrs ...field.AssignExpr) IPasturePaddingRequireDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pasturePaddingRequireDo) Joins(fields ...field.RelationField) IPasturePaddingRequireDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pasturePaddingRequireDo) Preload(fields ...field.RelationField) IPasturePaddingRequireDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pasturePaddingRequireDo) FirstOrInit() (*pasture.PasturePaddingRequire, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PasturePaddingRequire), nil
	}
}

func (p pasturePaddingRequireDo) FirstOrCreate() (*pasture.PasturePaddingRequire, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PasturePaddingRequire), nil
	}
}

func (p pasturePaddingRequireDo) FindByPage(offset int, limit int) (result []*pasture.PasturePaddingRequire, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pasturePaddingRequireDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pasturePaddingRequireDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pasturePaddingRequireDo) Delete(models ...*pasture.PasturePaddingRequire) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pasturePaddingRequireDo) withDO(do gen.Dao) *pasturePaddingRequireDo {
	p.DO = *do.(*gen.DO)
	return p
}
