// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureFodderPhysicalHazard(db *gorm.DB, opts ...gen.DOOption) pastureFodderPhysicalHazard {
	_pastureFodderPhysicalHazard := pastureFodderPhysicalHazard{}

	_pastureFodderPhysicalHazard.pastureFodderPhysicalHazardDo.UseDB(db, opts...)
	_pastureFodderPhysicalHazard.pastureFodderPhysicalHazardDo.UseModel(&pasture.PastureFodderPhysicalHazard{})

	tableName := _pastureFodderPhysicalHazard.pastureFodderPhysicalHazardDo.TableName()
	_pastureFodderPhysicalHazard.ALL = field.NewAsterisk(tableName)
	_pastureFodderPhysicalHazard.ID = field.NewUint(tableName, "id")
	_pastureFodderPhysicalHazard.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureFodderPhysicalHazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureFodderPhysicalHazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureFodderPhysicalHazard.Mercury = field.NewFloat64(tableName, "mercury")
	_pastureFodderPhysicalHazard.Cadmium = field.NewFloat64(tableName, "cadmium")
	_pastureFodderPhysicalHazard.Lead = field.NewFloat64(tableName, "lead")
	_pastureFodderPhysicalHazard.Chromium = field.NewFloat64(tableName, "chromium")
	_pastureFodderPhysicalHazard.Arsenic = field.NewFloat64(tableName, "arsenic")
	_pastureFodderPhysicalHazard.Fluorine = field.NewFloat64(tableName, "fluorine")
	_pastureFodderPhysicalHazard.Nitrite = field.NewFloat64(tableName, "nitrite")
	_pastureFodderPhysicalHazard.PolychlorinatedBiphenyls = field.NewFloat64(tableName, "polychlorinated_biphenyls")
	_pastureFodderPhysicalHazard.Sixsixsix = field.NewFloat64(tableName, "sixsixsix")
	_pastureFodderPhysicalHazard.DDT = field.NewFloat64(tableName, "ddt")
	_pastureFodderPhysicalHazard.Bexachlorobenzene = field.NewFloat64(tableName, "bexachlorobenzene")
	_pastureFodderPhysicalHazard.PastureFodderID = field.NewUint(tableName, "pasture_fodder_id")

	_pastureFodderPhysicalHazard.fillFieldMap()

	return _pastureFodderPhysicalHazard
}

type pastureFodderPhysicalHazard struct {
	pastureFodderPhysicalHazardDo pastureFodderPhysicalHazardDo

	ALL                      field.Asterisk
	ID                       field.Uint
	CreatedAt                field.Time
	UpdatedAt                field.Time
	DeletedAt                field.Field
	Mercury                  field.Float64
	Cadmium                  field.Float64
	Lead                     field.Float64
	Chromium                 field.Float64
	Arsenic                  field.Float64
	Fluorine                 field.Float64
	Nitrite                  field.Float64
	PolychlorinatedBiphenyls field.Float64
	Sixsixsix                field.Float64
	DDT                      field.Float64
	Bexachlorobenzene        field.Float64
	PastureFodderID          field.Uint

	fieldMap map[string]field.Expr
}

func (p pastureFodderPhysicalHazard) Table(newTableName string) *pastureFodderPhysicalHazard {
	p.pastureFodderPhysicalHazardDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureFodderPhysicalHazard) As(alias string) *pastureFodderPhysicalHazard {
	p.pastureFodderPhysicalHazardDo.DO = *(p.pastureFodderPhysicalHazardDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureFodderPhysicalHazard) updateTableName(table string) *pastureFodderPhysicalHazard {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Mercury = field.NewFloat64(table, "mercury")
	p.Cadmium = field.NewFloat64(table, "cadmium")
	p.Lead = field.NewFloat64(table, "lead")
	p.Chromium = field.NewFloat64(table, "chromium")
	p.Arsenic = field.NewFloat64(table, "arsenic")
	p.Fluorine = field.NewFloat64(table, "fluorine")
	p.Nitrite = field.NewFloat64(table, "nitrite")
	p.PolychlorinatedBiphenyls = field.NewFloat64(table, "polychlorinated_biphenyls")
	p.Sixsixsix = field.NewFloat64(table, "sixsixsix")
	p.DDT = field.NewFloat64(table, "ddt")
	p.Bexachlorobenzene = field.NewFloat64(table, "bexachlorobenzene")
	p.PastureFodderID = field.NewUint(table, "pasture_fodder_id")

	p.fillFieldMap()

	return p
}

func (p *pastureFodderPhysicalHazard) WithContext(ctx context.Context) IPastureFodderPhysicalHazardDo {
	return p.pastureFodderPhysicalHazardDo.WithContext(ctx)
}

func (p pastureFodderPhysicalHazard) TableName() string {
	return p.pastureFodderPhysicalHazardDo.TableName()
}

func (p pastureFodderPhysicalHazard) Alias() string { return p.pastureFodderPhysicalHazardDo.Alias() }

func (p pastureFodderPhysicalHazard) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureFodderPhysicalHazardDo.Columns(cols...)
}

func (p *pastureFodderPhysicalHazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureFodderPhysicalHazard) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 16)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["mercury"] = p.Mercury
	p.fieldMap["cadmium"] = p.Cadmium
	p.fieldMap["lead"] = p.Lead
	p.fieldMap["chromium"] = p.Chromium
	p.fieldMap["arsenic"] = p.Arsenic
	p.fieldMap["fluorine"] = p.Fluorine
	p.fieldMap["nitrite"] = p.Nitrite
	p.fieldMap["polychlorinated_biphenyls"] = p.PolychlorinatedBiphenyls
	p.fieldMap["sixsixsix"] = p.Sixsixsix
	p.fieldMap["ddt"] = p.DDT
	p.fieldMap["bexachlorobenzene"] = p.Bexachlorobenzene
	p.fieldMap["pasture_fodder_id"] = p.PastureFodderID
}

func (p pastureFodderPhysicalHazard) clone(db *gorm.DB) pastureFodderPhysicalHazard {
	p.pastureFodderPhysicalHazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureFodderPhysicalHazard) replaceDB(db *gorm.DB) pastureFodderPhysicalHazard {
	p.pastureFodderPhysicalHazardDo.ReplaceDB(db)
	return p
}

type pastureFodderPhysicalHazardDo struct{ gen.DO }

type IPastureFodderPhysicalHazardDo interface {
	gen.SubQuery
	Debug() IPastureFodderPhysicalHazardDo
	WithContext(ctx context.Context) IPastureFodderPhysicalHazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureFodderPhysicalHazardDo
	WriteDB() IPastureFodderPhysicalHazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureFodderPhysicalHazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureFodderPhysicalHazardDo
	Not(conds ...gen.Condition) IPastureFodderPhysicalHazardDo
	Or(conds ...gen.Condition) IPastureFodderPhysicalHazardDo
	Select(conds ...field.Expr) IPastureFodderPhysicalHazardDo
	Where(conds ...gen.Condition) IPastureFodderPhysicalHazardDo
	Order(conds ...field.Expr) IPastureFodderPhysicalHazardDo
	Distinct(cols ...field.Expr) IPastureFodderPhysicalHazardDo
	Omit(cols ...field.Expr) IPastureFodderPhysicalHazardDo
	Join(table schema.Tabler, on ...field.Expr) IPastureFodderPhysicalHazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFodderPhysicalHazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureFodderPhysicalHazardDo
	Group(cols ...field.Expr) IPastureFodderPhysicalHazardDo
	Having(conds ...gen.Condition) IPastureFodderPhysicalHazardDo
	Limit(limit int) IPastureFodderPhysicalHazardDo
	Offset(offset int) IPastureFodderPhysicalHazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFodderPhysicalHazardDo
	Unscoped() IPastureFodderPhysicalHazardDo
	Create(values ...*pasture.PastureFodderPhysicalHazard) error
	CreateInBatches(values []*pasture.PastureFodderPhysicalHazard, batchSize int) error
	Save(values ...*pasture.PastureFodderPhysicalHazard) error
	First() (*pasture.PastureFodderPhysicalHazard, error)
	Take() (*pasture.PastureFodderPhysicalHazard, error)
	Last() (*pasture.PastureFodderPhysicalHazard, error)
	Find() ([]*pasture.PastureFodderPhysicalHazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFodderPhysicalHazard, err error)
	FindInBatches(result *[]*pasture.PastureFodderPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureFodderPhysicalHazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureFodderPhysicalHazardDo
	Assign(attrs ...field.AssignExpr) IPastureFodderPhysicalHazardDo
	Joins(fields ...field.RelationField) IPastureFodderPhysicalHazardDo
	Preload(fields ...field.RelationField) IPastureFodderPhysicalHazardDo
	FirstOrInit() (*pasture.PastureFodderPhysicalHazard, error)
	FirstOrCreate() (*pasture.PastureFodderPhysicalHazard, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureFodderPhysicalHazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureFodderPhysicalHazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureFodderPhysicalHazardDo) Debug() IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureFodderPhysicalHazardDo) WithContext(ctx context.Context) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureFodderPhysicalHazardDo) ReadDB() IPastureFodderPhysicalHazardDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureFodderPhysicalHazardDo) WriteDB() IPastureFodderPhysicalHazardDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureFodderPhysicalHazardDo) Session(config *gorm.Session) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureFodderPhysicalHazardDo) Clauses(conds ...clause.Expression) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureFodderPhysicalHazardDo) Returning(value interface{}, columns ...string) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureFodderPhysicalHazardDo) Not(conds ...gen.Condition) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureFodderPhysicalHazardDo) Or(conds ...gen.Condition) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureFodderPhysicalHazardDo) Select(conds ...field.Expr) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureFodderPhysicalHazardDo) Where(conds ...gen.Condition) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureFodderPhysicalHazardDo) Order(conds ...field.Expr) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureFodderPhysicalHazardDo) Distinct(cols ...field.Expr) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureFodderPhysicalHazardDo) Omit(cols ...field.Expr) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureFodderPhysicalHazardDo) Join(table schema.Tabler, on ...field.Expr) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureFodderPhysicalHazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureFodderPhysicalHazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureFodderPhysicalHazardDo) Group(cols ...field.Expr) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureFodderPhysicalHazardDo) Having(conds ...gen.Condition) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureFodderPhysicalHazardDo) Limit(limit int) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureFodderPhysicalHazardDo) Offset(offset int) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureFodderPhysicalHazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureFodderPhysicalHazardDo) Unscoped() IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureFodderPhysicalHazardDo) Create(values ...*pasture.PastureFodderPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureFodderPhysicalHazardDo) CreateInBatches(values []*pasture.PastureFodderPhysicalHazard, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureFodderPhysicalHazardDo) Save(values ...*pasture.PastureFodderPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureFodderPhysicalHazardDo) First() (*pasture.PastureFodderPhysicalHazard, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodderPhysicalHazard), nil
	}
}

func (p pastureFodderPhysicalHazardDo) Take() (*pasture.PastureFodderPhysicalHazard, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodderPhysicalHazard), nil
	}
}

func (p pastureFodderPhysicalHazardDo) Last() (*pasture.PastureFodderPhysicalHazard, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodderPhysicalHazard), nil
	}
}

func (p pastureFodderPhysicalHazardDo) Find() ([]*pasture.PastureFodderPhysicalHazard, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureFodderPhysicalHazard), err
}

func (p pastureFodderPhysicalHazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFodderPhysicalHazard, err error) {
	buf := make([]*pasture.PastureFodderPhysicalHazard, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureFodderPhysicalHazardDo) FindInBatches(result *[]*pasture.PastureFodderPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureFodderPhysicalHazardDo) Attrs(attrs ...field.AssignExpr) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureFodderPhysicalHazardDo) Assign(attrs ...field.AssignExpr) IPastureFodderPhysicalHazardDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureFodderPhysicalHazardDo) Joins(fields ...field.RelationField) IPastureFodderPhysicalHazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureFodderPhysicalHazardDo) Preload(fields ...field.RelationField) IPastureFodderPhysicalHazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureFodderPhysicalHazardDo) FirstOrInit() (*pasture.PastureFodderPhysicalHazard, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodderPhysicalHazard), nil
	}
}

func (p pastureFodderPhysicalHazardDo) FirstOrCreate() (*pasture.PastureFodderPhysicalHazard, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFodderPhysicalHazard), nil
	}
}

func (p pastureFodderPhysicalHazardDo) FindByPage(offset int, limit int) (result []*pasture.PastureFodderPhysicalHazard, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureFodderPhysicalHazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureFodderPhysicalHazardDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureFodderPhysicalHazardDo) Delete(models ...*pasture.PastureFodderPhysicalHazard) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureFodderPhysicalHazardDo) withDO(do gen.Dao) *pastureFodderPhysicalHazardDo {
	p.DO = *do.(*gen.DO)
	return p
}
