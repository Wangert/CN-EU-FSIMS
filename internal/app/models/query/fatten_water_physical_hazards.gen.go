// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/fatten"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFattenWaterPhysicalHazard(db *gorm.DB, opts ...gen.DOOption) fattenWaterPhysicalHazard {
	_fattenWaterPhysicalHazard := fattenWaterPhysicalHazard{}

	_fattenWaterPhysicalHazard.fattenWaterPhysicalHazardDo.UseDB(db, opts...)
	_fattenWaterPhysicalHazard.fattenWaterPhysicalHazardDo.UseModel(&fatten.FattenWaterPhysicalHazard{})

	tableName := _fattenWaterPhysicalHazard.fattenWaterPhysicalHazardDo.TableName()
	_fattenWaterPhysicalHazard.ALL = field.NewAsterisk(tableName)
	_fattenWaterPhysicalHazard.ID = field.NewUint(tableName, "id")
	_fattenWaterPhysicalHazard.CreatedAt = field.NewTime(tableName, "created_at")
	_fattenWaterPhysicalHazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fattenWaterPhysicalHazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_fattenWaterPhysicalHazard.Mercury = field.NewFloat32(tableName, "mercury")
	_fattenWaterPhysicalHazard.Cadmium = field.NewFloat32(tableName, "cadmium")
	_fattenWaterPhysicalHazard.Lead = field.NewFloat32(tableName, "lead")
	_fattenWaterPhysicalHazard.Chromium = field.NewFloat32(tableName, "chromium")
	_fattenWaterPhysicalHazard.Arsenic = field.NewFloat32(tableName, "arsenic")
	_fattenWaterPhysicalHazard.Copper = field.NewFloat32(tableName, "copper")
	_fattenWaterPhysicalHazard.FattenWaterID = field.NewUint(tableName, "fatten_water_id")

	_fattenWaterPhysicalHazard.fillFieldMap()

	return _fattenWaterPhysicalHazard
}

type fattenWaterPhysicalHazard struct {
	fattenWaterPhysicalHazardDo fattenWaterPhysicalHazardDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Mercury       field.Float32
	Cadmium       field.Float32
	Lead          field.Float32
	Chromium      field.Float32
	Arsenic       field.Float32
	Copper        field.Float32
	FattenWaterID field.Uint

	fieldMap map[string]field.Expr
}

func (f fattenWaterPhysicalHazard) Table(newTableName string) *fattenWaterPhysicalHazard {
	f.fattenWaterPhysicalHazardDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fattenWaterPhysicalHazard) As(alias string) *fattenWaterPhysicalHazard {
	f.fattenWaterPhysicalHazardDo.DO = *(f.fattenWaterPhysicalHazardDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fattenWaterPhysicalHazard) updateTableName(table string) *fattenWaterPhysicalHazard {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.Mercury = field.NewFloat32(table, "mercury")
	f.Cadmium = field.NewFloat32(table, "cadmium")
	f.Lead = field.NewFloat32(table, "lead")
	f.Chromium = field.NewFloat32(table, "chromium")
	f.Arsenic = field.NewFloat32(table, "arsenic")
	f.Copper = field.NewFloat32(table, "copper")
	f.FattenWaterID = field.NewUint(table, "fatten_water_id")

	f.fillFieldMap()

	return f
}

func (f *fattenWaterPhysicalHazard) WithContext(ctx context.Context) IFattenWaterPhysicalHazardDo {
	return f.fattenWaterPhysicalHazardDo.WithContext(ctx)
}

func (f fattenWaterPhysicalHazard) TableName() string {
	return f.fattenWaterPhysicalHazardDo.TableName()
}

func (f fattenWaterPhysicalHazard) Alias() string { return f.fattenWaterPhysicalHazardDo.Alias() }

func (f fattenWaterPhysicalHazard) Columns(cols ...field.Expr) gen.Columns {
	return f.fattenWaterPhysicalHazardDo.Columns(cols...)
}

func (f *fattenWaterPhysicalHazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fattenWaterPhysicalHazard) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 11)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["mercury"] = f.Mercury
	f.fieldMap["cadmium"] = f.Cadmium
	f.fieldMap["lead"] = f.Lead
	f.fieldMap["chromium"] = f.Chromium
	f.fieldMap["arsenic"] = f.Arsenic
	f.fieldMap["copper"] = f.Copper
	f.fieldMap["fatten_water_id"] = f.FattenWaterID
}

func (f fattenWaterPhysicalHazard) clone(db *gorm.DB) fattenWaterPhysicalHazard {
	f.fattenWaterPhysicalHazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fattenWaterPhysicalHazard) replaceDB(db *gorm.DB) fattenWaterPhysicalHazard {
	f.fattenWaterPhysicalHazardDo.ReplaceDB(db)
	return f
}

type fattenWaterPhysicalHazardDo struct{ gen.DO }

type IFattenWaterPhysicalHazardDo interface {
	gen.SubQuery
	Debug() IFattenWaterPhysicalHazardDo
	WithContext(ctx context.Context) IFattenWaterPhysicalHazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFattenWaterPhysicalHazardDo
	WriteDB() IFattenWaterPhysicalHazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFattenWaterPhysicalHazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFattenWaterPhysicalHazardDo
	Not(conds ...gen.Condition) IFattenWaterPhysicalHazardDo
	Or(conds ...gen.Condition) IFattenWaterPhysicalHazardDo
	Select(conds ...field.Expr) IFattenWaterPhysicalHazardDo
	Where(conds ...gen.Condition) IFattenWaterPhysicalHazardDo
	Order(conds ...field.Expr) IFattenWaterPhysicalHazardDo
	Distinct(cols ...field.Expr) IFattenWaterPhysicalHazardDo
	Omit(cols ...field.Expr) IFattenWaterPhysicalHazardDo
	Join(table schema.Tabler, on ...field.Expr) IFattenWaterPhysicalHazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFattenWaterPhysicalHazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFattenWaterPhysicalHazardDo
	Group(cols ...field.Expr) IFattenWaterPhysicalHazardDo
	Having(conds ...gen.Condition) IFattenWaterPhysicalHazardDo
	Limit(limit int) IFattenWaterPhysicalHazardDo
	Offset(offset int) IFattenWaterPhysicalHazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenWaterPhysicalHazardDo
	Unscoped() IFattenWaterPhysicalHazardDo
	Create(values ...*fatten.FattenWaterPhysicalHazard) error
	CreateInBatches(values []*fatten.FattenWaterPhysicalHazard, batchSize int) error
	Save(values ...*fatten.FattenWaterPhysicalHazard) error
	First() (*fatten.FattenWaterPhysicalHazard, error)
	Take() (*fatten.FattenWaterPhysicalHazard, error)
	Last() (*fatten.FattenWaterPhysicalHazard, error)
	Find() ([]*fatten.FattenWaterPhysicalHazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenWaterPhysicalHazard, err error)
	FindInBatches(result *[]*fatten.FattenWaterPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*fatten.FattenWaterPhysicalHazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFattenWaterPhysicalHazardDo
	Assign(attrs ...field.AssignExpr) IFattenWaterPhysicalHazardDo
	Joins(fields ...field.RelationField) IFattenWaterPhysicalHazardDo
	Preload(fields ...field.RelationField) IFattenWaterPhysicalHazardDo
	FirstOrInit() (*fatten.FattenWaterPhysicalHazard, error)
	FirstOrCreate() (*fatten.FattenWaterPhysicalHazard, error)
	FindByPage(offset int, limit int) (result []*fatten.FattenWaterPhysicalHazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFattenWaterPhysicalHazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fattenWaterPhysicalHazardDo) Debug() IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Debug())
}

func (f fattenWaterPhysicalHazardDo) WithContext(ctx context.Context) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fattenWaterPhysicalHazardDo) ReadDB() IFattenWaterPhysicalHazardDo {
	return f.Clauses(dbresolver.Read)
}

func (f fattenWaterPhysicalHazardDo) WriteDB() IFattenWaterPhysicalHazardDo {
	return f.Clauses(dbresolver.Write)
}

func (f fattenWaterPhysicalHazardDo) Session(config *gorm.Session) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Session(config))
}

func (f fattenWaterPhysicalHazardDo) Clauses(conds ...clause.Expression) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fattenWaterPhysicalHazardDo) Returning(value interface{}, columns ...string) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fattenWaterPhysicalHazardDo) Not(conds ...gen.Condition) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fattenWaterPhysicalHazardDo) Or(conds ...gen.Condition) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fattenWaterPhysicalHazardDo) Select(conds ...field.Expr) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fattenWaterPhysicalHazardDo) Where(conds ...gen.Condition) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fattenWaterPhysicalHazardDo) Order(conds ...field.Expr) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fattenWaterPhysicalHazardDo) Distinct(cols ...field.Expr) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fattenWaterPhysicalHazardDo) Omit(cols ...field.Expr) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fattenWaterPhysicalHazardDo) Join(table schema.Tabler, on ...field.Expr) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fattenWaterPhysicalHazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fattenWaterPhysicalHazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fattenWaterPhysicalHazardDo) Group(cols ...field.Expr) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fattenWaterPhysicalHazardDo) Having(conds ...gen.Condition) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fattenWaterPhysicalHazardDo) Limit(limit int) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fattenWaterPhysicalHazardDo) Offset(offset int) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fattenWaterPhysicalHazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fattenWaterPhysicalHazardDo) Unscoped() IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fattenWaterPhysicalHazardDo) Create(values ...*fatten.FattenWaterPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fattenWaterPhysicalHazardDo) CreateInBatches(values []*fatten.FattenWaterPhysicalHazard, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fattenWaterPhysicalHazardDo) Save(values ...*fatten.FattenWaterPhysicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fattenWaterPhysicalHazardDo) First() (*fatten.FattenWaterPhysicalHazard, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterPhysicalHazard), nil
	}
}

func (f fattenWaterPhysicalHazardDo) Take() (*fatten.FattenWaterPhysicalHazard, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterPhysicalHazard), nil
	}
}

func (f fattenWaterPhysicalHazardDo) Last() (*fatten.FattenWaterPhysicalHazard, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterPhysicalHazard), nil
	}
}

func (f fattenWaterPhysicalHazardDo) Find() ([]*fatten.FattenWaterPhysicalHazard, error) {
	result, err := f.DO.Find()
	return result.([]*fatten.FattenWaterPhysicalHazard), err
}

func (f fattenWaterPhysicalHazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenWaterPhysicalHazard, err error) {
	buf := make([]*fatten.FattenWaterPhysicalHazard, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fattenWaterPhysicalHazardDo) FindInBatches(result *[]*fatten.FattenWaterPhysicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fattenWaterPhysicalHazardDo) Attrs(attrs ...field.AssignExpr) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fattenWaterPhysicalHazardDo) Assign(attrs ...field.AssignExpr) IFattenWaterPhysicalHazardDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fattenWaterPhysicalHazardDo) Joins(fields ...field.RelationField) IFattenWaterPhysicalHazardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fattenWaterPhysicalHazardDo) Preload(fields ...field.RelationField) IFattenWaterPhysicalHazardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fattenWaterPhysicalHazardDo) FirstOrInit() (*fatten.FattenWaterPhysicalHazard, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterPhysicalHazard), nil
	}
}

func (f fattenWaterPhysicalHazardDo) FirstOrCreate() (*fatten.FattenWaterPhysicalHazard, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterPhysicalHazard), nil
	}
}

func (f fattenWaterPhysicalHazardDo) FindByPage(offset int, limit int) (result []*fatten.FattenWaterPhysicalHazard, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fattenWaterPhysicalHazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fattenWaterPhysicalHazardDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fattenWaterPhysicalHazardDo) Delete(models ...*fatten.FattenWaterPhysicalHazard) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fattenWaterPhysicalHazardDo) withDO(do gen.Dao) *fattenWaterPhysicalHazardDo {
	f.DO = *do.(*gen.DO)
	return f
}
