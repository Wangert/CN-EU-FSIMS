// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSlaughterWaterToxIndex(db *gorm.DB, opts ...gen.DOOption) slaughterWaterToxIndex {
	_slaughterWaterToxIndex := slaughterWaterToxIndex{}

	_slaughterWaterToxIndex.slaughterWaterToxIndexDo.UseDB(db, opts...)
	_slaughterWaterToxIndex.slaughterWaterToxIndexDo.UseModel(&slaughter.SlaughterWaterToxIndex{})

	tableName := _slaughterWaterToxIndex.slaughterWaterToxIndexDo.TableName()
	_slaughterWaterToxIndex.ALL = field.NewAsterisk(tableName)
	_slaughterWaterToxIndex.ID = field.NewUint(tableName, "id")
	_slaughterWaterToxIndex.CreatedAt = field.NewTime(tableName, "created_at")
	_slaughterWaterToxIndex.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slaughterWaterToxIndex.DeletedAt = field.NewField(tableName, "deleted_at")
	_slaughterWaterToxIndex.WaterQualityMonID = field.NewUint(tableName, "water_quality_mon_id")
	_slaughterWaterToxIndex.ToxIndex1 = field.NewFloat64(tableName, "tox_index1")
	_slaughterWaterToxIndex.ToxIndex2 = field.NewFloat64(tableName, "tox_index2")
	_slaughterWaterToxIndex.ToxIndex3 = field.NewFloat64(tableName, "tox_index3")
	_slaughterWaterToxIndex.ToxIndex4 = field.NewFloat64(tableName, "tox_index4")
	_slaughterWaterToxIndex.ToxIndex5 = field.NewFloat64(tableName, "tox_index5")
	_slaughterWaterToxIndex.ToxIndex6 = field.NewFloat64(tableName, "tox_index6")
	_slaughterWaterToxIndex.ToxIndex7 = field.NewFloat64(tableName, "tox_index7")
	_slaughterWaterToxIndex.ToxIndex8 = field.NewFloat64(tableName, "tox_index8")
	_slaughterWaterToxIndex.ToxIndex9 = field.NewFloat64(tableName, "tox_index9")
	_slaughterWaterToxIndex.ToxIndex10 = field.NewFloat64(tableName, "tox_index10")
	_slaughterWaterToxIndex.ToxIndex11 = field.NewFloat64(tableName, "tox_index11")
	_slaughterWaterToxIndex.ToxIndex12 = field.NewFloat64(tableName, "tox_index12")
	_slaughterWaterToxIndex.ToxIndex13 = field.NewFloat64(tableName, "tox_index13")
	_slaughterWaterToxIndex.ToxIndex14 = field.NewFloat64(tableName, "tox_index14")
	_slaughterWaterToxIndex.ToxIndex15 = field.NewFloat64(tableName, "tox_index15")
	_slaughterWaterToxIndex.ToxIndex16 = field.NewFloat64(tableName, "tox_index16")
	_slaughterWaterToxIndex.ToxIndex17 = field.NewFloat64(tableName, "tox_index17")
	_slaughterWaterToxIndex.ToxIndex18 = field.NewFloat64(tableName, "tox_index18")
	_slaughterWaterToxIndex.ToxIndex19 = field.NewFloat64(tableName, "tox_index19")
	_slaughterWaterToxIndex.ToxIndex20 = field.NewFloat64(tableName, "tox_index20")
	_slaughterWaterToxIndex.ToxIndex21 = field.NewFloat64(tableName, "tox_index21")
	_slaughterWaterToxIndex.ToxIndex22 = field.NewFloat64(tableName, "tox_index22")

	_slaughterWaterToxIndex.fillFieldMap()

	return _slaughterWaterToxIndex
}

type slaughterWaterToxIndex struct {
	slaughterWaterToxIndexDo slaughterWaterToxIndexDo

	ALL               field.Asterisk
	ID                field.Uint
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	WaterQualityMonID field.Uint
	ToxIndex1         field.Float64
	ToxIndex2         field.Float64
	ToxIndex3         field.Float64
	ToxIndex4         field.Float64
	ToxIndex5         field.Float64
	ToxIndex6         field.Float64
	ToxIndex7         field.Float64
	ToxIndex8         field.Float64
	ToxIndex9         field.Float64
	ToxIndex10        field.Float64
	ToxIndex11        field.Float64
	ToxIndex12        field.Float64
	ToxIndex13        field.Float64
	ToxIndex14        field.Float64
	ToxIndex15        field.Float64
	ToxIndex16        field.Float64
	ToxIndex17        field.Float64
	ToxIndex18        field.Float64
	ToxIndex19        field.Float64
	ToxIndex20        field.Float64
	ToxIndex21        field.Float64
	ToxIndex22        field.Float64

	fieldMap map[string]field.Expr
}

func (s slaughterWaterToxIndex) Table(newTableName string) *slaughterWaterToxIndex {
	s.slaughterWaterToxIndexDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slaughterWaterToxIndex) As(alias string) *slaughterWaterToxIndex {
	s.slaughterWaterToxIndexDo.DO = *(s.slaughterWaterToxIndexDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slaughterWaterToxIndex) updateTableName(table string) *slaughterWaterToxIndex {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.WaterQualityMonID = field.NewUint(table, "water_quality_mon_id")
	s.ToxIndex1 = field.NewFloat64(table, "tox_index1")
	s.ToxIndex2 = field.NewFloat64(table, "tox_index2")
	s.ToxIndex3 = field.NewFloat64(table, "tox_index3")
	s.ToxIndex4 = field.NewFloat64(table, "tox_index4")
	s.ToxIndex5 = field.NewFloat64(table, "tox_index5")
	s.ToxIndex6 = field.NewFloat64(table, "tox_index6")
	s.ToxIndex7 = field.NewFloat64(table, "tox_index7")
	s.ToxIndex8 = field.NewFloat64(table, "tox_index8")
	s.ToxIndex9 = field.NewFloat64(table, "tox_index9")
	s.ToxIndex10 = field.NewFloat64(table, "tox_index10")
	s.ToxIndex11 = field.NewFloat64(table, "tox_index11")
	s.ToxIndex12 = field.NewFloat64(table, "tox_index12")
	s.ToxIndex13 = field.NewFloat64(table, "tox_index13")
	s.ToxIndex14 = field.NewFloat64(table, "tox_index14")
	s.ToxIndex15 = field.NewFloat64(table, "tox_index15")
	s.ToxIndex16 = field.NewFloat64(table, "tox_index16")
	s.ToxIndex17 = field.NewFloat64(table, "tox_index17")
	s.ToxIndex18 = field.NewFloat64(table, "tox_index18")
	s.ToxIndex19 = field.NewFloat64(table, "tox_index19")
	s.ToxIndex20 = field.NewFloat64(table, "tox_index20")
	s.ToxIndex21 = field.NewFloat64(table, "tox_index21")
	s.ToxIndex22 = field.NewFloat64(table, "tox_index22")

	s.fillFieldMap()

	return s
}

func (s *slaughterWaterToxIndex) WithContext(ctx context.Context) ISlaughterWaterToxIndexDo {
	return s.slaughterWaterToxIndexDo.WithContext(ctx)
}

func (s slaughterWaterToxIndex) TableName() string { return s.slaughterWaterToxIndexDo.TableName() }

func (s slaughterWaterToxIndex) Alias() string { return s.slaughterWaterToxIndexDo.Alias() }

func (s slaughterWaterToxIndex) Columns(cols ...field.Expr) gen.Columns {
	return s.slaughterWaterToxIndexDo.Columns(cols...)
}

func (s *slaughterWaterToxIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slaughterWaterToxIndex) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 27)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["water_quality_mon_id"] = s.WaterQualityMonID
	s.fieldMap["tox_index1"] = s.ToxIndex1
	s.fieldMap["tox_index2"] = s.ToxIndex2
	s.fieldMap["tox_index3"] = s.ToxIndex3
	s.fieldMap["tox_index4"] = s.ToxIndex4
	s.fieldMap["tox_index5"] = s.ToxIndex5
	s.fieldMap["tox_index6"] = s.ToxIndex6
	s.fieldMap["tox_index7"] = s.ToxIndex7
	s.fieldMap["tox_index8"] = s.ToxIndex8
	s.fieldMap["tox_index9"] = s.ToxIndex9
	s.fieldMap["tox_index10"] = s.ToxIndex10
	s.fieldMap["tox_index11"] = s.ToxIndex11
	s.fieldMap["tox_index12"] = s.ToxIndex12
	s.fieldMap["tox_index13"] = s.ToxIndex13
	s.fieldMap["tox_index14"] = s.ToxIndex14
	s.fieldMap["tox_index15"] = s.ToxIndex15
	s.fieldMap["tox_index16"] = s.ToxIndex16
	s.fieldMap["tox_index17"] = s.ToxIndex17
	s.fieldMap["tox_index18"] = s.ToxIndex18
	s.fieldMap["tox_index19"] = s.ToxIndex19
	s.fieldMap["tox_index20"] = s.ToxIndex20
	s.fieldMap["tox_index21"] = s.ToxIndex21
	s.fieldMap["tox_index22"] = s.ToxIndex22
}

func (s slaughterWaterToxIndex) clone(db *gorm.DB) slaughterWaterToxIndex {
	s.slaughterWaterToxIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slaughterWaterToxIndex) replaceDB(db *gorm.DB) slaughterWaterToxIndex {
	s.slaughterWaterToxIndexDo.ReplaceDB(db)
	return s
}

type slaughterWaterToxIndexDo struct{ gen.DO }

type ISlaughterWaterToxIndexDo interface {
	gen.SubQuery
	Debug() ISlaughterWaterToxIndexDo
	WithContext(ctx context.Context) ISlaughterWaterToxIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlaughterWaterToxIndexDo
	WriteDB() ISlaughterWaterToxIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlaughterWaterToxIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlaughterWaterToxIndexDo
	Not(conds ...gen.Condition) ISlaughterWaterToxIndexDo
	Or(conds ...gen.Condition) ISlaughterWaterToxIndexDo
	Select(conds ...field.Expr) ISlaughterWaterToxIndexDo
	Where(conds ...gen.Condition) ISlaughterWaterToxIndexDo
	Order(conds ...field.Expr) ISlaughterWaterToxIndexDo
	Distinct(cols ...field.Expr) ISlaughterWaterToxIndexDo
	Omit(cols ...field.Expr) ISlaughterWaterToxIndexDo
	Join(table schema.Tabler, on ...field.Expr) ISlaughterWaterToxIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterWaterToxIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterWaterToxIndexDo
	Group(cols ...field.Expr) ISlaughterWaterToxIndexDo
	Having(conds ...gen.Condition) ISlaughterWaterToxIndexDo
	Limit(limit int) ISlaughterWaterToxIndexDo
	Offset(offset int) ISlaughterWaterToxIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterWaterToxIndexDo
	Unscoped() ISlaughterWaterToxIndexDo
	Create(values ...*slaughter.SlaughterWaterToxIndex) error
	CreateInBatches(values []*slaughter.SlaughterWaterToxIndex, batchSize int) error
	Save(values ...*slaughter.SlaughterWaterToxIndex) error
	First() (*slaughter.SlaughterWaterToxIndex, error)
	Take() (*slaughter.SlaughterWaterToxIndex, error)
	Last() (*slaughter.SlaughterWaterToxIndex, error)
	Find() ([]*slaughter.SlaughterWaterToxIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.SlaughterWaterToxIndex, err error)
	FindInBatches(result *[]*slaughter.SlaughterWaterToxIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.SlaughterWaterToxIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlaughterWaterToxIndexDo
	Assign(attrs ...field.AssignExpr) ISlaughterWaterToxIndexDo
	Joins(fields ...field.RelationField) ISlaughterWaterToxIndexDo
	Preload(fields ...field.RelationField) ISlaughterWaterToxIndexDo
	FirstOrInit() (*slaughter.SlaughterWaterToxIndex, error)
	FirstOrCreate() (*slaughter.SlaughterWaterToxIndex, error)
	FindByPage(offset int, limit int) (result []*slaughter.SlaughterWaterToxIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlaughterWaterToxIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slaughterWaterToxIndexDo) Debug() ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Debug())
}

func (s slaughterWaterToxIndexDo) WithContext(ctx context.Context) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slaughterWaterToxIndexDo) ReadDB() ISlaughterWaterToxIndexDo {
	return s.Clauses(dbresolver.Read)
}

func (s slaughterWaterToxIndexDo) WriteDB() ISlaughterWaterToxIndexDo {
	return s.Clauses(dbresolver.Write)
}

func (s slaughterWaterToxIndexDo) Session(config *gorm.Session) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Session(config))
}

func (s slaughterWaterToxIndexDo) Clauses(conds ...clause.Expression) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slaughterWaterToxIndexDo) Returning(value interface{}, columns ...string) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slaughterWaterToxIndexDo) Not(conds ...gen.Condition) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slaughterWaterToxIndexDo) Or(conds ...gen.Condition) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slaughterWaterToxIndexDo) Select(conds ...field.Expr) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slaughterWaterToxIndexDo) Where(conds ...gen.Condition) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slaughterWaterToxIndexDo) Order(conds ...field.Expr) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slaughterWaterToxIndexDo) Distinct(cols ...field.Expr) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slaughterWaterToxIndexDo) Omit(cols ...field.Expr) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slaughterWaterToxIndexDo) Join(table schema.Tabler, on ...field.Expr) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slaughterWaterToxIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slaughterWaterToxIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slaughterWaterToxIndexDo) Group(cols ...field.Expr) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slaughterWaterToxIndexDo) Having(conds ...gen.Condition) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slaughterWaterToxIndexDo) Limit(limit int) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slaughterWaterToxIndexDo) Offset(offset int) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slaughterWaterToxIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slaughterWaterToxIndexDo) Unscoped() ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slaughterWaterToxIndexDo) Create(values ...*slaughter.SlaughterWaterToxIndex) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slaughterWaterToxIndexDo) CreateInBatches(values []*slaughter.SlaughterWaterToxIndex, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slaughterWaterToxIndexDo) Save(values ...*slaughter.SlaughterWaterToxIndex) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slaughterWaterToxIndexDo) First() (*slaughter.SlaughterWaterToxIndex, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterWaterToxIndex), nil
	}
}

func (s slaughterWaterToxIndexDo) Take() (*slaughter.SlaughterWaterToxIndex, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterWaterToxIndex), nil
	}
}

func (s slaughterWaterToxIndexDo) Last() (*slaughter.SlaughterWaterToxIndex, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterWaterToxIndex), nil
	}
}

func (s slaughterWaterToxIndexDo) Find() ([]*slaughter.SlaughterWaterToxIndex, error) {
	result, err := s.DO.Find()
	return result.([]*slaughter.SlaughterWaterToxIndex), err
}

func (s slaughterWaterToxIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.SlaughterWaterToxIndex, err error) {
	buf := make([]*slaughter.SlaughterWaterToxIndex, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slaughterWaterToxIndexDo) FindInBatches(result *[]*slaughter.SlaughterWaterToxIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slaughterWaterToxIndexDo) Attrs(attrs ...field.AssignExpr) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slaughterWaterToxIndexDo) Assign(attrs ...field.AssignExpr) ISlaughterWaterToxIndexDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slaughterWaterToxIndexDo) Joins(fields ...field.RelationField) ISlaughterWaterToxIndexDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slaughterWaterToxIndexDo) Preload(fields ...field.RelationField) ISlaughterWaterToxIndexDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slaughterWaterToxIndexDo) FirstOrInit() (*slaughter.SlaughterWaterToxIndex, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterWaterToxIndex), nil
	}
}

func (s slaughterWaterToxIndexDo) FirstOrCreate() (*slaughter.SlaughterWaterToxIndex, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterWaterToxIndex), nil
	}
}

func (s slaughterWaterToxIndexDo) FindByPage(offset int, limit int) (result []*slaughter.SlaughterWaterToxIndex, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slaughterWaterToxIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slaughterWaterToxIndexDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slaughterWaterToxIndexDo) Delete(models ...*slaughter.SlaughterWaterToxIndex) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slaughterWaterToxIndexDo) withDO(do gen.Dao) *slaughterWaterToxIndexDo {
	s.DO = *do.(*gen.DO)
	return s
}
