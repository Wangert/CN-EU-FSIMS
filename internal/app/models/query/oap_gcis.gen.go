// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newOapGci(db *gorm.DB, opts ...gen.DOOption) oapGci {
	_oapGci := oapGci{}

	_oapGci.oapGciDo.UseDB(db, opts...)
	_oapGci.oapGciDo.UseModel(&pasture.OapGci{})

	tableName := _oapGci.oapGciDo.TableName()
	_oapGci.ALL = field.NewAsterisk(tableName)
	_oapGci.ID = field.NewUint(tableName, "id")
	_oapGci.CreatedAt = field.NewTime(tableName, "created_at")
	_oapGci.UpdatedAt = field.NewTime(tableName, "updated_at")
	_oapGci.DeletedAt = field.NewField(tableName, "deleted_at")
	_oapGci.WaterRecordID = field.NewUint(tableName, "water_record_id")
	_oapGci.OapGci1 = field.NewFloat64(tableName, "oap_gci1")
	_oapGci.OapGci2 = field.NewFloat64(tableName, "oap_gci2")
	_oapGci.OapGci3 = field.NewFloat64(tableName, "oap_gci3")
	_oapGci.OapGci4 = field.NewFloat64(tableName, "oap_gci4")
	_oapGci.OapGci5 = field.NewFloat64(tableName, "oap_gci5")
	_oapGci.OapGci6 = field.NewFloat64(tableName, "oap_gci6")
	_oapGci.OapGci7 = field.NewFloat64(tableName, "oap_gci7")
	_oapGci.OapGci8 = field.NewFloat64(tableName, "oap_gci8")
	_oapGci.OapGci9 = field.NewFloat64(tableName, "oap_gci9")
	_oapGci.OapGci10 = field.NewFloat64(tableName, "oap_gci10")

	_oapGci.fillFieldMap()

	return _oapGci
}

type oapGci struct {
	oapGciDo oapGciDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	WaterRecordID field.Uint
	OapGci1       field.Float64
	OapGci2       field.Float64
	OapGci3       field.Float64
	OapGci4       field.Float64
	OapGci5       field.Float64
	OapGci6       field.Float64
	OapGci7       field.Float64
	OapGci8       field.Float64
	OapGci9       field.Float64
	OapGci10      field.Float64

	fieldMap map[string]field.Expr
}

func (o oapGci) Table(newTableName string) *oapGci {
	o.oapGciDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oapGci) As(alias string) *oapGci {
	o.oapGciDo.DO = *(o.oapGciDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oapGci) updateTableName(table string) *oapGci {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewUint(table, "id")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")
	o.WaterRecordID = field.NewUint(table, "water_record_id")
	o.OapGci1 = field.NewFloat64(table, "oap_gci1")
	o.OapGci2 = field.NewFloat64(table, "oap_gci2")
	o.OapGci3 = field.NewFloat64(table, "oap_gci3")
	o.OapGci4 = field.NewFloat64(table, "oap_gci4")
	o.OapGci5 = field.NewFloat64(table, "oap_gci5")
	o.OapGci6 = field.NewFloat64(table, "oap_gci6")
	o.OapGci7 = field.NewFloat64(table, "oap_gci7")
	o.OapGci8 = field.NewFloat64(table, "oap_gci8")
	o.OapGci9 = field.NewFloat64(table, "oap_gci9")
	o.OapGci10 = field.NewFloat64(table, "oap_gci10")

	o.fillFieldMap()

	return o
}

func (o *oapGci) WithContext(ctx context.Context) IOapGciDo { return o.oapGciDo.WithContext(ctx) }

func (o oapGci) TableName() string { return o.oapGciDo.TableName() }

func (o oapGci) Alias() string { return o.oapGciDo.Alias() }

func (o oapGci) Columns(cols ...field.Expr) gen.Columns { return o.oapGciDo.Columns(cols...) }

func (o *oapGci) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oapGci) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 15)
	o.fieldMap["id"] = o.ID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["water_record_id"] = o.WaterRecordID
	o.fieldMap["oap_gci1"] = o.OapGci1
	o.fieldMap["oap_gci2"] = o.OapGci2
	o.fieldMap["oap_gci3"] = o.OapGci3
	o.fieldMap["oap_gci4"] = o.OapGci4
	o.fieldMap["oap_gci5"] = o.OapGci5
	o.fieldMap["oap_gci6"] = o.OapGci6
	o.fieldMap["oap_gci7"] = o.OapGci7
	o.fieldMap["oap_gci8"] = o.OapGci8
	o.fieldMap["oap_gci9"] = o.OapGci9
	o.fieldMap["oap_gci10"] = o.OapGci10
}

func (o oapGci) clone(db *gorm.DB) oapGci {
	o.oapGciDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oapGci) replaceDB(db *gorm.DB) oapGci {
	o.oapGciDo.ReplaceDB(db)
	return o
}

type oapGciDo struct{ gen.DO }

type IOapGciDo interface {
	gen.SubQuery
	Debug() IOapGciDo
	WithContext(ctx context.Context) IOapGciDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOapGciDo
	WriteDB() IOapGciDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOapGciDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOapGciDo
	Not(conds ...gen.Condition) IOapGciDo
	Or(conds ...gen.Condition) IOapGciDo
	Select(conds ...field.Expr) IOapGciDo
	Where(conds ...gen.Condition) IOapGciDo
	Order(conds ...field.Expr) IOapGciDo
	Distinct(cols ...field.Expr) IOapGciDo
	Omit(cols ...field.Expr) IOapGciDo
	Join(table schema.Tabler, on ...field.Expr) IOapGciDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOapGciDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOapGciDo
	Group(cols ...field.Expr) IOapGciDo
	Having(conds ...gen.Condition) IOapGciDo
	Limit(limit int) IOapGciDo
	Offset(offset int) IOapGciDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOapGciDo
	Unscoped() IOapGciDo
	Create(values ...*pasture.OapGci) error
	CreateInBatches(values []*pasture.OapGci, batchSize int) error
	Save(values ...*pasture.OapGci) error
	First() (*pasture.OapGci, error)
	Take() (*pasture.OapGci, error)
	Last() (*pasture.OapGci, error)
	Find() ([]*pasture.OapGci, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.OapGci, err error)
	FindInBatches(result *[]*pasture.OapGci, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.OapGci) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOapGciDo
	Assign(attrs ...field.AssignExpr) IOapGciDo
	Joins(fields ...field.RelationField) IOapGciDo
	Preload(fields ...field.RelationField) IOapGciDo
	FirstOrInit() (*pasture.OapGci, error)
	FirstOrCreate() (*pasture.OapGci, error)
	FindByPage(offset int, limit int) (result []*pasture.OapGci, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOapGciDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o oapGciDo) Debug() IOapGciDo {
	return o.withDO(o.DO.Debug())
}

func (o oapGciDo) WithContext(ctx context.Context) IOapGciDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oapGciDo) ReadDB() IOapGciDo {
	return o.Clauses(dbresolver.Read)
}

func (o oapGciDo) WriteDB() IOapGciDo {
	return o.Clauses(dbresolver.Write)
}

func (o oapGciDo) Session(config *gorm.Session) IOapGciDo {
	return o.withDO(o.DO.Session(config))
}

func (o oapGciDo) Clauses(conds ...clause.Expression) IOapGciDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oapGciDo) Returning(value interface{}, columns ...string) IOapGciDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oapGciDo) Not(conds ...gen.Condition) IOapGciDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oapGciDo) Or(conds ...gen.Condition) IOapGciDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oapGciDo) Select(conds ...field.Expr) IOapGciDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oapGciDo) Where(conds ...gen.Condition) IOapGciDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oapGciDo) Order(conds ...field.Expr) IOapGciDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oapGciDo) Distinct(cols ...field.Expr) IOapGciDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oapGciDo) Omit(cols ...field.Expr) IOapGciDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oapGciDo) Join(table schema.Tabler, on ...field.Expr) IOapGciDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oapGciDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOapGciDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oapGciDo) RightJoin(table schema.Tabler, on ...field.Expr) IOapGciDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oapGciDo) Group(cols ...field.Expr) IOapGciDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oapGciDo) Having(conds ...gen.Condition) IOapGciDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oapGciDo) Limit(limit int) IOapGciDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oapGciDo) Offset(offset int) IOapGciDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oapGciDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOapGciDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oapGciDo) Unscoped() IOapGciDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oapGciDo) Create(values ...*pasture.OapGci) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oapGciDo) CreateInBatches(values []*pasture.OapGci, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oapGciDo) Save(values ...*pasture.OapGci) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oapGciDo) First() (*pasture.OapGci, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.OapGci), nil
	}
}

func (o oapGciDo) Take() (*pasture.OapGci, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.OapGci), nil
	}
}

func (o oapGciDo) Last() (*pasture.OapGci, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.OapGci), nil
	}
}

func (o oapGciDo) Find() ([]*pasture.OapGci, error) {
	result, err := o.DO.Find()
	return result.([]*pasture.OapGci), err
}

func (o oapGciDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.OapGci, err error) {
	buf := make([]*pasture.OapGci, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oapGciDo) FindInBatches(result *[]*pasture.OapGci, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oapGciDo) Attrs(attrs ...field.AssignExpr) IOapGciDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oapGciDo) Assign(attrs ...field.AssignExpr) IOapGciDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oapGciDo) Joins(fields ...field.RelationField) IOapGciDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oapGciDo) Preload(fields ...field.RelationField) IOapGciDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oapGciDo) FirstOrInit() (*pasture.OapGci, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.OapGci), nil
	}
}

func (o oapGciDo) FirstOrCreate() (*pasture.OapGci, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.OapGci), nil
	}
}

func (o oapGciDo) FindByPage(offset int, limit int) (result []*pasture.OapGci, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oapGciDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oapGciDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oapGciDo) Delete(models ...*pasture.OapGci) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oapGciDo) withDO(do gen.Dao) *oapGciDo {
	o.DO = *do.(*gen.DO)
	return o
}
