// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSubProcedure(db *gorm.DB, opts ...gen.DOOption) subProcedure {
	_subProcedure := subProcedure{}

	_subProcedure.subProcedureDo.UseDB(db, opts...)
	_subProcedure.subProcedureDo.UseModel(&models.SubProcedure{})

	tableName := _subProcedure.subProcedureDo.TableName()
	_subProcedure.ALL = field.NewAsterisk(tableName)
	_subProcedure.ID = field.NewUint(tableName, "id")
	_subProcedure.CreatedAt = field.NewTime(tableName, "created_at")
	_subProcedure.UpdatedAt = field.NewTime(tableName, "updated_at")
	_subProcedure.DeletedAt = field.NewField(tableName, "deleted_at")
	_subProcedure.SPID = field.NewString(tableName, "sp_id")
	_subProcedure.Name = field.NewString(tableName, "name")
	_subProcedure.SerialNumber = field.NewUint(tableName, "serial_number")
	_subProcedure.PreSPID = field.NewString(tableName, "pre_sp_id")
	_subProcedure.PID = field.NewString(tableName, "p_id")

	_subProcedure.fillFieldMap()

	return _subProcedure
}

type subProcedure struct {
	subProcedureDo subProcedureDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	SPID         field.String
	Name         field.String
	SerialNumber field.Uint
	PreSPID      field.String
	PID          field.String

	fieldMap map[string]field.Expr
}

func (s subProcedure) Table(newTableName string) *subProcedure {
	s.subProcedureDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subProcedure) As(alias string) *subProcedure {
	s.subProcedureDo.DO = *(s.subProcedureDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subProcedure) updateTableName(table string) *subProcedure {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.SPID = field.NewString(table, "sp_id")
	s.Name = field.NewString(table, "name")
	s.SerialNumber = field.NewUint(table, "serial_number")
	s.PreSPID = field.NewString(table, "pre_sp_id")
	s.PID = field.NewString(table, "p_id")

	s.fillFieldMap()

	return s
}

func (s *subProcedure) WithContext(ctx context.Context) ISubProcedureDo {
	return s.subProcedureDo.WithContext(ctx)
}

func (s subProcedure) TableName() string { return s.subProcedureDo.TableName() }

func (s subProcedure) Alias() string { return s.subProcedureDo.Alias() }

func (s subProcedure) Columns(cols ...field.Expr) gen.Columns {
	return s.subProcedureDo.Columns(cols...)
}

func (s *subProcedure) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subProcedure) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["sp_id"] = s.SPID
	s.fieldMap["name"] = s.Name
	s.fieldMap["serial_number"] = s.SerialNumber
	s.fieldMap["pre_sp_id"] = s.PreSPID
	s.fieldMap["p_id"] = s.PID
}

func (s subProcedure) clone(db *gorm.DB) subProcedure {
	s.subProcedureDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subProcedure) replaceDB(db *gorm.DB) subProcedure {
	s.subProcedureDo.ReplaceDB(db)
	return s
}

type subProcedureDo struct{ gen.DO }

type ISubProcedureDo interface {
	gen.SubQuery
	Debug() ISubProcedureDo
	WithContext(ctx context.Context) ISubProcedureDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubProcedureDo
	WriteDB() ISubProcedureDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubProcedureDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubProcedureDo
	Not(conds ...gen.Condition) ISubProcedureDo
	Or(conds ...gen.Condition) ISubProcedureDo
	Select(conds ...field.Expr) ISubProcedureDo
	Where(conds ...gen.Condition) ISubProcedureDo
	Order(conds ...field.Expr) ISubProcedureDo
	Distinct(cols ...field.Expr) ISubProcedureDo
	Omit(cols ...field.Expr) ISubProcedureDo
	Join(table schema.Tabler, on ...field.Expr) ISubProcedureDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubProcedureDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubProcedureDo
	Group(cols ...field.Expr) ISubProcedureDo
	Having(conds ...gen.Condition) ISubProcedureDo
	Limit(limit int) ISubProcedureDo
	Offset(offset int) ISubProcedureDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubProcedureDo
	Unscoped() ISubProcedureDo
	Create(values ...*models.SubProcedure) error
	CreateInBatches(values []*models.SubProcedure, batchSize int) error
	Save(values ...*models.SubProcedure) error
	First() (*models.SubProcedure, error)
	Take() (*models.SubProcedure, error)
	Last() (*models.SubProcedure, error)
	Find() ([]*models.SubProcedure, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SubProcedure, err error)
	FindInBatches(result *[]*models.SubProcedure, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.SubProcedure) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubProcedureDo
	Assign(attrs ...field.AssignExpr) ISubProcedureDo
	Joins(fields ...field.RelationField) ISubProcedureDo
	Preload(fields ...field.RelationField) ISubProcedureDo
	FirstOrInit() (*models.SubProcedure, error)
	FirstOrCreate() (*models.SubProcedure, error)
	FindByPage(offset int, limit int) (result []*models.SubProcedure, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubProcedureDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s subProcedureDo) Debug() ISubProcedureDo {
	return s.withDO(s.DO.Debug())
}

func (s subProcedureDo) WithContext(ctx context.Context) ISubProcedureDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subProcedureDo) ReadDB() ISubProcedureDo {
	return s.Clauses(dbresolver.Read)
}

func (s subProcedureDo) WriteDB() ISubProcedureDo {
	return s.Clauses(dbresolver.Write)
}

func (s subProcedureDo) Session(config *gorm.Session) ISubProcedureDo {
	return s.withDO(s.DO.Session(config))
}

func (s subProcedureDo) Clauses(conds ...clause.Expression) ISubProcedureDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subProcedureDo) Returning(value interface{}, columns ...string) ISubProcedureDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subProcedureDo) Not(conds ...gen.Condition) ISubProcedureDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subProcedureDo) Or(conds ...gen.Condition) ISubProcedureDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subProcedureDo) Select(conds ...field.Expr) ISubProcedureDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subProcedureDo) Where(conds ...gen.Condition) ISubProcedureDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subProcedureDo) Order(conds ...field.Expr) ISubProcedureDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subProcedureDo) Distinct(cols ...field.Expr) ISubProcedureDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subProcedureDo) Omit(cols ...field.Expr) ISubProcedureDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subProcedureDo) Join(table schema.Tabler, on ...field.Expr) ISubProcedureDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subProcedureDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubProcedureDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subProcedureDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubProcedureDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subProcedureDo) Group(cols ...field.Expr) ISubProcedureDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subProcedureDo) Having(conds ...gen.Condition) ISubProcedureDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subProcedureDo) Limit(limit int) ISubProcedureDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subProcedureDo) Offset(offset int) ISubProcedureDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subProcedureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubProcedureDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subProcedureDo) Unscoped() ISubProcedureDo {
	return s.withDO(s.DO.Unscoped())
}

func (s subProcedureDo) Create(values ...*models.SubProcedure) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subProcedureDo) CreateInBatches(values []*models.SubProcedure, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subProcedureDo) Save(values ...*models.SubProcedure) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subProcedureDo) First() (*models.SubProcedure, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubProcedure), nil
	}
}

func (s subProcedureDo) Take() (*models.SubProcedure, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubProcedure), nil
	}
}

func (s subProcedureDo) Last() (*models.SubProcedure, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubProcedure), nil
	}
}

func (s subProcedureDo) Find() ([]*models.SubProcedure, error) {
	result, err := s.DO.Find()
	return result.([]*models.SubProcedure), err
}

func (s subProcedureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SubProcedure, err error) {
	buf := make([]*models.SubProcedure, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subProcedureDo) FindInBatches(result *[]*models.SubProcedure, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subProcedureDo) Attrs(attrs ...field.AssignExpr) ISubProcedureDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subProcedureDo) Assign(attrs ...field.AssignExpr) ISubProcedureDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subProcedureDo) Joins(fields ...field.RelationField) ISubProcedureDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subProcedureDo) Preload(fields ...field.RelationField) ISubProcedureDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subProcedureDo) FirstOrInit() (*models.SubProcedure, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubProcedure), nil
	}
}

func (s subProcedureDo) FirstOrCreate() (*models.SubProcedure, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubProcedure), nil
	}
}

func (s subProcedureDo) FindByPage(offset int, limit int) (result []*models.SubProcedure, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subProcedureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subProcedureDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subProcedureDo) Delete(models ...*models.SubProcedure) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subProcedureDo) withDO(do gen.Dao) *subProcedureDo {
	s.DO = *do.(*gen.DO)
	return s
}
