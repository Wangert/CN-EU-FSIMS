// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/warehouse"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSlaughterReceiveRecord(db *gorm.DB, opts ...gen.DOOption) slaughterReceiveRecord {
	_slaughterReceiveRecord := slaughterReceiveRecord{}

	_slaughterReceiveRecord.slaughterReceiveRecordDo.UseDB(db, opts...)
	_slaughterReceiveRecord.slaughterReceiveRecordDo.UseModel(&warehouse.SlaughterReceiveRecord{})

	tableName := _slaughterReceiveRecord.slaughterReceiveRecordDo.TableName()
	_slaughterReceiveRecord.ALL = field.NewAsterisk(tableName)
	_slaughterReceiveRecord.ID = field.NewUint(tableName, "id")
	_slaughterReceiveRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_slaughterReceiveRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slaughterReceiveRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_slaughterReceiveRecord.CowNumber = field.NewString(tableName, "cow_number")
	_slaughterReceiveRecord.PID = field.NewString(tableName, "p_id")
	_slaughterReceiveRecord.SourceNumber = field.NewString(tableName, "source_number")
	_slaughterReceiveRecord.SourceName = field.NewString(tableName, "source_name")
	_slaughterReceiveRecord.Operator = field.NewString(tableName, "operator")
	_slaughterReceiveRecord.ReceiveTime = field.NewTime(tableName, "receive_time")
	_slaughterReceiveRecord.ConfirmTime = field.NewTime(tableName, "confirm_time")
	_slaughterReceiveRecord.SlaughterNumber = field.NewString(tableName, "slaughter_number")

	_slaughterReceiveRecord.fillFieldMap()

	return _slaughterReceiveRecord
}

type slaughterReceiveRecord struct {
	slaughterReceiveRecordDo slaughterReceiveRecordDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	CowNumber       field.String
	PID             field.String
	SourceNumber    field.String
	SourceName      field.String
	Operator        field.String
	ReceiveTime     field.Time
	ConfirmTime     field.Time
	SlaughterNumber field.String

	fieldMap map[string]field.Expr
}

func (s slaughterReceiveRecord) Table(newTableName string) *slaughterReceiveRecord {
	s.slaughterReceiveRecordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slaughterReceiveRecord) As(alias string) *slaughterReceiveRecord {
	s.slaughterReceiveRecordDo.DO = *(s.slaughterReceiveRecordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slaughterReceiveRecord) updateTableName(table string) *slaughterReceiveRecord {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.CowNumber = field.NewString(table, "cow_number")
	s.PID = field.NewString(table, "p_id")
	s.SourceNumber = field.NewString(table, "source_number")
	s.SourceName = field.NewString(table, "source_name")
	s.Operator = field.NewString(table, "operator")
	s.ReceiveTime = field.NewTime(table, "receive_time")
	s.ConfirmTime = field.NewTime(table, "confirm_time")
	s.SlaughterNumber = field.NewString(table, "slaughter_number")

	s.fillFieldMap()

	return s
}

func (s *slaughterReceiveRecord) WithContext(ctx context.Context) ISlaughterReceiveRecordDo {
	return s.slaughterReceiveRecordDo.WithContext(ctx)
}

func (s slaughterReceiveRecord) TableName() string { return s.slaughterReceiveRecordDo.TableName() }

func (s slaughterReceiveRecord) Alias() string { return s.slaughterReceiveRecordDo.Alias() }

func (s slaughterReceiveRecord) Columns(cols ...field.Expr) gen.Columns {
	return s.slaughterReceiveRecordDo.Columns(cols...)
}

func (s *slaughterReceiveRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slaughterReceiveRecord) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["cow_number"] = s.CowNumber
	s.fieldMap["p_id"] = s.PID
	s.fieldMap["source_number"] = s.SourceNumber
	s.fieldMap["source_name"] = s.SourceName
	s.fieldMap["operator"] = s.Operator
	s.fieldMap["receive_time"] = s.ReceiveTime
	s.fieldMap["confirm_time"] = s.ConfirmTime
	s.fieldMap["slaughter_number"] = s.SlaughterNumber
}

func (s slaughterReceiveRecord) clone(db *gorm.DB) slaughterReceiveRecord {
	s.slaughterReceiveRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slaughterReceiveRecord) replaceDB(db *gorm.DB) slaughterReceiveRecord {
	s.slaughterReceiveRecordDo.ReplaceDB(db)
	return s
}

type slaughterReceiveRecordDo struct{ gen.DO }

type ISlaughterReceiveRecordDo interface {
	gen.SubQuery
	Debug() ISlaughterReceiveRecordDo
	WithContext(ctx context.Context) ISlaughterReceiveRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlaughterReceiveRecordDo
	WriteDB() ISlaughterReceiveRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlaughterReceiveRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlaughterReceiveRecordDo
	Not(conds ...gen.Condition) ISlaughterReceiveRecordDo
	Or(conds ...gen.Condition) ISlaughterReceiveRecordDo
	Select(conds ...field.Expr) ISlaughterReceiveRecordDo
	Where(conds ...gen.Condition) ISlaughterReceiveRecordDo
	Order(conds ...field.Expr) ISlaughterReceiveRecordDo
	Distinct(cols ...field.Expr) ISlaughterReceiveRecordDo
	Omit(cols ...field.Expr) ISlaughterReceiveRecordDo
	Join(table schema.Tabler, on ...field.Expr) ISlaughterReceiveRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterReceiveRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterReceiveRecordDo
	Group(cols ...field.Expr) ISlaughterReceiveRecordDo
	Having(conds ...gen.Condition) ISlaughterReceiveRecordDo
	Limit(limit int) ISlaughterReceiveRecordDo
	Offset(offset int) ISlaughterReceiveRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterReceiveRecordDo
	Unscoped() ISlaughterReceiveRecordDo
	Create(values ...*warehouse.SlaughterReceiveRecord) error
	CreateInBatches(values []*warehouse.SlaughterReceiveRecord, batchSize int) error
	Save(values ...*warehouse.SlaughterReceiveRecord) error
	First() (*warehouse.SlaughterReceiveRecord, error)
	Take() (*warehouse.SlaughterReceiveRecord, error)
	Last() (*warehouse.SlaughterReceiveRecord, error)
	Find() ([]*warehouse.SlaughterReceiveRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.SlaughterReceiveRecord, err error)
	FindInBatches(result *[]*warehouse.SlaughterReceiveRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*warehouse.SlaughterReceiveRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlaughterReceiveRecordDo
	Assign(attrs ...field.AssignExpr) ISlaughterReceiveRecordDo
	Joins(fields ...field.RelationField) ISlaughterReceiveRecordDo
	Preload(fields ...field.RelationField) ISlaughterReceiveRecordDo
	FirstOrInit() (*warehouse.SlaughterReceiveRecord, error)
	FirstOrCreate() (*warehouse.SlaughterReceiveRecord, error)
	FindByPage(offset int, limit int) (result []*warehouse.SlaughterReceiveRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlaughterReceiveRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slaughterReceiveRecordDo) Debug() ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Debug())
}

func (s slaughterReceiveRecordDo) WithContext(ctx context.Context) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slaughterReceiveRecordDo) ReadDB() ISlaughterReceiveRecordDo {
	return s.Clauses(dbresolver.Read)
}

func (s slaughterReceiveRecordDo) WriteDB() ISlaughterReceiveRecordDo {
	return s.Clauses(dbresolver.Write)
}

func (s slaughterReceiveRecordDo) Session(config *gorm.Session) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Session(config))
}

func (s slaughterReceiveRecordDo) Clauses(conds ...clause.Expression) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slaughterReceiveRecordDo) Returning(value interface{}, columns ...string) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slaughterReceiveRecordDo) Not(conds ...gen.Condition) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slaughterReceiveRecordDo) Or(conds ...gen.Condition) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slaughterReceiveRecordDo) Select(conds ...field.Expr) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slaughterReceiveRecordDo) Where(conds ...gen.Condition) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slaughterReceiveRecordDo) Order(conds ...field.Expr) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slaughterReceiveRecordDo) Distinct(cols ...field.Expr) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slaughterReceiveRecordDo) Omit(cols ...field.Expr) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slaughterReceiveRecordDo) Join(table schema.Tabler, on ...field.Expr) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slaughterReceiveRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slaughterReceiveRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slaughterReceiveRecordDo) Group(cols ...field.Expr) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slaughterReceiveRecordDo) Having(conds ...gen.Condition) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slaughterReceiveRecordDo) Limit(limit int) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slaughterReceiveRecordDo) Offset(offset int) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slaughterReceiveRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slaughterReceiveRecordDo) Unscoped() ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slaughterReceiveRecordDo) Create(values ...*warehouse.SlaughterReceiveRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slaughterReceiveRecordDo) CreateInBatches(values []*warehouse.SlaughterReceiveRecord, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slaughterReceiveRecordDo) Save(values ...*warehouse.SlaughterReceiveRecord) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slaughterReceiveRecordDo) First() (*warehouse.SlaughterReceiveRecord, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterReceiveRecord), nil
	}
}

func (s slaughterReceiveRecordDo) Take() (*warehouse.SlaughterReceiveRecord, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterReceiveRecord), nil
	}
}

func (s slaughterReceiveRecordDo) Last() (*warehouse.SlaughterReceiveRecord, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterReceiveRecord), nil
	}
}

func (s slaughterReceiveRecordDo) Find() ([]*warehouse.SlaughterReceiveRecord, error) {
	result, err := s.DO.Find()
	return result.([]*warehouse.SlaughterReceiveRecord), err
}

func (s slaughterReceiveRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*warehouse.SlaughterReceiveRecord, err error) {
	buf := make([]*warehouse.SlaughterReceiveRecord, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slaughterReceiveRecordDo) FindInBatches(result *[]*warehouse.SlaughterReceiveRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slaughterReceiveRecordDo) Attrs(attrs ...field.AssignExpr) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slaughterReceiveRecordDo) Assign(attrs ...field.AssignExpr) ISlaughterReceiveRecordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slaughterReceiveRecordDo) Joins(fields ...field.RelationField) ISlaughterReceiveRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slaughterReceiveRecordDo) Preload(fields ...field.RelationField) ISlaughterReceiveRecordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slaughterReceiveRecordDo) FirstOrInit() (*warehouse.SlaughterReceiveRecord, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterReceiveRecord), nil
	}
}

func (s slaughterReceiveRecordDo) FirstOrCreate() (*warehouse.SlaughterReceiveRecord, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*warehouse.SlaughterReceiveRecord), nil
	}
}

func (s slaughterReceiveRecordDo) FindByPage(offset int, limit int) (result []*warehouse.SlaughterReceiveRecord, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slaughterReceiveRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slaughterReceiveRecordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slaughterReceiveRecordDo) Delete(models ...*warehouse.SlaughterReceiveRecord) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slaughterReceiveRecordDo) withDO(do gen.Dao) *slaughterReceiveRecordDo {
	s.DO = *do.(*gen.DO)
	return s
}
