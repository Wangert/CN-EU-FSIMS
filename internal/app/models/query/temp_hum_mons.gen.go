// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTempHumMon(db *gorm.DB, opts ...gen.DOOption) tempHumMon {
	_tempHumMon := tempHumMon{}

	_tempHumMon.tempHumMonDo.UseDB(db, opts...)
	_tempHumMon.tempHumMonDo.UseModel(&slaughter.TempHumMon{})

	tableName := _tempHumMon.tempHumMonDo.TableName()
	_tempHumMon.ALL = field.NewAsterisk(tableName)
	_tempHumMon.ID = field.NewUint(tableName, "id")
	_tempHumMon.CreatedAt = field.NewTime(tableName, "created_at")
	_tempHumMon.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tempHumMon.DeletedAt = field.NewField(tableName, "deleted_at")
	_tempHumMon.SlaInfoMonID = field.NewUint(tableName, "sla_info_mon_id")
	_tempHumMon.TempHumMon1 = field.NewFloat32(tableName, "temp_hum_mon1")
	_tempHumMon.TempHumMon2 = field.NewFloat32(tableName, "temp_hum_mon2")
	_tempHumMon.TempHumMon3 = field.NewFloat32(tableName, "temp_hum_mon3")
	_tempHumMon.TempHumMon4 = field.NewFloat32(tableName, "temp_hum_mon4")
	_tempHumMon.TempHumMon5 = field.NewFloat32(tableName, "temp_hum_mon5")
	_tempHumMon.TempHumMon6 = field.NewFloat32(tableName, "temp_hum_mon6")
	_tempHumMon.TempHumMon7 = field.NewFloat32(tableName, "temp_hum_mon7")
	_tempHumMon.TempHumMon8 = field.NewFloat32(tableName, "temp_hum_mon8")
	_tempHumMon.TempHumMon9 = field.NewFloat32(tableName, "temp_hum_mon9")
	_tempHumMon.TempHumMon10 = field.NewFloat32(tableName, "temp_hum_mon10")
	_tempHumMon.TempHumMon11 = field.NewFloat32(tableName, "temp_hum_mon11")
	_tempHumMon.TempHumMon12 = field.NewFloat32(tableName, "temp_hum_mon12")
	_tempHumMon.TempHumMon13 = field.NewFloat32(tableName, "temp_hum_mon13")
	_tempHumMon.TempHumMon14 = field.NewFloat32(tableName, "temp_hum_mon14")
	_tempHumMon.TempHumMon15 = field.NewFloat32(tableName, "temp_hum_mon15")
	_tempHumMon.TempHumMon16 = field.NewFloat32(tableName, "temp_hum_mon16")

	_tempHumMon.fillFieldMap()

	return _tempHumMon
}

type tempHumMon struct {
	tempHumMonDo tempHumMonDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	SlaInfoMonID field.Uint
	TempHumMon1  field.Float32
	TempHumMon2  field.Float32
	TempHumMon3  field.Float32
	TempHumMon4  field.Float32
	TempHumMon5  field.Float32
	TempHumMon6  field.Float32
	TempHumMon7  field.Float32
	TempHumMon8  field.Float32
	TempHumMon9  field.Float32
	TempHumMon10 field.Float32
	TempHumMon11 field.Float32
	TempHumMon12 field.Float32
	TempHumMon13 field.Float32
	TempHumMon14 field.Float32
	TempHumMon15 field.Float32
	TempHumMon16 field.Float32

	fieldMap map[string]field.Expr
}

func (t tempHumMon) Table(newTableName string) *tempHumMon {
	t.tempHumMonDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tempHumMon) As(alias string) *tempHumMon {
	t.tempHumMonDo.DO = *(t.tempHumMonDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tempHumMon) updateTableName(table string) *tempHumMon {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.SlaInfoMonID = field.NewUint(table, "sla_info_mon_id")
	t.TempHumMon1 = field.NewFloat32(table, "temp_hum_mon1")
	t.TempHumMon2 = field.NewFloat32(table, "temp_hum_mon2")
	t.TempHumMon3 = field.NewFloat32(table, "temp_hum_mon3")
	t.TempHumMon4 = field.NewFloat32(table, "temp_hum_mon4")
	t.TempHumMon5 = field.NewFloat32(table, "temp_hum_mon5")
	t.TempHumMon6 = field.NewFloat32(table, "temp_hum_mon6")
	t.TempHumMon7 = field.NewFloat32(table, "temp_hum_mon7")
	t.TempHumMon8 = field.NewFloat32(table, "temp_hum_mon8")
	t.TempHumMon9 = field.NewFloat32(table, "temp_hum_mon9")
	t.TempHumMon10 = field.NewFloat32(table, "temp_hum_mon10")
	t.TempHumMon11 = field.NewFloat32(table, "temp_hum_mon11")
	t.TempHumMon12 = field.NewFloat32(table, "temp_hum_mon12")
	t.TempHumMon13 = field.NewFloat32(table, "temp_hum_mon13")
	t.TempHumMon14 = field.NewFloat32(table, "temp_hum_mon14")
	t.TempHumMon15 = field.NewFloat32(table, "temp_hum_mon15")
	t.TempHumMon16 = field.NewFloat32(table, "temp_hum_mon16")

	t.fillFieldMap()

	return t
}

func (t *tempHumMon) WithContext(ctx context.Context) ITempHumMonDo {
	return t.tempHumMonDo.WithContext(ctx)
}

func (t tempHumMon) TableName() string { return t.tempHumMonDo.TableName() }

func (t tempHumMon) Alias() string { return t.tempHumMonDo.Alias() }

func (t tempHumMon) Columns(cols ...field.Expr) gen.Columns { return t.tempHumMonDo.Columns(cols...) }

func (t *tempHumMon) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tempHumMon) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 21)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["sla_info_mon_id"] = t.SlaInfoMonID
	t.fieldMap["temp_hum_mon1"] = t.TempHumMon1
	t.fieldMap["temp_hum_mon2"] = t.TempHumMon2
	t.fieldMap["temp_hum_mon3"] = t.TempHumMon3
	t.fieldMap["temp_hum_mon4"] = t.TempHumMon4
	t.fieldMap["temp_hum_mon5"] = t.TempHumMon5
	t.fieldMap["temp_hum_mon6"] = t.TempHumMon6
	t.fieldMap["temp_hum_mon7"] = t.TempHumMon7
	t.fieldMap["temp_hum_mon8"] = t.TempHumMon8
	t.fieldMap["temp_hum_mon9"] = t.TempHumMon9
	t.fieldMap["temp_hum_mon10"] = t.TempHumMon10
	t.fieldMap["temp_hum_mon11"] = t.TempHumMon11
	t.fieldMap["temp_hum_mon12"] = t.TempHumMon12
	t.fieldMap["temp_hum_mon13"] = t.TempHumMon13
	t.fieldMap["temp_hum_mon14"] = t.TempHumMon14
	t.fieldMap["temp_hum_mon15"] = t.TempHumMon15
	t.fieldMap["temp_hum_mon16"] = t.TempHumMon16
}

func (t tempHumMon) clone(db *gorm.DB) tempHumMon {
	t.tempHumMonDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tempHumMon) replaceDB(db *gorm.DB) tempHumMon {
	t.tempHumMonDo.ReplaceDB(db)
	return t
}

type tempHumMonDo struct{ gen.DO }

type ITempHumMonDo interface {
	gen.SubQuery
	Debug() ITempHumMonDo
	WithContext(ctx context.Context) ITempHumMonDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITempHumMonDo
	WriteDB() ITempHumMonDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITempHumMonDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITempHumMonDo
	Not(conds ...gen.Condition) ITempHumMonDo
	Or(conds ...gen.Condition) ITempHumMonDo
	Select(conds ...field.Expr) ITempHumMonDo
	Where(conds ...gen.Condition) ITempHumMonDo
	Order(conds ...field.Expr) ITempHumMonDo
	Distinct(cols ...field.Expr) ITempHumMonDo
	Omit(cols ...field.Expr) ITempHumMonDo
	Join(table schema.Tabler, on ...field.Expr) ITempHumMonDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITempHumMonDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITempHumMonDo
	Group(cols ...field.Expr) ITempHumMonDo
	Having(conds ...gen.Condition) ITempHumMonDo
	Limit(limit int) ITempHumMonDo
	Offset(offset int) ITempHumMonDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITempHumMonDo
	Unscoped() ITempHumMonDo
	Create(values ...*slaughter.TempHumMon) error
	CreateInBatches(values []*slaughter.TempHumMon, batchSize int) error
	Save(values ...*slaughter.TempHumMon) error
	First() (*slaughter.TempHumMon, error)
	Take() (*slaughter.TempHumMon, error)
	Last() (*slaughter.TempHumMon, error)
	Find() ([]*slaughter.TempHumMon, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.TempHumMon, err error)
	FindInBatches(result *[]*slaughter.TempHumMon, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.TempHumMon) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITempHumMonDo
	Assign(attrs ...field.AssignExpr) ITempHumMonDo
	Joins(fields ...field.RelationField) ITempHumMonDo
	Preload(fields ...field.RelationField) ITempHumMonDo
	FirstOrInit() (*slaughter.TempHumMon, error)
	FirstOrCreate() (*slaughter.TempHumMon, error)
	FindByPage(offset int, limit int) (result []*slaughter.TempHumMon, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITempHumMonDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tempHumMonDo) Debug() ITempHumMonDo {
	return t.withDO(t.DO.Debug())
}

func (t tempHumMonDo) WithContext(ctx context.Context) ITempHumMonDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tempHumMonDo) ReadDB() ITempHumMonDo {
	return t.Clauses(dbresolver.Read)
}

func (t tempHumMonDo) WriteDB() ITempHumMonDo {
	return t.Clauses(dbresolver.Write)
}

func (t tempHumMonDo) Session(config *gorm.Session) ITempHumMonDo {
	return t.withDO(t.DO.Session(config))
}

func (t tempHumMonDo) Clauses(conds ...clause.Expression) ITempHumMonDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tempHumMonDo) Returning(value interface{}, columns ...string) ITempHumMonDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tempHumMonDo) Not(conds ...gen.Condition) ITempHumMonDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tempHumMonDo) Or(conds ...gen.Condition) ITempHumMonDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tempHumMonDo) Select(conds ...field.Expr) ITempHumMonDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tempHumMonDo) Where(conds ...gen.Condition) ITempHumMonDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tempHumMonDo) Order(conds ...field.Expr) ITempHumMonDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tempHumMonDo) Distinct(cols ...field.Expr) ITempHumMonDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tempHumMonDo) Omit(cols ...field.Expr) ITempHumMonDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tempHumMonDo) Join(table schema.Tabler, on ...field.Expr) ITempHumMonDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tempHumMonDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITempHumMonDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tempHumMonDo) RightJoin(table schema.Tabler, on ...field.Expr) ITempHumMonDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tempHumMonDo) Group(cols ...field.Expr) ITempHumMonDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tempHumMonDo) Having(conds ...gen.Condition) ITempHumMonDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tempHumMonDo) Limit(limit int) ITempHumMonDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tempHumMonDo) Offset(offset int) ITempHumMonDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tempHumMonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITempHumMonDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tempHumMonDo) Unscoped() ITempHumMonDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tempHumMonDo) Create(values ...*slaughter.TempHumMon) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tempHumMonDo) CreateInBatches(values []*slaughter.TempHumMon, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tempHumMonDo) Save(values ...*slaughter.TempHumMon) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tempHumMonDo) First() (*slaughter.TempHumMon, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.TempHumMon), nil
	}
}

func (t tempHumMonDo) Take() (*slaughter.TempHumMon, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.TempHumMon), nil
	}
}

func (t tempHumMonDo) Last() (*slaughter.TempHumMon, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.TempHumMon), nil
	}
}

func (t tempHumMonDo) Find() ([]*slaughter.TempHumMon, error) {
	result, err := t.DO.Find()
	return result.([]*slaughter.TempHumMon), err
}

func (t tempHumMonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.TempHumMon, err error) {
	buf := make([]*slaughter.TempHumMon, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tempHumMonDo) FindInBatches(result *[]*slaughter.TempHumMon, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tempHumMonDo) Attrs(attrs ...field.AssignExpr) ITempHumMonDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tempHumMonDo) Assign(attrs ...field.AssignExpr) ITempHumMonDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tempHumMonDo) Joins(fields ...field.RelationField) ITempHumMonDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tempHumMonDo) Preload(fields ...field.RelationField) ITempHumMonDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tempHumMonDo) FirstOrInit() (*slaughter.TempHumMon, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.TempHumMon), nil
	}
}

func (t tempHumMonDo) FirstOrCreate() (*slaughter.TempHumMon, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.TempHumMon), nil
	}
}

func (t tempHumMonDo) FindByPage(offset int, limit int) (result []*slaughter.TempHumMon, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tempHumMonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tempHumMonDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tempHumMonDo) Delete(models ...*slaughter.TempHumMon) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tempHumMonDo) withDO(do gen.Dao) *tempHumMonDo {
	t.DO = *do.(*gen.DO)
	return t
}
