// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTotalWasteResidueSlaughterPerDay(db *gorm.DB, opts ...gen.DOOption) totalWasteResidueSlaughterPerDay {
	_totalWasteResidueSlaughterPerDay := totalWasteResidueSlaughterPerDay{}

	_totalWasteResidueSlaughterPerDay.totalWasteResidueSlaughterPerDayDo.UseDB(db, opts...)
	_totalWasteResidueSlaughterPerDay.totalWasteResidueSlaughterPerDayDo.UseModel(&slaughter.TotalWasteResidueSlaughterPerDay{})

	tableName := _totalWasteResidueSlaughterPerDay.totalWasteResidueSlaughterPerDayDo.TableName()
	_totalWasteResidueSlaughterPerDay.ALL = field.NewAsterisk(tableName)
	_totalWasteResidueSlaughterPerDay.ID = field.NewUint(tableName, "id")
	_totalWasteResidueSlaughterPerDay.CreatedAt = field.NewTime(tableName, "created_at")
	_totalWasteResidueSlaughterPerDay.UpdatedAt = field.NewTime(tableName, "updated_at")
	_totalWasteResidueSlaughterPerDay.DeletedAt = field.NewField(tableName, "deleted_at")
	_totalWasteResidueSlaughterPerDay.TimeStamp = field.NewTime(tableName, "time_stamp")
	_totalWasteResidueSlaughterPerDay.HouseNumber = field.NewString(tableName, "house_number")
	_totalWasteResidueSlaughterPerDay.TotalWasteResidueSlaughterPerDay1 = field.NewFloat32(tableName, "total_waste_residue_slaughter_per_day1")
	_totalWasteResidueSlaughterPerDay.TotalWasteResidueSlaughterPerDay2 = field.NewFloat32(tableName, "total_waste_residue_slaughter_per_day2")
	_totalWasteResidueSlaughterPerDay.TotalWasteResidueSlaughterPerDay3 = field.NewFloat32(tableName, "total_waste_residue_slaughter_per_day3")
	_totalWasteResidueSlaughterPerDay.TotalWasteResidueSlaughterPerDay4 = field.NewFloat32(tableName, "total_waste_residue_slaughter_per_day4")

	_totalWasteResidueSlaughterPerDay.fillFieldMap()

	return _totalWasteResidueSlaughterPerDay
}

type totalWasteResidueSlaughterPerDay struct {
	totalWasteResidueSlaughterPerDayDo totalWasteResidueSlaughterPerDayDo

	ALL                               field.Asterisk
	ID                                field.Uint
	CreatedAt                         field.Time
	UpdatedAt                         field.Time
	DeletedAt                         field.Field
	TimeStamp                         field.Time
	HouseNumber                       field.String
	TotalWasteResidueSlaughterPerDay1 field.Float32
	TotalWasteResidueSlaughterPerDay2 field.Float32
	TotalWasteResidueSlaughterPerDay3 field.Float32
	TotalWasteResidueSlaughterPerDay4 field.Float32

	fieldMap map[string]field.Expr
}

func (t totalWasteResidueSlaughterPerDay) Table(newTableName string) *totalWasteResidueSlaughterPerDay {
	t.totalWasteResidueSlaughterPerDayDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t totalWasteResidueSlaughterPerDay) As(alias string) *totalWasteResidueSlaughterPerDay {
	t.totalWasteResidueSlaughterPerDayDo.DO = *(t.totalWasteResidueSlaughterPerDayDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *totalWasteResidueSlaughterPerDay) updateTableName(table string) *totalWasteResidueSlaughterPerDay {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.TimeStamp = field.NewTime(table, "time_stamp")
	t.HouseNumber = field.NewString(table, "house_number")
	t.TotalWasteResidueSlaughterPerDay1 = field.NewFloat32(table, "total_waste_residue_slaughter_per_day1")
	t.TotalWasteResidueSlaughterPerDay2 = field.NewFloat32(table, "total_waste_residue_slaughter_per_day2")
	t.TotalWasteResidueSlaughterPerDay3 = field.NewFloat32(table, "total_waste_residue_slaughter_per_day3")
	t.TotalWasteResidueSlaughterPerDay4 = field.NewFloat32(table, "total_waste_residue_slaughter_per_day4")

	t.fillFieldMap()

	return t
}

func (t *totalWasteResidueSlaughterPerDay) WithContext(ctx context.Context) ITotalWasteResidueSlaughterPerDayDo {
	return t.totalWasteResidueSlaughterPerDayDo.WithContext(ctx)
}

func (t totalWasteResidueSlaughterPerDay) TableName() string {
	return t.totalWasteResidueSlaughterPerDayDo.TableName()
}

func (t totalWasteResidueSlaughterPerDay) Alias() string {
	return t.totalWasteResidueSlaughterPerDayDo.Alias()
}

func (t totalWasteResidueSlaughterPerDay) Columns(cols ...field.Expr) gen.Columns {
	return t.totalWasteResidueSlaughterPerDayDo.Columns(cols...)
}

func (t *totalWasteResidueSlaughterPerDay) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *totalWasteResidueSlaughterPerDay) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["time_stamp"] = t.TimeStamp
	t.fieldMap["house_number"] = t.HouseNumber
	t.fieldMap["total_waste_residue_slaughter_per_day1"] = t.TotalWasteResidueSlaughterPerDay1
	t.fieldMap["total_waste_residue_slaughter_per_day2"] = t.TotalWasteResidueSlaughterPerDay2
	t.fieldMap["total_waste_residue_slaughter_per_day3"] = t.TotalWasteResidueSlaughterPerDay3
	t.fieldMap["total_waste_residue_slaughter_per_day4"] = t.TotalWasteResidueSlaughterPerDay4
}

func (t totalWasteResidueSlaughterPerDay) clone(db *gorm.DB) totalWasteResidueSlaughterPerDay {
	t.totalWasteResidueSlaughterPerDayDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t totalWasteResidueSlaughterPerDay) replaceDB(db *gorm.DB) totalWasteResidueSlaughterPerDay {
	t.totalWasteResidueSlaughterPerDayDo.ReplaceDB(db)
	return t
}

type totalWasteResidueSlaughterPerDayDo struct{ gen.DO }

type ITotalWasteResidueSlaughterPerDayDo interface {
	gen.SubQuery
	Debug() ITotalWasteResidueSlaughterPerDayDo
	WithContext(ctx context.Context) ITotalWasteResidueSlaughterPerDayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITotalWasteResidueSlaughterPerDayDo
	WriteDB() ITotalWasteResidueSlaughterPerDayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITotalWasteResidueSlaughterPerDayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITotalWasteResidueSlaughterPerDayDo
	Not(conds ...gen.Condition) ITotalWasteResidueSlaughterPerDayDo
	Or(conds ...gen.Condition) ITotalWasteResidueSlaughterPerDayDo
	Select(conds ...field.Expr) ITotalWasteResidueSlaughterPerDayDo
	Where(conds ...gen.Condition) ITotalWasteResidueSlaughterPerDayDo
	Order(conds ...field.Expr) ITotalWasteResidueSlaughterPerDayDo
	Distinct(cols ...field.Expr) ITotalWasteResidueSlaughterPerDayDo
	Omit(cols ...field.Expr) ITotalWasteResidueSlaughterPerDayDo
	Join(table schema.Tabler, on ...field.Expr) ITotalWasteResidueSlaughterPerDayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITotalWasteResidueSlaughterPerDayDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITotalWasteResidueSlaughterPerDayDo
	Group(cols ...field.Expr) ITotalWasteResidueSlaughterPerDayDo
	Having(conds ...gen.Condition) ITotalWasteResidueSlaughterPerDayDo
	Limit(limit int) ITotalWasteResidueSlaughterPerDayDo
	Offset(offset int) ITotalWasteResidueSlaughterPerDayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITotalWasteResidueSlaughterPerDayDo
	Unscoped() ITotalWasteResidueSlaughterPerDayDo
	Create(values ...*slaughter.TotalWasteResidueSlaughterPerDay) error
	CreateInBatches(values []*slaughter.TotalWasteResidueSlaughterPerDay, batchSize int) error
	Save(values ...*slaughter.TotalWasteResidueSlaughterPerDay) error
	First() (*slaughter.TotalWasteResidueSlaughterPerDay, error)
	Take() (*slaughter.TotalWasteResidueSlaughterPerDay, error)
	Last() (*slaughter.TotalWasteResidueSlaughterPerDay, error)
	Find() ([]*slaughter.TotalWasteResidueSlaughterPerDay, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.TotalWasteResidueSlaughterPerDay, err error)
	FindInBatches(result *[]*slaughter.TotalWasteResidueSlaughterPerDay, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.TotalWasteResidueSlaughterPerDay) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITotalWasteResidueSlaughterPerDayDo
	Assign(attrs ...field.AssignExpr) ITotalWasteResidueSlaughterPerDayDo
	Joins(fields ...field.RelationField) ITotalWasteResidueSlaughterPerDayDo
	Preload(fields ...field.RelationField) ITotalWasteResidueSlaughterPerDayDo
	FirstOrInit() (*slaughter.TotalWasteResidueSlaughterPerDay, error)
	FirstOrCreate() (*slaughter.TotalWasteResidueSlaughterPerDay, error)
	FindByPage(offset int, limit int) (result []*slaughter.TotalWasteResidueSlaughterPerDay, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITotalWasteResidueSlaughterPerDayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t totalWasteResidueSlaughterPerDayDo) Debug() ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Debug())
}

func (t totalWasteResidueSlaughterPerDayDo) WithContext(ctx context.Context) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t totalWasteResidueSlaughterPerDayDo) ReadDB() ITotalWasteResidueSlaughterPerDayDo {
	return t.Clauses(dbresolver.Read)
}

func (t totalWasteResidueSlaughterPerDayDo) WriteDB() ITotalWasteResidueSlaughterPerDayDo {
	return t.Clauses(dbresolver.Write)
}

func (t totalWasteResidueSlaughterPerDayDo) Session(config *gorm.Session) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Session(config))
}

func (t totalWasteResidueSlaughterPerDayDo) Clauses(conds ...clause.Expression) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t totalWasteResidueSlaughterPerDayDo) Returning(value interface{}, columns ...string) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t totalWasteResidueSlaughterPerDayDo) Not(conds ...gen.Condition) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t totalWasteResidueSlaughterPerDayDo) Or(conds ...gen.Condition) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t totalWasteResidueSlaughterPerDayDo) Select(conds ...field.Expr) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t totalWasteResidueSlaughterPerDayDo) Where(conds ...gen.Condition) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t totalWasteResidueSlaughterPerDayDo) Order(conds ...field.Expr) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t totalWasteResidueSlaughterPerDayDo) Distinct(cols ...field.Expr) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t totalWasteResidueSlaughterPerDayDo) Omit(cols ...field.Expr) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t totalWasteResidueSlaughterPerDayDo) Join(table schema.Tabler, on ...field.Expr) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t totalWasteResidueSlaughterPerDayDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t totalWasteResidueSlaughterPerDayDo) RightJoin(table schema.Tabler, on ...field.Expr) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t totalWasteResidueSlaughterPerDayDo) Group(cols ...field.Expr) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t totalWasteResidueSlaughterPerDayDo) Having(conds ...gen.Condition) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t totalWasteResidueSlaughterPerDayDo) Limit(limit int) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t totalWasteResidueSlaughterPerDayDo) Offset(offset int) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t totalWasteResidueSlaughterPerDayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t totalWasteResidueSlaughterPerDayDo) Unscoped() ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Unscoped())
}

func (t totalWasteResidueSlaughterPerDayDo) Create(values ...*slaughter.TotalWasteResidueSlaughterPerDay) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t totalWasteResidueSlaughterPerDayDo) CreateInBatches(values []*slaughter.TotalWasteResidueSlaughterPerDay, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t totalWasteResidueSlaughterPerDayDo) Save(values ...*slaughter.TotalWasteResidueSlaughterPerDay) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t totalWasteResidueSlaughterPerDayDo) First() (*slaughter.TotalWasteResidueSlaughterPerDay, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.TotalWasteResidueSlaughterPerDay), nil
	}
}

func (t totalWasteResidueSlaughterPerDayDo) Take() (*slaughter.TotalWasteResidueSlaughterPerDay, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.TotalWasteResidueSlaughterPerDay), nil
	}
}

func (t totalWasteResidueSlaughterPerDayDo) Last() (*slaughter.TotalWasteResidueSlaughterPerDay, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.TotalWasteResidueSlaughterPerDay), nil
	}
}

func (t totalWasteResidueSlaughterPerDayDo) Find() ([]*slaughter.TotalWasteResidueSlaughterPerDay, error) {
	result, err := t.DO.Find()
	return result.([]*slaughter.TotalWasteResidueSlaughterPerDay), err
}

func (t totalWasteResidueSlaughterPerDayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.TotalWasteResidueSlaughterPerDay, err error) {
	buf := make([]*slaughter.TotalWasteResidueSlaughterPerDay, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t totalWasteResidueSlaughterPerDayDo) FindInBatches(result *[]*slaughter.TotalWasteResidueSlaughterPerDay, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t totalWasteResidueSlaughterPerDayDo) Attrs(attrs ...field.AssignExpr) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t totalWasteResidueSlaughterPerDayDo) Assign(attrs ...field.AssignExpr) ITotalWasteResidueSlaughterPerDayDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t totalWasteResidueSlaughterPerDayDo) Joins(fields ...field.RelationField) ITotalWasteResidueSlaughterPerDayDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t totalWasteResidueSlaughterPerDayDo) Preload(fields ...field.RelationField) ITotalWasteResidueSlaughterPerDayDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t totalWasteResidueSlaughterPerDayDo) FirstOrInit() (*slaughter.TotalWasteResidueSlaughterPerDay, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.TotalWasteResidueSlaughterPerDay), nil
	}
}

func (t totalWasteResidueSlaughterPerDayDo) FirstOrCreate() (*slaughter.TotalWasteResidueSlaughterPerDay, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.TotalWasteResidueSlaughterPerDay), nil
	}
}

func (t totalWasteResidueSlaughterPerDayDo) FindByPage(offset int, limit int) (result []*slaughter.TotalWasteResidueSlaughterPerDay, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t totalWasteResidueSlaughterPerDayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t totalWasteResidueSlaughterPerDayDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t totalWasteResidueSlaughterPerDayDo) Delete(models ...*slaughter.TotalWasteResidueSlaughterPerDay) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *totalWasteResidueSlaughterPerDayDo) withDO(do gen.Dao) *totalWasteResidueSlaughterPerDayDo {
	t.DO = *do.(*gen.DO)
	return t
}
