// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/premortem"
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newChiledFreshIndex(db *gorm.DB, opts ...gen.DOOption) chiledFreshIndex {
	_chiledFreshIndex := chiledFreshIndex{}

	_chiledFreshIndex.chiledFreshIndexDo.UseDB(db, opts...)
	_chiledFreshIndex.chiledFreshIndexDo.UseModel(&slaughter.ChiledFreshIndex{})

	tableName := _chiledFreshIndex.chiledFreshIndexDo.TableName()
	_chiledFreshIndex.ALL = field.NewAsterisk(tableName)
	_chiledFreshIndex.ID = field.NewUint(tableName, "id")
	_chiledFreshIndex.CreatedAt = field.NewTime(tableName, "created_at")
	_chiledFreshIndex.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chiledFreshIndex.DeletedAt = field.NewField(tableName, "deleted_at")
	_chiledFreshIndex.TimeRecordAt = field.NewString(tableName, "time_record_at")
	_chiledFreshIndex.TranTemp = field.NewFloat32(tableName, "tran_temp")
	_chiledFreshIndex.PaGerm = chiledFreshIndexHasOnePaGerm{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PaGerm", "slaughter.PaGerm"),
	}

	_chiledFreshIndex.OtherIndex = chiledFreshIndexHasOneOtherIndex{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("OtherIndex", "slaughter.OtherIndex"),
	}

	_chiledFreshIndex.DrugsResi = chiledFreshIndexHasOneDrugsResi{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("DrugsResi", "slaughter.DrugsResi"),
	}

	_chiledFreshIndex.Gps = chiledFreshIndexHasOneGps{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Gps", "premortem.Gps"),
	}

	_chiledFreshIndex.fillFieldMap()

	return _chiledFreshIndex
}

type chiledFreshIndex struct {
	chiledFreshIndexDo chiledFreshIndexDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	TimeRecordAt field.String
	TranTemp     field.Float32
	PaGerm       chiledFreshIndexHasOnePaGerm

	OtherIndex chiledFreshIndexHasOneOtherIndex

	DrugsResi chiledFreshIndexHasOneDrugsResi

	Gps chiledFreshIndexHasOneGps

	fieldMap map[string]field.Expr
}

func (c chiledFreshIndex) Table(newTableName string) *chiledFreshIndex {
	c.chiledFreshIndexDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chiledFreshIndex) As(alias string) *chiledFreshIndex {
	c.chiledFreshIndexDo.DO = *(c.chiledFreshIndexDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chiledFreshIndex) updateTableName(table string) *chiledFreshIndex {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.TimeRecordAt = field.NewString(table, "time_record_at")
	c.TranTemp = field.NewFloat32(table, "tran_temp")

	c.fillFieldMap()

	return c
}

func (c *chiledFreshIndex) WithContext(ctx context.Context) IChiledFreshIndexDo {
	return c.chiledFreshIndexDo.WithContext(ctx)
}

func (c chiledFreshIndex) TableName() string { return c.chiledFreshIndexDo.TableName() }

func (c chiledFreshIndex) Alias() string { return c.chiledFreshIndexDo.Alias() }

func (c chiledFreshIndex) Columns(cols ...field.Expr) gen.Columns {
	return c.chiledFreshIndexDo.Columns(cols...)
}

func (c *chiledFreshIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chiledFreshIndex) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["time_record_at"] = c.TimeRecordAt
	c.fieldMap["tran_temp"] = c.TranTemp

}

func (c chiledFreshIndex) clone(db *gorm.DB) chiledFreshIndex {
	c.chiledFreshIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chiledFreshIndex) replaceDB(db *gorm.DB) chiledFreshIndex {
	c.chiledFreshIndexDo.ReplaceDB(db)
	return c
}

type chiledFreshIndexHasOnePaGerm struct {
	db *gorm.DB

	field.RelationField
}

func (a chiledFreshIndexHasOnePaGerm) Where(conds ...field.Expr) *chiledFreshIndexHasOnePaGerm {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a chiledFreshIndexHasOnePaGerm) WithContext(ctx context.Context) *chiledFreshIndexHasOnePaGerm {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a chiledFreshIndexHasOnePaGerm) Session(session *gorm.Session) *chiledFreshIndexHasOnePaGerm {
	a.db = a.db.Session(session)
	return &a
}

func (a chiledFreshIndexHasOnePaGerm) Model(m *slaughter.ChiledFreshIndex) *chiledFreshIndexHasOnePaGermTx {
	return &chiledFreshIndexHasOnePaGermTx{a.db.Model(m).Association(a.Name())}
}

type chiledFreshIndexHasOnePaGermTx struct{ tx *gorm.Association }

func (a chiledFreshIndexHasOnePaGermTx) Find() (result *slaughter.PaGerm, err error) {
	return result, a.tx.Find(&result)
}

func (a chiledFreshIndexHasOnePaGermTx) Append(values ...*slaughter.PaGerm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a chiledFreshIndexHasOnePaGermTx) Replace(values ...*slaughter.PaGerm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a chiledFreshIndexHasOnePaGermTx) Delete(values ...*slaughter.PaGerm) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a chiledFreshIndexHasOnePaGermTx) Clear() error {
	return a.tx.Clear()
}

func (a chiledFreshIndexHasOnePaGermTx) Count() int64 {
	return a.tx.Count()
}

type chiledFreshIndexHasOneOtherIndex struct {
	db *gorm.DB

	field.RelationField
}

func (a chiledFreshIndexHasOneOtherIndex) Where(conds ...field.Expr) *chiledFreshIndexHasOneOtherIndex {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a chiledFreshIndexHasOneOtherIndex) WithContext(ctx context.Context) *chiledFreshIndexHasOneOtherIndex {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a chiledFreshIndexHasOneOtherIndex) Session(session *gorm.Session) *chiledFreshIndexHasOneOtherIndex {
	a.db = a.db.Session(session)
	return &a
}

func (a chiledFreshIndexHasOneOtherIndex) Model(m *slaughter.ChiledFreshIndex) *chiledFreshIndexHasOneOtherIndexTx {
	return &chiledFreshIndexHasOneOtherIndexTx{a.db.Model(m).Association(a.Name())}
}

type chiledFreshIndexHasOneOtherIndexTx struct{ tx *gorm.Association }

func (a chiledFreshIndexHasOneOtherIndexTx) Find() (result *slaughter.OtherIndex, err error) {
	return result, a.tx.Find(&result)
}

func (a chiledFreshIndexHasOneOtherIndexTx) Append(values ...*slaughter.OtherIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a chiledFreshIndexHasOneOtherIndexTx) Replace(values ...*slaughter.OtherIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a chiledFreshIndexHasOneOtherIndexTx) Delete(values ...*slaughter.OtherIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a chiledFreshIndexHasOneOtherIndexTx) Clear() error {
	return a.tx.Clear()
}

func (a chiledFreshIndexHasOneOtherIndexTx) Count() int64 {
	return a.tx.Count()
}

type chiledFreshIndexHasOneDrugsResi struct {
	db *gorm.DB

	field.RelationField
}

func (a chiledFreshIndexHasOneDrugsResi) Where(conds ...field.Expr) *chiledFreshIndexHasOneDrugsResi {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a chiledFreshIndexHasOneDrugsResi) WithContext(ctx context.Context) *chiledFreshIndexHasOneDrugsResi {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a chiledFreshIndexHasOneDrugsResi) Session(session *gorm.Session) *chiledFreshIndexHasOneDrugsResi {
	a.db = a.db.Session(session)
	return &a
}

func (a chiledFreshIndexHasOneDrugsResi) Model(m *slaughter.ChiledFreshIndex) *chiledFreshIndexHasOneDrugsResiTx {
	return &chiledFreshIndexHasOneDrugsResiTx{a.db.Model(m).Association(a.Name())}
}

type chiledFreshIndexHasOneDrugsResiTx struct{ tx *gorm.Association }

func (a chiledFreshIndexHasOneDrugsResiTx) Find() (result *slaughter.DrugsResi, err error) {
	return result, a.tx.Find(&result)
}

func (a chiledFreshIndexHasOneDrugsResiTx) Append(values ...*slaughter.DrugsResi) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a chiledFreshIndexHasOneDrugsResiTx) Replace(values ...*slaughter.DrugsResi) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a chiledFreshIndexHasOneDrugsResiTx) Delete(values ...*slaughter.DrugsResi) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a chiledFreshIndexHasOneDrugsResiTx) Clear() error {
	return a.tx.Clear()
}

func (a chiledFreshIndexHasOneDrugsResiTx) Count() int64 {
	return a.tx.Count()
}

type chiledFreshIndexHasOneGps struct {
	db *gorm.DB

	field.RelationField
}

func (a chiledFreshIndexHasOneGps) Where(conds ...field.Expr) *chiledFreshIndexHasOneGps {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a chiledFreshIndexHasOneGps) WithContext(ctx context.Context) *chiledFreshIndexHasOneGps {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a chiledFreshIndexHasOneGps) Session(session *gorm.Session) *chiledFreshIndexHasOneGps {
	a.db = a.db.Session(session)
	return &a
}

func (a chiledFreshIndexHasOneGps) Model(m *slaughter.ChiledFreshIndex) *chiledFreshIndexHasOneGpsTx {
	return &chiledFreshIndexHasOneGpsTx{a.db.Model(m).Association(a.Name())}
}

type chiledFreshIndexHasOneGpsTx struct{ tx *gorm.Association }

func (a chiledFreshIndexHasOneGpsTx) Find() (result *premortem.Gps, err error) {
	return result, a.tx.Find(&result)
}

func (a chiledFreshIndexHasOneGpsTx) Append(values ...*premortem.Gps) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a chiledFreshIndexHasOneGpsTx) Replace(values ...*premortem.Gps) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a chiledFreshIndexHasOneGpsTx) Delete(values ...*premortem.Gps) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a chiledFreshIndexHasOneGpsTx) Clear() error {
	return a.tx.Clear()
}

func (a chiledFreshIndexHasOneGpsTx) Count() int64 {
	return a.tx.Count()
}

type chiledFreshIndexDo struct{ gen.DO }

type IChiledFreshIndexDo interface {
	gen.SubQuery
	Debug() IChiledFreshIndexDo
	WithContext(ctx context.Context) IChiledFreshIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChiledFreshIndexDo
	WriteDB() IChiledFreshIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChiledFreshIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChiledFreshIndexDo
	Not(conds ...gen.Condition) IChiledFreshIndexDo
	Or(conds ...gen.Condition) IChiledFreshIndexDo
	Select(conds ...field.Expr) IChiledFreshIndexDo
	Where(conds ...gen.Condition) IChiledFreshIndexDo
	Order(conds ...field.Expr) IChiledFreshIndexDo
	Distinct(cols ...field.Expr) IChiledFreshIndexDo
	Omit(cols ...field.Expr) IChiledFreshIndexDo
	Join(table schema.Tabler, on ...field.Expr) IChiledFreshIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChiledFreshIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChiledFreshIndexDo
	Group(cols ...field.Expr) IChiledFreshIndexDo
	Having(conds ...gen.Condition) IChiledFreshIndexDo
	Limit(limit int) IChiledFreshIndexDo
	Offset(offset int) IChiledFreshIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChiledFreshIndexDo
	Unscoped() IChiledFreshIndexDo
	Create(values ...*slaughter.ChiledFreshIndex) error
	CreateInBatches(values []*slaughter.ChiledFreshIndex, batchSize int) error
	Save(values ...*slaughter.ChiledFreshIndex) error
	First() (*slaughter.ChiledFreshIndex, error)
	Take() (*slaughter.ChiledFreshIndex, error)
	Last() (*slaughter.ChiledFreshIndex, error)
	Find() ([]*slaughter.ChiledFreshIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.ChiledFreshIndex, err error)
	FindInBatches(result *[]*slaughter.ChiledFreshIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.ChiledFreshIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChiledFreshIndexDo
	Assign(attrs ...field.AssignExpr) IChiledFreshIndexDo
	Joins(fields ...field.RelationField) IChiledFreshIndexDo
	Preload(fields ...field.RelationField) IChiledFreshIndexDo
	FirstOrInit() (*slaughter.ChiledFreshIndex, error)
	FirstOrCreate() (*slaughter.ChiledFreshIndex, error)
	FindByPage(offset int, limit int) (result []*slaughter.ChiledFreshIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChiledFreshIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c chiledFreshIndexDo) Debug() IChiledFreshIndexDo {
	return c.withDO(c.DO.Debug())
}

func (c chiledFreshIndexDo) WithContext(ctx context.Context) IChiledFreshIndexDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chiledFreshIndexDo) ReadDB() IChiledFreshIndexDo {
	return c.Clauses(dbresolver.Read)
}

func (c chiledFreshIndexDo) WriteDB() IChiledFreshIndexDo {
	return c.Clauses(dbresolver.Write)
}

func (c chiledFreshIndexDo) Session(config *gorm.Session) IChiledFreshIndexDo {
	return c.withDO(c.DO.Session(config))
}

func (c chiledFreshIndexDo) Clauses(conds ...clause.Expression) IChiledFreshIndexDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chiledFreshIndexDo) Returning(value interface{}, columns ...string) IChiledFreshIndexDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chiledFreshIndexDo) Not(conds ...gen.Condition) IChiledFreshIndexDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chiledFreshIndexDo) Or(conds ...gen.Condition) IChiledFreshIndexDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chiledFreshIndexDo) Select(conds ...field.Expr) IChiledFreshIndexDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chiledFreshIndexDo) Where(conds ...gen.Condition) IChiledFreshIndexDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chiledFreshIndexDo) Order(conds ...field.Expr) IChiledFreshIndexDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chiledFreshIndexDo) Distinct(cols ...field.Expr) IChiledFreshIndexDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chiledFreshIndexDo) Omit(cols ...field.Expr) IChiledFreshIndexDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chiledFreshIndexDo) Join(table schema.Tabler, on ...field.Expr) IChiledFreshIndexDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chiledFreshIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChiledFreshIndexDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chiledFreshIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IChiledFreshIndexDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chiledFreshIndexDo) Group(cols ...field.Expr) IChiledFreshIndexDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chiledFreshIndexDo) Having(conds ...gen.Condition) IChiledFreshIndexDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chiledFreshIndexDo) Limit(limit int) IChiledFreshIndexDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chiledFreshIndexDo) Offset(offset int) IChiledFreshIndexDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chiledFreshIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChiledFreshIndexDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chiledFreshIndexDo) Unscoped() IChiledFreshIndexDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chiledFreshIndexDo) Create(values ...*slaughter.ChiledFreshIndex) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chiledFreshIndexDo) CreateInBatches(values []*slaughter.ChiledFreshIndex, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chiledFreshIndexDo) Save(values ...*slaughter.ChiledFreshIndex) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chiledFreshIndexDo) First() (*slaughter.ChiledFreshIndex, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.ChiledFreshIndex), nil
	}
}

func (c chiledFreshIndexDo) Take() (*slaughter.ChiledFreshIndex, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.ChiledFreshIndex), nil
	}
}

func (c chiledFreshIndexDo) Last() (*slaughter.ChiledFreshIndex, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.ChiledFreshIndex), nil
	}
}

func (c chiledFreshIndexDo) Find() ([]*slaughter.ChiledFreshIndex, error) {
	result, err := c.DO.Find()
	return result.([]*slaughter.ChiledFreshIndex), err
}

func (c chiledFreshIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.ChiledFreshIndex, err error) {
	buf := make([]*slaughter.ChiledFreshIndex, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chiledFreshIndexDo) FindInBatches(result *[]*slaughter.ChiledFreshIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chiledFreshIndexDo) Attrs(attrs ...field.AssignExpr) IChiledFreshIndexDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chiledFreshIndexDo) Assign(attrs ...field.AssignExpr) IChiledFreshIndexDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chiledFreshIndexDo) Joins(fields ...field.RelationField) IChiledFreshIndexDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chiledFreshIndexDo) Preload(fields ...field.RelationField) IChiledFreshIndexDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chiledFreshIndexDo) FirstOrInit() (*slaughter.ChiledFreshIndex, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.ChiledFreshIndex), nil
	}
}

func (c chiledFreshIndexDo) FirstOrCreate() (*slaughter.ChiledFreshIndex, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.ChiledFreshIndex), nil
	}
}

func (c chiledFreshIndexDo) FindByPage(offset int, limit int) (result []*slaughter.ChiledFreshIndex, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chiledFreshIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chiledFreshIndexDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chiledFreshIndexDo) Delete(models ...*slaughter.ChiledFreshIndex) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chiledFreshIndexDo) withDO(do gen.Dao) *chiledFreshIndexDo {
	c.DO = *do.(*gen.DO)
	return c
}
