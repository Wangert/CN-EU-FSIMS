// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDrugsResi(db *gorm.DB, opts ...gen.DOOption) drugsResi {
	_drugsResi := drugsResi{}

	_drugsResi.drugsResiDo.UseDB(db, opts...)
	_drugsResi.drugsResiDo.UseModel(&slaughter.DrugsResi{})

	tableName := _drugsResi.drugsResiDo.TableName()
	_drugsResi.ALL = field.NewAsterisk(tableName)
	_drugsResi.ID = field.NewUint(tableName, "id")
	_drugsResi.CreatedAt = field.NewTime(tableName, "created_at")
	_drugsResi.UpdatedAt = field.NewTime(tableName, "updated_at")
	_drugsResi.DeletedAt = field.NewField(tableName, "deleted_at")
	_drugsResi.ChiledFreshIndexID = field.NewUint(tableName, "chiled_fresh_index_id")
	_drugsResi.DrugsResi1 = field.NewFloat32(tableName, "drugs_resi1")
	_drugsResi.DrugsResi2 = field.NewFloat32(tableName, "drugs_resi2")
	_drugsResi.DrugsResi3 = field.NewFloat32(tableName, "drugs_resi3")
	_drugsResi.DrugsResi4 = field.NewFloat32(tableName, "drugs_resi4")

	_drugsResi.fillFieldMap()

	return _drugsResi
}

type drugsResi struct {
	drugsResiDo drugsResiDo

	ALL                field.Asterisk
	ID                 field.Uint
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field
	ChiledFreshIndexID field.Uint
	DrugsResi1         field.Float32
	DrugsResi2         field.Float32
	DrugsResi3         field.Float32
	DrugsResi4         field.Float32

	fieldMap map[string]field.Expr
}

func (d drugsResi) Table(newTableName string) *drugsResi {
	d.drugsResiDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d drugsResi) As(alias string) *drugsResi {
	d.drugsResiDo.DO = *(d.drugsResiDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *drugsResi) updateTableName(table string) *drugsResi {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.ChiledFreshIndexID = field.NewUint(table, "chiled_fresh_index_id")
	d.DrugsResi1 = field.NewFloat32(table, "drugs_resi1")
	d.DrugsResi2 = field.NewFloat32(table, "drugs_resi2")
	d.DrugsResi3 = field.NewFloat32(table, "drugs_resi3")
	d.DrugsResi4 = field.NewFloat32(table, "drugs_resi4")

	d.fillFieldMap()

	return d
}

func (d *drugsResi) WithContext(ctx context.Context) IDrugsResiDo {
	return d.drugsResiDo.WithContext(ctx)
}

func (d drugsResi) TableName() string { return d.drugsResiDo.TableName() }

func (d drugsResi) Alias() string { return d.drugsResiDo.Alias() }

func (d drugsResi) Columns(cols ...field.Expr) gen.Columns { return d.drugsResiDo.Columns(cols...) }

func (d *drugsResi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *drugsResi) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["chiled_fresh_index_id"] = d.ChiledFreshIndexID
	d.fieldMap["drugs_resi1"] = d.DrugsResi1
	d.fieldMap["drugs_resi2"] = d.DrugsResi2
	d.fieldMap["drugs_resi3"] = d.DrugsResi3
	d.fieldMap["drugs_resi4"] = d.DrugsResi4
}

func (d drugsResi) clone(db *gorm.DB) drugsResi {
	d.drugsResiDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d drugsResi) replaceDB(db *gorm.DB) drugsResi {
	d.drugsResiDo.ReplaceDB(db)
	return d
}

type drugsResiDo struct{ gen.DO }

type IDrugsResiDo interface {
	gen.SubQuery
	Debug() IDrugsResiDo
	WithContext(ctx context.Context) IDrugsResiDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDrugsResiDo
	WriteDB() IDrugsResiDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDrugsResiDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDrugsResiDo
	Not(conds ...gen.Condition) IDrugsResiDo
	Or(conds ...gen.Condition) IDrugsResiDo
	Select(conds ...field.Expr) IDrugsResiDo
	Where(conds ...gen.Condition) IDrugsResiDo
	Order(conds ...field.Expr) IDrugsResiDo
	Distinct(cols ...field.Expr) IDrugsResiDo
	Omit(cols ...field.Expr) IDrugsResiDo
	Join(table schema.Tabler, on ...field.Expr) IDrugsResiDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDrugsResiDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDrugsResiDo
	Group(cols ...field.Expr) IDrugsResiDo
	Having(conds ...gen.Condition) IDrugsResiDo
	Limit(limit int) IDrugsResiDo
	Offset(offset int) IDrugsResiDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDrugsResiDo
	Unscoped() IDrugsResiDo
	Create(values ...*slaughter.DrugsResi) error
	CreateInBatches(values []*slaughter.DrugsResi, batchSize int) error
	Save(values ...*slaughter.DrugsResi) error
	First() (*slaughter.DrugsResi, error)
	Take() (*slaughter.DrugsResi, error)
	Last() (*slaughter.DrugsResi, error)
	Find() ([]*slaughter.DrugsResi, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.DrugsResi, err error)
	FindInBatches(result *[]*slaughter.DrugsResi, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.DrugsResi) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDrugsResiDo
	Assign(attrs ...field.AssignExpr) IDrugsResiDo
	Joins(fields ...field.RelationField) IDrugsResiDo
	Preload(fields ...field.RelationField) IDrugsResiDo
	FirstOrInit() (*slaughter.DrugsResi, error)
	FirstOrCreate() (*slaughter.DrugsResi, error)
	FindByPage(offset int, limit int) (result []*slaughter.DrugsResi, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDrugsResiDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d drugsResiDo) Debug() IDrugsResiDo {
	return d.withDO(d.DO.Debug())
}

func (d drugsResiDo) WithContext(ctx context.Context) IDrugsResiDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d drugsResiDo) ReadDB() IDrugsResiDo {
	return d.Clauses(dbresolver.Read)
}

func (d drugsResiDo) WriteDB() IDrugsResiDo {
	return d.Clauses(dbresolver.Write)
}

func (d drugsResiDo) Session(config *gorm.Session) IDrugsResiDo {
	return d.withDO(d.DO.Session(config))
}

func (d drugsResiDo) Clauses(conds ...clause.Expression) IDrugsResiDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d drugsResiDo) Returning(value interface{}, columns ...string) IDrugsResiDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d drugsResiDo) Not(conds ...gen.Condition) IDrugsResiDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d drugsResiDo) Or(conds ...gen.Condition) IDrugsResiDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d drugsResiDo) Select(conds ...field.Expr) IDrugsResiDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d drugsResiDo) Where(conds ...gen.Condition) IDrugsResiDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d drugsResiDo) Order(conds ...field.Expr) IDrugsResiDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d drugsResiDo) Distinct(cols ...field.Expr) IDrugsResiDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d drugsResiDo) Omit(cols ...field.Expr) IDrugsResiDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d drugsResiDo) Join(table schema.Tabler, on ...field.Expr) IDrugsResiDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d drugsResiDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDrugsResiDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d drugsResiDo) RightJoin(table schema.Tabler, on ...field.Expr) IDrugsResiDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d drugsResiDo) Group(cols ...field.Expr) IDrugsResiDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d drugsResiDo) Having(conds ...gen.Condition) IDrugsResiDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d drugsResiDo) Limit(limit int) IDrugsResiDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d drugsResiDo) Offset(offset int) IDrugsResiDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d drugsResiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDrugsResiDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d drugsResiDo) Unscoped() IDrugsResiDo {
	return d.withDO(d.DO.Unscoped())
}

func (d drugsResiDo) Create(values ...*slaughter.DrugsResi) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d drugsResiDo) CreateInBatches(values []*slaughter.DrugsResi, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d drugsResiDo) Save(values ...*slaughter.DrugsResi) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d drugsResiDo) First() (*slaughter.DrugsResi, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.DrugsResi), nil
	}
}

func (d drugsResiDo) Take() (*slaughter.DrugsResi, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.DrugsResi), nil
	}
}

func (d drugsResiDo) Last() (*slaughter.DrugsResi, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.DrugsResi), nil
	}
}

func (d drugsResiDo) Find() ([]*slaughter.DrugsResi, error) {
	result, err := d.DO.Find()
	return result.([]*slaughter.DrugsResi), err
}

func (d drugsResiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.DrugsResi, err error) {
	buf := make([]*slaughter.DrugsResi, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d drugsResiDo) FindInBatches(result *[]*slaughter.DrugsResi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d drugsResiDo) Attrs(attrs ...field.AssignExpr) IDrugsResiDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d drugsResiDo) Assign(attrs ...field.AssignExpr) IDrugsResiDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d drugsResiDo) Joins(fields ...field.RelationField) IDrugsResiDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d drugsResiDo) Preload(fields ...field.RelationField) IDrugsResiDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d drugsResiDo) FirstOrInit() (*slaughter.DrugsResi, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.DrugsResi), nil
	}
}

func (d drugsResiDo) FirstOrCreate() (*slaughter.DrugsResi, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.DrugsResi), nil
	}
}

func (d drugsResiDo) FindByPage(offset int, limit int) (result []*slaughter.DrugsResi, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d drugsResiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d drugsResiDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d drugsResiDo) Delete(models ...*slaughter.DrugsResi) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *drugsResiDo) withDO(do gen.Dao) *drugsResiDo {
	d.DO = *do.(*gen.DO)
	return d
}
