// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureWaterChemicalHazard(db *gorm.DB, opts ...gen.DOOption) pastureWaterChemicalHazard {
	_pastureWaterChemicalHazard := pastureWaterChemicalHazard{}

	_pastureWaterChemicalHazard.pastureWaterChemicalHazardDo.UseDB(db, opts...)
	_pastureWaterChemicalHazard.pastureWaterChemicalHazardDo.UseModel(&pasture.PastureWaterChemicalHazard{})

	tableName := _pastureWaterChemicalHazard.pastureWaterChemicalHazardDo.TableName()
	_pastureWaterChemicalHazard.ALL = field.NewAsterisk(tableName)
	_pastureWaterChemicalHazard.ID = field.NewUint(tableName, "id")
	_pastureWaterChemicalHazard.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureWaterChemicalHazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureWaterChemicalHazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureWaterChemicalHazard.Fluoride = field.NewFloat32(tableName, "fluoride")
	_pastureWaterChemicalHazard.Cyanide = field.NewFloat32(tableName, "cyanide")
	_pastureWaterChemicalHazard.Chloride = field.NewFloat32(tableName, "chloride")
	_pastureWaterChemicalHazard.Nitrate = field.NewFloat32(tableName, "nitrate")
	_pastureWaterChemicalHazard.Sulfate = field.NewFloat32(tableName, "sulfate")
	_pastureWaterChemicalHazard.Sixsixsix = field.NewFloat32(tableName, "sixsixsix")
	_pastureWaterChemicalHazard.DDT = field.NewFloat32(tableName, "ddt")
	_pastureWaterChemicalHazard.AmmoniaNitrogen = field.NewFloat32(tableName, "ammonia_nitrogen")
	_pastureWaterChemicalHazard.PastureWaterID = field.NewUint(tableName, "pasture_water_id")

	_pastureWaterChemicalHazard.fillFieldMap()

	return _pastureWaterChemicalHazard
}

type pastureWaterChemicalHazard struct {
	pastureWaterChemicalHazardDo pastureWaterChemicalHazardDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	Fluoride        field.Float32
	Cyanide         field.Float32
	Chloride        field.Float32
	Nitrate         field.Float32
	Sulfate         field.Float32
	Sixsixsix       field.Float32
	DDT             field.Float32
	AmmoniaNitrogen field.Float32
	PastureWaterID  field.Uint

	fieldMap map[string]field.Expr
}

func (p pastureWaterChemicalHazard) Table(newTableName string) *pastureWaterChemicalHazard {
	p.pastureWaterChemicalHazardDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureWaterChemicalHazard) As(alias string) *pastureWaterChemicalHazard {
	p.pastureWaterChemicalHazardDo.DO = *(p.pastureWaterChemicalHazardDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureWaterChemicalHazard) updateTableName(table string) *pastureWaterChemicalHazard {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Fluoride = field.NewFloat32(table, "fluoride")
	p.Cyanide = field.NewFloat32(table, "cyanide")
	p.Chloride = field.NewFloat32(table, "chloride")
	p.Nitrate = field.NewFloat32(table, "nitrate")
	p.Sulfate = field.NewFloat32(table, "sulfate")
	p.Sixsixsix = field.NewFloat32(table, "sixsixsix")
	p.DDT = field.NewFloat32(table, "ddt")
	p.AmmoniaNitrogen = field.NewFloat32(table, "ammonia_nitrogen")
	p.PastureWaterID = field.NewUint(table, "pasture_water_id")

	p.fillFieldMap()

	return p
}

func (p *pastureWaterChemicalHazard) WithContext(ctx context.Context) IPastureWaterChemicalHazardDo {
	return p.pastureWaterChemicalHazardDo.WithContext(ctx)
}

func (p pastureWaterChemicalHazard) TableName() string {
	return p.pastureWaterChemicalHazardDo.TableName()
}

func (p pastureWaterChemicalHazard) Alias() string { return p.pastureWaterChemicalHazardDo.Alias() }

func (p pastureWaterChemicalHazard) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureWaterChemicalHazardDo.Columns(cols...)
}

func (p *pastureWaterChemicalHazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureWaterChemicalHazard) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["fluoride"] = p.Fluoride
	p.fieldMap["cyanide"] = p.Cyanide
	p.fieldMap["chloride"] = p.Chloride
	p.fieldMap["nitrate"] = p.Nitrate
	p.fieldMap["sulfate"] = p.Sulfate
	p.fieldMap["sixsixsix"] = p.Sixsixsix
	p.fieldMap["ddt"] = p.DDT
	p.fieldMap["ammonia_nitrogen"] = p.AmmoniaNitrogen
	p.fieldMap["pasture_water_id"] = p.PastureWaterID
}

func (p pastureWaterChemicalHazard) clone(db *gorm.DB) pastureWaterChemicalHazard {
	p.pastureWaterChemicalHazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureWaterChemicalHazard) replaceDB(db *gorm.DB) pastureWaterChemicalHazard {
	p.pastureWaterChemicalHazardDo.ReplaceDB(db)
	return p
}

type pastureWaterChemicalHazardDo struct{ gen.DO }

type IPastureWaterChemicalHazardDo interface {
	gen.SubQuery
	Debug() IPastureWaterChemicalHazardDo
	WithContext(ctx context.Context) IPastureWaterChemicalHazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureWaterChemicalHazardDo
	WriteDB() IPastureWaterChemicalHazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureWaterChemicalHazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureWaterChemicalHazardDo
	Not(conds ...gen.Condition) IPastureWaterChemicalHazardDo
	Or(conds ...gen.Condition) IPastureWaterChemicalHazardDo
	Select(conds ...field.Expr) IPastureWaterChemicalHazardDo
	Where(conds ...gen.Condition) IPastureWaterChemicalHazardDo
	Order(conds ...field.Expr) IPastureWaterChemicalHazardDo
	Distinct(cols ...field.Expr) IPastureWaterChemicalHazardDo
	Omit(cols ...field.Expr) IPastureWaterChemicalHazardDo
	Join(table schema.Tabler, on ...field.Expr) IPastureWaterChemicalHazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterChemicalHazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterChemicalHazardDo
	Group(cols ...field.Expr) IPastureWaterChemicalHazardDo
	Having(conds ...gen.Condition) IPastureWaterChemicalHazardDo
	Limit(limit int) IPastureWaterChemicalHazardDo
	Offset(offset int) IPastureWaterChemicalHazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterChemicalHazardDo
	Unscoped() IPastureWaterChemicalHazardDo
	Create(values ...*pasture.PastureWaterChemicalHazard) error
	CreateInBatches(values []*pasture.PastureWaterChemicalHazard, batchSize int) error
	Save(values ...*pasture.PastureWaterChemicalHazard) error
	First() (*pasture.PastureWaterChemicalHazard, error)
	Take() (*pasture.PastureWaterChemicalHazard, error)
	Last() (*pasture.PastureWaterChemicalHazard, error)
	Find() ([]*pasture.PastureWaterChemicalHazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWaterChemicalHazard, err error)
	FindInBatches(result *[]*pasture.PastureWaterChemicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureWaterChemicalHazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureWaterChemicalHazardDo
	Assign(attrs ...field.AssignExpr) IPastureWaterChemicalHazardDo
	Joins(fields ...field.RelationField) IPastureWaterChemicalHazardDo
	Preload(fields ...field.RelationField) IPastureWaterChemicalHazardDo
	FirstOrInit() (*pasture.PastureWaterChemicalHazard, error)
	FirstOrCreate() (*pasture.PastureWaterChemicalHazard, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureWaterChemicalHazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureWaterChemicalHazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureWaterChemicalHazardDo) Debug() IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureWaterChemicalHazardDo) WithContext(ctx context.Context) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureWaterChemicalHazardDo) ReadDB() IPastureWaterChemicalHazardDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureWaterChemicalHazardDo) WriteDB() IPastureWaterChemicalHazardDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureWaterChemicalHazardDo) Session(config *gorm.Session) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureWaterChemicalHazardDo) Clauses(conds ...clause.Expression) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureWaterChemicalHazardDo) Returning(value interface{}, columns ...string) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureWaterChemicalHazardDo) Not(conds ...gen.Condition) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureWaterChemicalHazardDo) Or(conds ...gen.Condition) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureWaterChemicalHazardDo) Select(conds ...field.Expr) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureWaterChemicalHazardDo) Where(conds ...gen.Condition) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureWaterChemicalHazardDo) Order(conds ...field.Expr) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureWaterChemicalHazardDo) Distinct(cols ...field.Expr) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureWaterChemicalHazardDo) Omit(cols ...field.Expr) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureWaterChemicalHazardDo) Join(table schema.Tabler, on ...field.Expr) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureWaterChemicalHazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureWaterChemicalHazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureWaterChemicalHazardDo) Group(cols ...field.Expr) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureWaterChemicalHazardDo) Having(conds ...gen.Condition) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureWaterChemicalHazardDo) Limit(limit int) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureWaterChemicalHazardDo) Offset(offset int) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureWaterChemicalHazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureWaterChemicalHazardDo) Unscoped() IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureWaterChemicalHazardDo) Create(values ...*pasture.PastureWaterChemicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureWaterChemicalHazardDo) CreateInBatches(values []*pasture.PastureWaterChemicalHazard, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureWaterChemicalHazardDo) Save(values ...*pasture.PastureWaterChemicalHazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureWaterChemicalHazardDo) First() (*pasture.PastureWaterChemicalHazard, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterChemicalHazard), nil
	}
}

func (p pastureWaterChemicalHazardDo) Take() (*pasture.PastureWaterChemicalHazard, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterChemicalHazard), nil
	}
}

func (p pastureWaterChemicalHazardDo) Last() (*pasture.PastureWaterChemicalHazard, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterChemicalHazard), nil
	}
}

func (p pastureWaterChemicalHazardDo) Find() ([]*pasture.PastureWaterChemicalHazard, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureWaterChemicalHazard), err
}

func (p pastureWaterChemicalHazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWaterChemicalHazard, err error) {
	buf := make([]*pasture.PastureWaterChemicalHazard, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureWaterChemicalHazardDo) FindInBatches(result *[]*pasture.PastureWaterChemicalHazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureWaterChemicalHazardDo) Attrs(attrs ...field.AssignExpr) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureWaterChemicalHazardDo) Assign(attrs ...field.AssignExpr) IPastureWaterChemicalHazardDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureWaterChemicalHazardDo) Joins(fields ...field.RelationField) IPastureWaterChemicalHazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureWaterChemicalHazardDo) Preload(fields ...field.RelationField) IPastureWaterChemicalHazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureWaterChemicalHazardDo) FirstOrInit() (*pasture.PastureWaterChemicalHazard, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterChemicalHazard), nil
	}
}

func (p pastureWaterChemicalHazardDo) FirstOrCreate() (*pasture.PastureWaterChemicalHazard, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterChemicalHazard), nil
	}
}

func (p pastureWaterChemicalHazardDo) FindByPage(offset int, limit int) (result []*pasture.PastureWaterChemicalHazard, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureWaterChemicalHazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureWaterChemicalHazardDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureWaterChemicalHazardDo) Delete(models ...*pasture.PastureWaterChemicalHazard) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureWaterChemicalHazardDo) withDO(do gen.Dao) *pastureWaterChemicalHazardDo {
	p.DO = *do.(*gen.DO)
	return p
}
