// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/slaughter"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSlaughterAnalAfterSlaQuanCar(db *gorm.DB, opts ...gen.DOOption) slaughterAnalAfterSlaQuanCar {
	_slaughterAnalAfterSlaQuanCar := slaughterAnalAfterSlaQuanCar{}

	_slaughterAnalAfterSlaQuanCar.slaughterAnalAfterSlaQuanCarDo.UseDB(db, opts...)
	_slaughterAnalAfterSlaQuanCar.slaughterAnalAfterSlaQuanCarDo.UseModel(&slaughter.SlaughterAnalAfterSlaQuanCar{})

	tableName := _slaughterAnalAfterSlaQuanCar.slaughterAnalAfterSlaQuanCarDo.TableName()
	_slaughterAnalAfterSlaQuanCar.ALL = field.NewAsterisk(tableName)
	_slaughterAnalAfterSlaQuanCar.ID = field.NewUint(tableName, "id")
	_slaughterAnalAfterSlaQuanCar.CreatedAt = field.NewTime(tableName, "created_at")
	_slaughterAnalAfterSlaQuanCar.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slaughterAnalAfterSlaQuanCar.DeletedAt = field.NewField(tableName, "deleted_at")
	_slaughterAnalAfterSlaQuanCar.PID = field.NewString(tableName, "p_id")
	_slaughterAnalAfterSlaQuanCar.SlaughterAnalAfterSlaQuanCar1 = field.NewString(tableName, "slaughter_anal_after_sla_quan_car1")
	_slaughterAnalAfterSlaQuanCar.SlaughterAnalAfterSlaQuanCar2 = field.NewString(tableName, "slaughter_anal_after_sla_quan_car2")
	_slaughterAnalAfterSlaQuanCar.SlaughterAnalAfterSlaQuanCar3 = field.NewString(tableName, "slaughter_anal_after_sla_quan_car3")
	_slaughterAnalAfterSlaQuanCar.SlaughterAnalAfterSlaQuanCar4 = field.NewString(tableName, "slaughter_anal_after_sla_quan_car4")

	_slaughterAnalAfterSlaQuanCar.fillFieldMap()

	return _slaughterAnalAfterSlaQuanCar
}

type slaughterAnalAfterSlaQuanCar struct {
	slaughterAnalAfterSlaQuanCarDo slaughterAnalAfterSlaQuanCarDo

	ALL                           field.Asterisk
	ID                            field.Uint
	CreatedAt                     field.Time
	UpdatedAt                     field.Time
	DeletedAt                     field.Field
	PID                           field.String
	SlaughterAnalAfterSlaQuanCar1 field.String
	SlaughterAnalAfterSlaQuanCar2 field.String
	SlaughterAnalAfterSlaQuanCar3 field.String
	SlaughterAnalAfterSlaQuanCar4 field.String

	fieldMap map[string]field.Expr
}

func (s slaughterAnalAfterSlaQuanCar) Table(newTableName string) *slaughterAnalAfterSlaQuanCar {
	s.slaughterAnalAfterSlaQuanCarDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slaughterAnalAfterSlaQuanCar) As(alias string) *slaughterAnalAfterSlaQuanCar {
	s.slaughterAnalAfterSlaQuanCarDo.DO = *(s.slaughterAnalAfterSlaQuanCarDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slaughterAnalAfterSlaQuanCar) updateTableName(table string) *slaughterAnalAfterSlaQuanCar {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.PID = field.NewString(table, "p_id")
	s.SlaughterAnalAfterSlaQuanCar1 = field.NewString(table, "slaughter_anal_after_sla_quan_car1")
	s.SlaughterAnalAfterSlaQuanCar2 = field.NewString(table, "slaughter_anal_after_sla_quan_car2")
	s.SlaughterAnalAfterSlaQuanCar3 = field.NewString(table, "slaughter_anal_after_sla_quan_car3")
	s.SlaughterAnalAfterSlaQuanCar4 = field.NewString(table, "slaughter_anal_after_sla_quan_car4")

	s.fillFieldMap()

	return s
}

func (s *slaughterAnalAfterSlaQuanCar) WithContext(ctx context.Context) ISlaughterAnalAfterSlaQuanCarDo {
	return s.slaughterAnalAfterSlaQuanCarDo.WithContext(ctx)
}

func (s slaughterAnalAfterSlaQuanCar) TableName() string {
	return s.slaughterAnalAfterSlaQuanCarDo.TableName()
}

func (s slaughterAnalAfterSlaQuanCar) Alias() string { return s.slaughterAnalAfterSlaQuanCarDo.Alias() }

func (s slaughterAnalAfterSlaQuanCar) Columns(cols ...field.Expr) gen.Columns {
	return s.slaughterAnalAfterSlaQuanCarDo.Columns(cols...)
}

func (s *slaughterAnalAfterSlaQuanCar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slaughterAnalAfterSlaQuanCar) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["p_id"] = s.PID
	s.fieldMap["slaughter_anal_after_sla_quan_car1"] = s.SlaughterAnalAfterSlaQuanCar1
	s.fieldMap["slaughter_anal_after_sla_quan_car2"] = s.SlaughterAnalAfterSlaQuanCar2
	s.fieldMap["slaughter_anal_after_sla_quan_car3"] = s.SlaughterAnalAfterSlaQuanCar3
	s.fieldMap["slaughter_anal_after_sla_quan_car4"] = s.SlaughterAnalAfterSlaQuanCar4
}

func (s slaughterAnalAfterSlaQuanCar) clone(db *gorm.DB) slaughterAnalAfterSlaQuanCar {
	s.slaughterAnalAfterSlaQuanCarDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slaughterAnalAfterSlaQuanCar) replaceDB(db *gorm.DB) slaughterAnalAfterSlaQuanCar {
	s.slaughterAnalAfterSlaQuanCarDo.ReplaceDB(db)
	return s
}

type slaughterAnalAfterSlaQuanCarDo struct{ gen.DO }

type ISlaughterAnalAfterSlaQuanCarDo interface {
	gen.SubQuery
	Debug() ISlaughterAnalAfterSlaQuanCarDo
	WithContext(ctx context.Context) ISlaughterAnalAfterSlaQuanCarDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISlaughterAnalAfterSlaQuanCarDo
	WriteDB() ISlaughterAnalAfterSlaQuanCarDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISlaughterAnalAfterSlaQuanCarDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISlaughterAnalAfterSlaQuanCarDo
	Not(conds ...gen.Condition) ISlaughterAnalAfterSlaQuanCarDo
	Or(conds ...gen.Condition) ISlaughterAnalAfterSlaQuanCarDo
	Select(conds ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo
	Where(conds ...gen.Condition) ISlaughterAnalAfterSlaQuanCarDo
	Order(conds ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo
	Distinct(cols ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo
	Omit(cols ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo
	Join(table schema.Tabler, on ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo
	Group(cols ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo
	Having(conds ...gen.Condition) ISlaughterAnalAfterSlaQuanCarDo
	Limit(limit int) ISlaughterAnalAfterSlaQuanCarDo
	Offset(offset int) ISlaughterAnalAfterSlaQuanCarDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterAnalAfterSlaQuanCarDo
	Unscoped() ISlaughterAnalAfterSlaQuanCarDo
	Create(values ...*slaughter.SlaughterAnalAfterSlaQuanCar) error
	CreateInBatches(values []*slaughter.SlaughterAnalAfterSlaQuanCar, batchSize int) error
	Save(values ...*slaughter.SlaughterAnalAfterSlaQuanCar) error
	First() (*slaughter.SlaughterAnalAfterSlaQuanCar, error)
	Take() (*slaughter.SlaughterAnalAfterSlaQuanCar, error)
	Last() (*slaughter.SlaughterAnalAfterSlaQuanCar, error)
	Find() ([]*slaughter.SlaughterAnalAfterSlaQuanCar, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.SlaughterAnalAfterSlaQuanCar, err error)
	FindInBatches(result *[]*slaughter.SlaughterAnalAfterSlaQuanCar, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*slaughter.SlaughterAnalAfterSlaQuanCar) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISlaughterAnalAfterSlaQuanCarDo
	Assign(attrs ...field.AssignExpr) ISlaughterAnalAfterSlaQuanCarDo
	Joins(fields ...field.RelationField) ISlaughterAnalAfterSlaQuanCarDo
	Preload(fields ...field.RelationField) ISlaughterAnalAfterSlaQuanCarDo
	FirstOrInit() (*slaughter.SlaughterAnalAfterSlaQuanCar, error)
	FirstOrCreate() (*slaughter.SlaughterAnalAfterSlaQuanCar, error)
	FindByPage(offset int, limit int) (result []*slaughter.SlaughterAnalAfterSlaQuanCar, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISlaughterAnalAfterSlaQuanCarDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s slaughterAnalAfterSlaQuanCarDo) Debug() ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Debug())
}

func (s slaughterAnalAfterSlaQuanCarDo) WithContext(ctx context.Context) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slaughterAnalAfterSlaQuanCarDo) ReadDB() ISlaughterAnalAfterSlaQuanCarDo {
	return s.Clauses(dbresolver.Read)
}

func (s slaughterAnalAfterSlaQuanCarDo) WriteDB() ISlaughterAnalAfterSlaQuanCarDo {
	return s.Clauses(dbresolver.Write)
}

func (s slaughterAnalAfterSlaQuanCarDo) Session(config *gorm.Session) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Session(config))
}

func (s slaughterAnalAfterSlaQuanCarDo) Clauses(conds ...clause.Expression) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Returning(value interface{}, columns ...string) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Not(conds ...gen.Condition) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Or(conds ...gen.Condition) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Select(conds ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Where(conds ...gen.Condition) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Order(conds ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Distinct(cols ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Omit(cols ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Join(table schema.Tabler, on ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slaughterAnalAfterSlaQuanCarDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slaughterAnalAfterSlaQuanCarDo) RightJoin(table schema.Tabler, on ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Group(cols ...field.Expr) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Having(conds ...gen.Condition) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Limit(limit int) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slaughterAnalAfterSlaQuanCarDo) Offset(offset int) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slaughterAnalAfterSlaQuanCarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Unscoped() ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slaughterAnalAfterSlaQuanCarDo) Create(values ...*slaughter.SlaughterAnalAfterSlaQuanCar) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slaughterAnalAfterSlaQuanCarDo) CreateInBatches(values []*slaughter.SlaughterAnalAfterSlaQuanCar, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slaughterAnalAfterSlaQuanCarDo) Save(values ...*slaughter.SlaughterAnalAfterSlaQuanCar) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slaughterAnalAfterSlaQuanCarDo) First() (*slaughter.SlaughterAnalAfterSlaQuanCar, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterAnalAfterSlaQuanCar), nil
	}
}

func (s slaughterAnalAfterSlaQuanCarDo) Take() (*slaughter.SlaughterAnalAfterSlaQuanCar, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterAnalAfterSlaQuanCar), nil
	}
}

func (s slaughterAnalAfterSlaQuanCarDo) Last() (*slaughter.SlaughterAnalAfterSlaQuanCar, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterAnalAfterSlaQuanCar), nil
	}
}

func (s slaughterAnalAfterSlaQuanCarDo) Find() ([]*slaughter.SlaughterAnalAfterSlaQuanCar, error) {
	result, err := s.DO.Find()
	return result.([]*slaughter.SlaughterAnalAfterSlaQuanCar), err
}

func (s slaughterAnalAfterSlaQuanCarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*slaughter.SlaughterAnalAfterSlaQuanCar, err error) {
	buf := make([]*slaughter.SlaughterAnalAfterSlaQuanCar, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slaughterAnalAfterSlaQuanCarDo) FindInBatches(result *[]*slaughter.SlaughterAnalAfterSlaQuanCar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slaughterAnalAfterSlaQuanCarDo) Attrs(attrs ...field.AssignExpr) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Assign(attrs ...field.AssignExpr) ISlaughterAnalAfterSlaQuanCarDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slaughterAnalAfterSlaQuanCarDo) Joins(fields ...field.RelationField) ISlaughterAnalAfterSlaQuanCarDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slaughterAnalAfterSlaQuanCarDo) Preload(fields ...field.RelationField) ISlaughterAnalAfterSlaQuanCarDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slaughterAnalAfterSlaQuanCarDo) FirstOrInit() (*slaughter.SlaughterAnalAfterSlaQuanCar, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterAnalAfterSlaQuanCar), nil
	}
}

func (s slaughterAnalAfterSlaQuanCarDo) FirstOrCreate() (*slaughter.SlaughterAnalAfterSlaQuanCar, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*slaughter.SlaughterAnalAfterSlaQuanCar), nil
	}
}

func (s slaughterAnalAfterSlaQuanCarDo) FindByPage(offset int, limit int) (result []*slaughter.SlaughterAnalAfterSlaQuanCar, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slaughterAnalAfterSlaQuanCarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slaughterAnalAfterSlaQuanCarDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slaughterAnalAfterSlaQuanCarDo) Delete(models ...*slaughter.SlaughterAnalAfterSlaQuanCar) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slaughterAnalAfterSlaQuanCarDo) withDO(do gen.Dao) *slaughterAnalAfterSlaQuanCarDo {
	s.DO = *do.(*gen.DO)
	return s
}
