// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureFeedAs(db *gorm.DB, opts ...gen.DOOption) pastureFeedAs {
	_pastureFeedAs := pastureFeedAs{}

	_pastureFeedAs.pastureFeedAsDo.UseDB(db, opts...)
	_pastureFeedAs.pastureFeedAsDo.UseModel(&pasture.PastureFeedAs{})

	tableName := _pastureFeedAs.pastureFeedAsDo.TableName()
	_pastureFeedAs.ALL = field.NewAsterisk(tableName)
	_pastureFeedAs.ID = field.NewUint(tableName, "id")
	_pastureFeedAs.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureFeedAs.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureFeedAs.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureFeedAs.PastureFeedHeavyMetalID = field.NewUint(tableName, "pasture_feed_heavy_metal_id")
	_pastureFeedAs.As1 = field.NewFloat64(tableName, "as1")
	_pastureFeedAs.As2 = field.NewFloat64(tableName, "as2")
	_pastureFeedAs.As3 = field.NewFloat64(tableName, "as3")
	_pastureFeedAs.As4 = field.NewFloat64(tableName, "as4")
	_pastureFeedAs.As5 = field.NewFloat64(tableName, "as5")
	_pastureFeedAs.As6 = field.NewFloat64(tableName, "as6")
	_pastureFeedAs.As7 = field.NewFloat64(tableName, "as7")
	_pastureFeedAs.As8 = field.NewFloat64(tableName, "as8")

	_pastureFeedAs.fillFieldMap()

	return _pastureFeedAs
}

type pastureFeedAs struct {
	pastureFeedAsDo pastureFeedAsDo

	ALL                     field.Asterisk
	ID                      field.Uint
	CreatedAt               field.Time
	UpdatedAt               field.Time
	DeletedAt               field.Field
	PastureFeedHeavyMetalID field.Uint
	As1                     field.Float64
	As2                     field.Float64
	As3                     field.Float64
	As4                     field.Float64
	As5                     field.Float64
	As6                     field.Float64
	As7                     field.Float64
	As8                     field.Float64

	fieldMap map[string]field.Expr
}

func (p pastureFeedAs) Table(newTableName string) *pastureFeedAs {
	p.pastureFeedAsDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureFeedAs) As(alias string) *pastureFeedAs {
	p.pastureFeedAsDo.DO = *(p.pastureFeedAsDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureFeedAs) updateTableName(table string) *pastureFeedAs {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PastureFeedHeavyMetalID = field.NewUint(table, "pasture_feed_heavy_metal_id")
	p.As1 = field.NewFloat64(table, "as1")
	p.As2 = field.NewFloat64(table, "as2")
	p.As3 = field.NewFloat64(table, "as3")
	p.As4 = field.NewFloat64(table, "as4")
	p.As5 = field.NewFloat64(table, "as5")
	p.As6 = field.NewFloat64(table, "as6")
	p.As7 = field.NewFloat64(table, "as7")
	p.As8 = field.NewFloat64(table, "as8")

	p.fillFieldMap()

	return p
}

func (p *pastureFeedAs) WithContext(ctx context.Context) IPastureFeedAsDo {
	return p.pastureFeedAsDo.WithContext(ctx)
}

func (p pastureFeedAs) TableName() string { return p.pastureFeedAsDo.TableName() }

func (p pastureFeedAs) Alias() string { return p.pastureFeedAsDo.Alias() }

func (p pastureFeedAs) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureFeedAsDo.Columns(cols...)
}

func (p *pastureFeedAs) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureFeedAs) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["pasture_feed_heavy_metal_id"] = p.PastureFeedHeavyMetalID
	p.fieldMap["as1"] = p.As1
	p.fieldMap["as2"] = p.As2
	p.fieldMap["as3"] = p.As3
	p.fieldMap["as4"] = p.As4
	p.fieldMap["as5"] = p.As5
	p.fieldMap["as6"] = p.As6
	p.fieldMap["as7"] = p.As7
	p.fieldMap["as8"] = p.As8
}

func (p pastureFeedAs) clone(db *gorm.DB) pastureFeedAs {
	p.pastureFeedAsDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureFeedAs) replaceDB(db *gorm.DB) pastureFeedAs {
	p.pastureFeedAsDo.ReplaceDB(db)
	return p
}

type pastureFeedAsDo struct{ gen.DO }

type IPastureFeedAsDo interface {
	gen.SubQuery
	Debug() IPastureFeedAsDo
	WithContext(ctx context.Context) IPastureFeedAsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureFeedAsDo
	WriteDB() IPastureFeedAsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureFeedAsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureFeedAsDo
	Not(conds ...gen.Condition) IPastureFeedAsDo
	Or(conds ...gen.Condition) IPastureFeedAsDo
	Select(conds ...field.Expr) IPastureFeedAsDo
	Where(conds ...gen.Condition) IPastureFeedAsDo
	Order(conds ...field.Expr) IPastureFeedAsDo
	Distinct(cols ...field.Expr) IPastureFeedAsDo
	Omit(cols ...field.Expr) IPastureFeedAsDo
	Join(table schema.Tabler, on ...field.Expr) IPastureFeedAsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFeedAsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureFeedAsDo
	Group(cols ...field.Expr) IPastureFeedAsDo
	Having(conds ...gen.Condition) IPastureFeedAsDo
	Limit(limit int) IPastureFeedAsDo
	Offset(offset int) IPastureFeedAsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFeedAsDo
	Unscoped() IPastureFeedAsDo
	Create(values ...*pasture.PastureFeedAs) error
	CreateInBatches(values []*pasture.PastureFeedAs, batchSize int) error
	Save(values ...*pasture.PastureFeedAs) error
	First() (*pasture.PastureFeedAs, error)
	Take() (*pasture.PastureFeedAs, error)
	Last() (*pasture.PastureFeedAs, error)
	Find() ([]*pasture.PastureFeedAs, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFeedAs, err error)
	FindInBatches(result *[]*pasture.PastureFeedAs, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureFeedAs) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureFeedAsDo
	Assign(attrs ...field.AssignExpr) IPastureFeedAsDo
	Joins(fields ...field.RelationField) IPastureFeedAsDo
	Preload(fields ...field.RelationField) IPastureFeedAsDo
	FirstOrInit() (*pasture.PastureFeedAs, error)
	FirstOrCreate() (*pasture.PastureFeedAs, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureFeedAs, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureFeedAsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureFeedAsDo) Debug() IPastureFeedAsDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureFeedAsDo) WithContext(ctx context.Context) IPastureFeedAsDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureFeedAsDo) ReadDB() IPastureFeedAsDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureFeedAsDo) WriteDB() IPastureFeedAsDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureFeedAsDo) Session(config *gorm.Session) IPastureFeedAsDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureFeedAsDo) Clauses(conds ...clause.Expression) IPastureFeedAsDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureFeedAsDo) Returning(value interface{}, columns ...string) IPastureFeedAsDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureFeedAsDo) Not(conds ...gen.Condition) IPastureFeedAsDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureFeedAsDo) Or(conds ...gen.Condition) IPastureFeedAsDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureFeedAsDo) Select(conds ...field.Expr) IPastureFeedAsDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureFeedAsDo) Where(conds ...gen.Condition) IPastureFeedAsDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureFeedAsDo) Order(conds ...field.Expr) IPastureFeedAsDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureFeedAsDo) Distinct(cols ...field.Expr) IPastureFeedAsDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureFeedAsDo) Omit(cols ...field.Expr) IPastureFeedAsDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureFeedAsDo) Join(table schema.Tabler, on ...field.Expr) IPastureFeedAsDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureFeedAsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureFeedAsDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureFeedAsDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureFeedAsDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureFeedAsDo) Group(cols ...field.Expr) IPastureFeedAsDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureFeedAsDo) Having(conds ...gen.Condition) IPastureFeedAsDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureFeedAsDo) Limit(limit int) IPastureFeedAsDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureFeedAsDo) Offset(offset int) IPastureFeedAsDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureFeedAsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureFeedAsDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureFeedAsDo) Unscoped() IPastureFeedAsDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureFeedAsDo) Create(values ...*pasture.PastureFeedAs) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureFeedAsDo) CreateInBatches(values []*pasture.PastureFeedAs, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureFeedAsDo) Save(values ...*pasture.PastureFeedAs) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureFeedAsDo) First() (*pasture.PastureFeedAs, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedAs), nil
	}
}

func (p pastureFeedAsDo) Take() (*pasture.PastureFeedAs, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedAs), nil
	}
}

func (p pastureFeedAsDo) Last() (*pasture.PastureFeedAs, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedAs), nil
	}
}

func (p pastureFeedAsDo) Find() ([]*pasture.PastureFeedAs, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureFeedAs), err
}

func (p pastureFeedAsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureFeedAs, err error) {
	buf := make([]*pasture.PastureFeedAs, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureFeedAsDo) FindInBatches(result *[]*pasture.PastureFeedAs, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureFeedAsDo) Attrs(attrs ...field.AssignExpr) IPastureFeedAsDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureFeedAsDo) Assign(attrs ...field.AssignExpr) IPastureFeedAsDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureFeedAsDo) Joins(fields ...field.RelationField) IPastureFeedAsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureFeedAsDo) Preload(fields ...field.RelationField) IPastureFeedAsDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureFeedAsDo) FirstOrInit() (*pasture.PastureFeedAs, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedAs), nil
	}
}

func (p pastureFeedAsDo) FirstOrCreate() (*pasture.PastureFeedAs, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureFeedAs), nil
	}
}

func (p pastureFeedAsDo) FindByPage(offset int, limit int) (result []*pasture.PastureFeedAs, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureFeedAsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureFeedAsDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureFeedAsDo) Delete(models ...*pasture.PastureFeedAs) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureFeedAsDo) withDO(do gen.Dao) *pastureFeedAsDo {
	p.DO = *do.(*gen.DO)
	return p
}
