// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newToxIndex(db *gorm.DB, opts ...gen.DOOption) toxIndex {
	_toxIndex := toxIndex{}

	_toxIndex.toxIndexDo.UseDB(db, opts...)
	_toxIndex.toxIndexDo.UseModel(&pasture.ToxIndex{})

	tableName := _toxIndex.toxIndexDo.TableName()
	_toxIndex.ALL = field.NewAsterisk(tableName)
	_toxIndex.ID = field.NewUint(tableName, "id")
	_toxIndex.CreatedAt = field.NewTime(tableName, "created_at")
	_toxIndex.UpdatedAt = field.NewTime(tableName, "updated_at")
	_toxIndex.DeletedAt = field.NewField(tableName, "deleted_at")
	_toxIndex.WaterRecordID = field.NewUint(tableName, "water_record_id")
	_toxIndex.WaterQualityMonID = field.NewUint(tableName, "water_quality_mon_id")
	_toxIndex.ToxIndex1 = field.NewFloat64(tableName, "tox_index1")
	_toxIndex.ToxIndex2 = field.NewFloat64(tableName, "tox_index2")
	_toxIndex.ToxIndex3 = field.NewFloat64(tableName, "tox_index3")
	_toxIndex.ToxIndex4 = field.NewFloat64(tableName, "tox_index4")
	_toxIndex.ToxIndex5 = field.NewFloat64(tableName, "tox_index5")
	_toxIndex.ToxIndex6 = field.NewFloat64(tableName, "tox_index6")
	_toxIndex.ToxIndex7 = field.NewFloat64(tableName, "tox_index7")
	_toxIndex.ToxIndex8 = field.NewFloat64(tableName, "tox_index8")
	_toxIndex.ToxIndex9 = field.NewFloat64(tableName, "tox_index9")
	_toxIndex.ToxIndex10 = field.NewFloat64(tableName, "tox_index10")
	_toxIndex.ToxIndex11 = field.NewFloat64(tableName, "tox_index11")
	_toxIndex.ToxIndex12 = field.NewFloat64(tableName, "tox_index12")
	_toxIndex.ToxIndex13 = field.NewFloat64(tableName, "tox_index13")
	_toxIndex.ToxIndex14 = field.NewFloat64(tableName, "tox_index14")
	_toxIndex.ToxIndex15 = field.NewFloat64(tableName, "tox_index15")
	_toxIndex.ToxIndex16 = field.NewFloat64(tableName, "tox_index16")
	_toxIndex.ToxIndex17 = field.NewFloat64(tableName, "tox_index17")
	_toxIndex.ToxIndex18 = field.NewFloat64(tableName, "tox_index18")
	_toxIndex.ToxIndex19 = field.NewFloat64(tableName, "tox_index19")
	_toxIndex.ToxIndex20 = field.NewFloat64(tableName, "tox_index20")
	_toxIndex.ToxIndex21 = field.NewFloat64(tableName, "tox_index21")
	_toxIndex.ToxIndex22 = field.NewFloat64(tableName, "tox_index22")

	_toxIndex.fillFieldMap()

	return _toxIndex
}

type toxIndex struct {
	toxIndexDo toxIndexDo

	ALL               field.Asterisk
	ID                field.Uint
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	WaterRecordID     field.Uint
	WaterQualityMonID field.Uint
	ToxIndex1         field.Float64
	ToxIndex2         field.Float64
	ToxIndex3         field.Float64
	ToxIndex4         field.Float64
	ToxIndex5         field.Float64
	ToxIndex6         field.Float64
	ToxIndex7         field.Float64
	ToxIndex8         field.Float64
	ToxIndex9         field.Float64
	ToxIndex10        field.Float64
	ToxIndex11        field.Float64
	ToxIndex12        field.Float64
	ToxIndex13        field.Float64
	ToxIndex14        field.Float64
	ToxIndex15        field.Float64
	ToxIndex16        field.Float64
	ToxIndex17        field.Float64
	ToxIndex18        field.Float64
	ToxIndex19        field.Float64
	ToxIndex20        field.Float64
	ToxIndex21        field.Float64
	ToxIndex22        field.Float64

	fieldMap map[string]field.Expr
}

func (t toxIndex) Table(newTableName string) *toxIndex {
	t.toxIndexDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t toxIndex) As(alias string) *toxIndex {
	t.toxIndexDo.DO = *(t.toxIndexDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *toxIndex) updateTableName(table string) *toxIndex {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.WaterRecordID = field.NewUint(table, "water_record_id")
	t.WaterQualityMonID = field.NewUint(table, "water_quality_mon_id")
	t.ToxIndex1 = field.NewFloat64(table, "tox_index1")
	t.ToxIndex2 = field.NewFloat64(table, "tox_index2")
	t.ToxIndex3 = field.NewFloat64(table, "tox_index3")
	t.ToxIndex4 = field.NewFloat64(table, "tox_index4")
	t.ToxIndex5 = field.NewFloat64(table, "tox_index5")
	t.ToxIndex6 = field.NewFloat64(table, "tox_index6")
	t.ToxIndex7 = field.NewFloat64(table, "tox_index7")
	t.ToxIndex8 = field.NewFloat64(table, "tox_index8")
	t.ToxIndex9 = field.NewFloat64(table, "tox_index9")
	t.ToxIndex10 = field.NewFloat64(table, "tox_index10")
	t.ToxIndex11 = field.NewFloat64(table, "tox_index11")
	t.ToxIndex12 = field.NewFloat64(table, "tox_index12")
	t.ToxIndex13 = field.NewFloat64(table, "tox_index13")
	t.ToxIndex14 = field.NewFloat64(table, "tox_index14")
	t.ToxIndex15 = field.NewFloat64(table, "tox_index15")
	t.ToxIndex16 = field.NewFloat64(table, "tox_index16")
	t.ToxIndex17 = field.NewFloat64(table, "tox_index17")
	t.ToxIndex18 = field.NewFloat64(table, "tox_index18")
	t.ToxIndex19 = field.NewFloat64(table, "tox_index19")
	t.ToxIndex20 = field.NewFloat64(table, "tox_index20")
	t.ToxIndex21 = field.NewFloat64(table, "tox_index21")
	t.ToxIndex22 = field.NewFloat64(table, "tox_index22")

	t.fillFieldMap()

	return t
}

func (t *toxIndex) WithContext(ctx context.Context) IToxIndexDo { return t.toxIndexDo.WithContext(ctx) }

func (t toxIndex) TableName() string { return t.toxIndexDo.TableName() }

func (t toxIndex) Alias() string { return t.toxIndexDo.Alias() }

func (t toxIndex) Columns(cols ...field.Expr) gen.Columns { return t.toxIndexDo.Columns(cols...) }

func (t *toxIndex) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *toxIndex) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 28)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["water_record_id"] = t.WaterRecordID
	t.fieldMap["water_quality_mon_id"] = t.WaterQualityMonID
	t.fieldMap["tox_index1"] = t.ToxIndex1
	t.fieldMap["tox_index2"] = t.ToxIndex2
	t.fieldMap["tox_index3"] = t.ToxIndex3
	t.fieldMap["tox_index4"] = t.ToxIndex4
	t.fieldMap["tox_index5"] = t.ToxIndex5
	t.fieldMap["tox_index6"] = t.ToxIndex6
	t.fieldMap["tox_index7"] = t.ToxIndex7
	t.fieldMap["tox_index8"] = t.ToxIndex8
	t.fieldMap["tox_index9"] = t.ToxIndex9
	t.fieldMap["tox_index10"] = t.ToxIndex10
	t.fieldMap["tox_index11"] = t.ToxIndex11
	t.fieldMap["tox_index12"] = t.ToxIndex12
	t.fieldMap["tox_index13"] = t.ToxIndex13
	t.fieldMap["tox_index14"] = t.ToxIndex14
	t.fieldMap["tox_index15"] = t.ToxIndex15
	t.fieldMap["tox_index16"] = t.ToxIndex16
	t.fieldMap["tox_index17"] = t.ToxIndex17
	t.fieldMap["tox_index18"] = t.ToxIndex18
	t.fieldMap["tox_index19"] = t.ToxIndex19
	t.fieldMap["tox_index20"] = t.ToxIndex20
	t.fieldMap["tox_index21"] = t.ToxIndex21
	t.fieldMap["tox_index22"] = t.ToxIndex22
}

func (t toxIndex) clone(db *gorm.DB) toxIndex {
	t.toxIndexDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t toxIndex) replaceDB(db *gorm.DB) toxIndex {
	t.toxIndexDo.ReplaceDB(db)
	return t
}

type toxIndexDo struct{ gen.DO }

type IToxIndexDo interface {
	gen.SubQuery
	Debug() IToxIndexDo
	WithContext(ctx context.Context) IToxIndexDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IToxIndexDo
	WriteDB() IToxIndexDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IToxIndexDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IToxIndexDo
	Not(conds ...gen.Condition) IToxIndexDo
	Or(conds ...gen.Condition) IToxIndexDo
	Select(conds ...field.Expr) IToxIndexDo
	Where(conds ...gen.Condition) IToxIndexDo
	Order(conds ...field.Expr) IToxIndexDo
	Distinct(cols ...field.Expr) IToxIndexDo
	Omit(cols ...field.Expr) IToxIndexDo
	Join(table schema.Tabler, on ...field.Expr) IToxIndexDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IToxIndexDo
	RightJoin(table schema.Tabler, on ...field.Expr) IToxIndexDo
	Group(cols ...field.Expr) IToxIndexDo
	Having(conds ...gen.Condition) IToxIndexDo
	Limit(limit int) IToxIndexDo
	Offset(offset int) IToxIndexDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IToxIndexDo
	Unscoped() IToxIndexDo
	Create(values ...*pasture.ToxIndex) error
	CreateInBatches(values []*pasture.ToxIndex, batchSize int) error
	Save(values ...*pasture.ToxIndex) error
	First() (*pasture.ToxIndex, error)
	Take() (*pasture.ToxIndex, error)
	Last() (*pasture.ToxIndex, error)
	Find() ([]*pasture.ToxIndex, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.ToxIndex, err error)
	FindInBatches(result *[]*pasture.ToxIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.ToxIndex) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IToxIndexDo
	Assign(attrs ...field.AssignExpr) IToxIndexDo
	Joins(fields ...field.RelationField) IToxIndexDo
	Preload(fields ...field.RelationField) IToxIndexDo
	FirstOrInit() (*pasture.ToxIndex, error)
	FirstOrCreate() (*pasture.ToxIndex, error)
	FindByPage(offset int, limit int) (result []*pasture.ToxIndex, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IToxIndexDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t toxIndexDo) Debug() IToxIndexDo {
	return t.withDO(t.DO.Debug())
}

func (t toxIndexDo) WithContext(ctx context.Context) IToxIndexDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t toxIndexDo) ReadDB() IToxIndexDo {
	return t.Clauses(dbresolver.Read)
}

func (t toxIndexDo) WriteDB() IToxIndexDo {
	return t.Clauses(dbresolver.Write)
}

func (t toxIndexDo) Session(config *gorm.Session) IToxIndexDo {
	return t.withDO(t.DO.Session(config))
}

func (t toxIndexDo) Clauses(conds ...clause.Expression) IToxIndexDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t toxIndexDo) Returning(value interface{}, columns ...string) IToxIndexDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t toxIndexDo) Not(conds ...gen.Condition) IToxIndexDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t toxIndexDo) Or(conds ...gen.Condition) IToxIndexDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t toxIndexDo) Select(conds ...field.Expr) IToxIndexDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t toxIndexDo) Where(conds ...gen.Condition) IToxIndexDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t toxIndexDo) Order(conds ...field.Expr) IToxIndexDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t toxIndexDo) Distinct(cols ...field.Expr) IToxIndexDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t toxIndexDo) Omit(cols ...field.Expr) IToxIndexDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t toxIndexDo) Join(table schema.Tabler, on ...field.Expr) IToxIndexDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t toxIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) IToxIndexDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t toxIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) IToxIndexDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t toxIndexDo) Group(cols ...field.Expr) IToxIndexDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t toxIndexDo) Having(conds ...gen.Condition) IToxIndexDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t toxIndexDo) Limit(limit int) IToxIndexDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t toxIndexDo) Offset(offset int) IToxIndexDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t toxIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IToxIndexDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t toxIndexDo) Unscoped() IToxIndexDo {
	return t.withDO(t.DO.Unscoped())
}

func (t toxIndexDo) Create(values ...*pasture.ToxIndex) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t toxIndexDo) CreateInBatches(values []*pasture.ToxIndex, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t toxIndexDo) Save(values ...*pasture.ToxIndex) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t toxIndexDo) First() (*pasture.ToxIndex, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.ToxIndex), nil
	}
}

func (t toxIndexDo) Take() (*pasture.ToxIndex, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.ToxIndex), nil
	}
}

func (t toxIndexDo) Last() (*pasture.ToxIndex, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.ToxIndex), nil
	}
}

func (t toxIndexDo) Find() ([]*pasture.ToxIndex, error) {
	result, err := t.DO.Find()
	return result.([]*pasture.ToxIndex), err
}

func (t toxIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.ToxIndex, err error) {
	buf := make([]*pasture.ToxIndex, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t toxIndexDo) FindInBatches(result *[]*pasture.ToxIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t toxIndexDo) Attrs(attrs ...field.AssignExpr) IToxIndexDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t toxIndexDo) Assign(attrs ...field.AssignExpr) IToxIndexDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t toxIndexDo) Joins(fields ...field.RelationField) IToxIndexDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t toxIndexDo) Preload(fields ...field.RelationField) IToxIndexDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t toxIndexDo) FirstOrInit() (*pasture.ToxIndex, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.ToxIndex), nil
	}
}

func (t toxIndexDo) FirstOrCreate() (*pasture.ToxIndex, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.ToxIndex), nil
	}
}

func (t toxIndexDo) FindByPage(offset int, limit int) (result []*pasture.ToxIndex, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t toxIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t toxIndexDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t toxIndexDo) Delete(models ...*pasture.ToxIndex) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *toxIndexDo) withDO(do gen.Dao) *toxIndexDo {
	t.DO = *do.(*gen.DO)
	return t
}
