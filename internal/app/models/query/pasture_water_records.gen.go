// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureWaterRecord(db *gorm.DB, opts ...gen.DOOption) pastureWaterRecord {
	_pastureWaterRecord := pastureWaterRecord{}

	_pastureWaterRecord.pastureWaterRecordDo.UseDB(db, opts...)
	_pastureWaterRecord.pastureWaterRecordDo.UseModel(&pasture.PastureWaterRecord{})

	tableName := _pastureWaterRecord.pastureWaterRecordDo.TableName()
	_pastureWaterRecord.ALL = field.NewAsterisk(tableName)
	_pastureWaterRecord.ID = field.NewUint(tableName, "id")
	_pastureWaterRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureWaterRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureWaterRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureWaterRecord.TimeRecordAt = field.NewTime(tableName, "time_record_at")
	_pastureWaterRecord.HouseNumber = field.NewString(tableName, "house_number")
	_pastureWaterRecord.OapGci = pastureWaterRecordHasOneOapGci{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("OapGci", "pasture.PastureOapGci"),
	}

	_pastureWaterRecord.ToxIndex = pastureWaterRecordHasOneToxIndex{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ToxIndex", "pasture.PastureToxIndex"),
	}

	_pastureWaterRecord.MicroIndex = pastureWaterRecordHasOneMicroIndex{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MicroIndex", "pasture.PastureMicroIndex"),
	}

	_pastureWaterRecord.fillFieldMap()

	return _pastureWaterRecord
}

type pastureWaterRecord struct {
	pastureWaterRecordDo pastureWaterRecordDo

	ALL          field.Asterisk
	ID           field.Uint
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	TimeRecordAt field.Time
	HouseNumber  field.String
	OapGci       pastureWaterRecordHasOneOapGci

	ToxIndex pastureWaterRecordHasOneToxIndex

	MicroIndex pastureWaterRecordHasOneMicroIndex

	fieldMap map[string]field.Expr
}

func (p pastureWaterRecord) Table(newTableName string) *pastureWaterRecord {
	p.pastureWaterRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureWaterRecord) As(alias string) *pastureWaterRecord {
	p.pastureWaterRecordDo.DO = *(p.pastureWaterRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureWaterRecord) updateTableName(table string) *pastureWaterRecord {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.TimeRecordAt = field.NewTime(table, "time_record_at")
	p.HouseNumber = field.NewString(table, "house_number")

	p.fillFieldMap()

	return p
}

func (p *pastureWaterRecord) WithContext(ctx context.Context) IPastureWaterRecordDo {
	return p.pastureWaterRecordDo.WithContext(ctx)
}

func (p pastureWaterRecord) TableName() string { return p.pastureWaterRecordDo.TableName() }

func (p pastureWaterRecord) Alias() string { return p.pastureWaterRecordDo.Alias() }

func (p pastureWaterRecord) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureWaterRecordDo.Columns(cols...)
}

func (p *pastureWaterRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureWaterRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["time_record_at"] = p.TimeRecordAt
	p.fieldMap["house_number"] = p.HouseNumber

}

func (p pastureWaterRecord) clone(db *gorm.DB) pastureWaterRecord {
	p.pastureWaterRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureWaterRecord) replaceDB(db *gorm.DB) pastureWaterRecord {
	p.pastureWaterRecordDo.ReplaceDB(db)
	return p
}

type pastureWaterRecordHasOneOapGci struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureWaterRecordHasOneOapGci) Where(conds ...field.Expr) *pastureWaterRecordHasOneOapGci {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureWaterRecordHasOneOapGci) WithContext(ctx context.Context) *pastureWaterRecordHasOneOapGci {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureWaterRecordHasOneOapGci) Session(session *gorm.Session) *pastureWaterRecordHasOneOapGci {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureWaterRecordHasOneOapGci) Model(m *pasture.PastureWaterRecord) *pastureWaterRecordHasOneOapGciTx {
	return &pastureWaterRecordHasOneOapGciTx{a.db.Model(m).Association(a.Name())}
}

type pastureWaterRecordHasOneOapGciTx struct{ tx *gorm.Association }

func (a pastureWaterRecordHasOneOapGciTx) Find() (result *pasture.PastureOapGci, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureWaterRecordHasOneOapGciTx) Append(values ...*pasture.PastureOapGci) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureWaterRecordHasOneOapGciTx) Replace(values ...*pasture.PastureOapGci) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureWaterRecordHasOneOapGciTx) Delete(values ...*pasture.PastureOapGci) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureWaterRecordHasOneOapGciTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureWaterRecordHasOneOapGciTx) Count() int64 {
	return a.tx.Count()
}

type pastureWaterRecordHasOneToxIndex struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureWaterRecordHasOneToxIndex) Where(conds ...field.Expr) *pastureWaterRecordHasOneToxIndex {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureWaterRecordHasOneToxIndex) WithContext(ctx context.Context) *pastureWaterRecordHasOneToxIndex {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureWaterRecordHasOneToxIndex) Session(session *gorm.Session) *pastureWaterRecordHasOneToxIndex {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureWaterRecordHasOneToxIndex) Model(m *pasture.PastureWaterRecord) *pastureWaterRecordHasOneToxIndexTx {
	return &pastureWaterRecordHasOneToxIndexTx{a.db.Model(m).Association(a.Name())}
}

type pastureWaterRecordHasOneToxIndexTx struct{ tx *gorm.Association }

func (a pastureWaterRecordHasOneToxIndexTx) Find() (result *pasture.PastureToxIndex, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureWaterRecordHasOneToxIndexTx) Append(values ...*pasture.PastureToxIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureWaterRecordHasOneToxIndexTx) Replace(values ...*pasture.PastureToxIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureWaterRecordHasOneToxIndexTx) Delete(values ...*pasture.PastureToxIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureWaterRecordHasOneToxIndexTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureWaterRecordHasOneToxIndexTx) Count() int64 {
	return a.tx.Count()
}

type pastureWaterRecordHasOneMicroIndex struct {
	db *gorm.DB

	field.RelationField
}

func (a pastureWaterRecordHasOneMicroIndex) Where(conds ...field.Expr) *pastureWaterRecordHasOneMicroIndex {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a pastureWaterRecordHasOneMicroIndex) WithContext(ctx context.Context) *pastureWaterRecordHasOneMicroIndex {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a pastureWaterRecordHasOneMicroIndex) Session(session *gorm.Session) *pastureWaterRecordHasOneMicroIndex {
	a.db = a.db.Session(session)
	return &a
}

func (a pastureWaterRecordHasOneMicroIndex) Model(m *pasture.PastureWaterRecord) *pastureWaterRecordHasOneMicroIndexTx {
	return &pastureWaterRecordHasOneMicroIndexTx{a.db.Model(m).Association(a.Name())}
}

type pastureWaterRecordHasOneMicroIndexTx struct{ tx *gorm.Association }

func (a pastureWaterRecordHasOneMicroIndexTx) Find() (result *pasture.PastureMicroIndex, err error) {
	return result, a.tx.Find(&result)
}

func (a pastureWaterRecordHasOneMicroIndexTx) Append(values ...*pasture.PastureMicroIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a pastureWaterRecordHasOneMicroIndexTx) Replace(values ...*pasture.PastureMicroIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a pastureWaterRecordHasOneMicroIndexTx) Delete(values ...*pasture.PastureMicroIndex) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a pastureWaterRecordHasOneMicroIndexTx) Clear() error {
	return a.tx.Clear()
}

func (a pastureWaterRecordHasOneMicroIndexTx) Count() int64 {
	return a.tx.Count()
}

type pastureWaterRecordDo struct{ gen.DO }

type IPastureWaterRecordDo interface {
	gen.SubQuery
	Debug() IPastureWaterRecordDo
	WithContext(ctx context.Context) IPastureWaterRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureWaterRecordDo
	WriteDB() IPastureWaterRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureWaterRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureWaterRecordDo
	Not(conds ...gen.Condition) IPastureWaterRecordDo
	Or(conds ...gen.Condition) IPastureWaterRecordDo
	Select(conds ...field.Expr) IPastureWaterRecordDo
	Where(conds ...gen.Condition) IPastureWaterRecordDo
	Order(conds ...field.Expr) IPastureWaterRecordDo
	Distinct(cols ...field.Expr) IPastureWaterRecordDo
	Omit(cols ...field.Expr) IPastureWaterRecordDo
	Join(table schema.Tabler, on ...field.Expr) IPastureWaterRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterRecordDo
	Group(cols ...field.Expr) IPastureWaterRecordDo
	Having(conds ...gen.Condition) IPastureWaterRecordDo
	Limit(limit int) IPastureWaterRecordDo
	Offset(offset int) IPastureWaterRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterRecordDo
	Unscoped() IPastureWaterRecordDo
	Create(values ...*pasture.PastureWaterRecord) error
	CreateInBatches(values []*pasture.PastureWaterRecord, batchSize int) error
	Save(values ...*pasture.PastureWaterRecord) error
	First() (*pasture.PastureWaterRecord, error)
	Take() (*pasture.PastureWaterRecord, error)
	Last() (*pasture.PastureWaterRecord, error)
	Find() ([]*pasture.PastureWaterRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWaterRecord, err error)
	FindInBatches(result *[]*pasture.PastureWaterRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureWaterRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureWaterRecordDo
	Assign(attrs ...field.AssignExpr) IPastureWaterRecordDo
	Joins(fields ...field.RelationField) IPastureWaterRecordDo
	Preload(fields ...field.RelationField) IPastureWaterRecordDo
	FirstOrInit() (*pasture.PastureWaterRecord, error)
	FirstOrCreate() (*pasture.PastureWaterRecord, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureWaterRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureWaterRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureWaterRecordDo) Debug() IPastureWaterRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureWaterRecordDo) WithContext(ctx context.Context) IPastureWaterRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureWaterRecordDo) ReadDB() IPastureWaterRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureWaterRecordDo) WriteDB() IPastureWaterRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureWaterRecordDo) Session(config *gorm.Session) IPastureWaterRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureWaterRecordDo) Clauses(conds ...clause.Expression) IPastureWaterRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureWaterRecordDo) Returning(value interface{}, columns ...string) IPastureWaterRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureWaterRecordDo) Not(conds ...gen.Condition) IPastureWaterRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureWaterRecordDo) Or(conds ...gen.Condition) IPastureWaterRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureWaterRecordDo) Select(conds ...field.Expr) IPastureWaterRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureWaterRecordDo) Where(conds ...gen.Condition) IPastureWaterRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureWaterRecordDo) Order(conds ...field.Expr) IPastureWaterRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureWaterRecordDo) Distinct(cols ...field.Expr) IPastureWaterRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureWaterRecordDo) Omit(cols ...field.Expr) IPastureWaterRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureWaterRecordDo) Join(table schema.Tabler, on ...field.Expr) IPastureWaterRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureWaterRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureWaterRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureWaterRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureWaterRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureWaterRecordDo) Group(cols ...field.Expr) IPastureWaterRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureWaterRecordDo) Having(conds ...gen.Condition) IPastureWaterRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureWaterRecordDo) Limit(limit int) IPastureWaterRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureWaterRecordDo) Offset(offset int) IPastureWaterRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureWaterRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureWaterRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureWaterRecordDo) Unscoped() IPastureWaterRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureWaterRecordDo) Create(values ...*pasture.PastureWaterRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureWaterRecordDo) CreateInBatches(values []*pasture.PastureWaterRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureWaterRecordDo) Save(values ...*pasture.PastureWaterRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureWaterRecordDo) First() (*pasture.PastureWaterRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterRecord), nil
	}
}

func (p pastureWaterRecordDo) Take() (*pasture.PastureWaterRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterRecord), nil
	}
}

func (p pastureWaterRecordDo) Last() (*pasture.PastureWaterRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterRecord), nil
	}
}

func (p pastureWaterRecordDo) Find() ([]*pasture.PastureWaterRecord, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureWaterRecord), err
}

func (p pastureWaterRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureWaterRecord, err error) {
	buf := make([]*pasture.PastureWaterRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureWaterRecordDo) FindInBatches(result *[]*pasture.PastureWaterRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureWaterRecordDo) Attrs(attrs ...field.AssignExpr) IPastureWaterRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureWaterRecordDo) Assign(attrs ...field.AssignExpr) IPastureWaterRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureWaterRecordDo) Joins(fields ...field.RelationField) IPastureWaterRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureWaterRecordDo) Preload(fields ...field.RelationField) IPastureWaterRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureWaterRecordDo) FirstOrInit() (*pasture.PastureWaterRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterRecord), nil
	}
}

func (p pastureWaterRecordDo) FirstOrCreate() (*pasture.PastureWaterRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureWaterRecord), nil
	}
}

func (p pastureWaterRecordDo) FindByPage(offset int, limit int) (result []*pasture.PastureWaterRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureWaterRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureWaterRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureWaterRecordDo) Delete(models ...*pasture.PastureWaterRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureWaterRecordDo) withDO(do gen.Dao) *pastureWaterRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
