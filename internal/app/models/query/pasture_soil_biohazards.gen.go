// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureSoilBiohazard(db *gorm.DB, opts ...gen.DOOption) pastureSoilBiohazard {
	_pastureSoilBiohazard := pastureSoilBiohazard{}

	_pastureSoilBiohazard.pastureSoilBiohazardDo.UseDB(db, opts...)
	_pastureSoilBiohazard.pastureSoilBiohazardDo.UseModel(&pasture.PastureSoilBiohazard{})

	tableName := _pastureSoilBiohazard.pastureSoilBiohazardDo.TableName()
	_pastureSoilBiohazard.ALL = field.NewAsterisk(tableName)
	_pastureSoilBiohazard.ID = field.NewUint(tableName, "id")
	_pastureSoilBiohazard.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureSoilBiohazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureSoilBiohazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureSoilBiohazard.ColiformBacteria = field.NewUint(tableName, "coliform_bacteria")
	_pastureSoilBiohazard.TotalBacteria = field.NewUint(tableName, "total_bacteria")
	_pastureSoilBiohazard.PastureSoilID = field.NewUint(tableName, "pasture_soil_id")

	_pastureSoilBiohazard.fillFieldMap()

	return _pastureSoilBiohazard
}

type pastureSoilBiohazard struct {
	pastureSoilBiohazardDo pastureSoilBiohazardDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	ColiformBacteria field.Uint
	TotalBacteria    field.Uint
	PastureSoilID    field.Uint

	fieldMap map[string]field.Expr
}

func (p pastureSoilBiohazard) Table(newTableName string) *pastureSoilBiohazard {
	p.pastureSoilBiohazardDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureSoilBiohazard) As(alias string) *pastureSoilBiohazard {
	p.pastureSoilBiohazardDo.DO = *(p.pastureSoilBiohazardDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureSoilBiohazard) updateTableName(table string) *pastureSoilBiohazard {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ColiformBacteria = field.NewUint(table, "coliform_bacteria")
	p.TotalBacteria = field.NewUint(table, "total_bacteria")
	p.PastureSoilID = field.NewUint(table, "pasture_soil_id")

	p.fillFieldMap()

	return p
}

func (p *pastureSoilBiohazard) WithContext(ctx context.Context) IPastureSoilBiohazardDo {
	return p.pastureSoilBiohazardDo.WithContext(ctx)
}

func (p pastureSoilBiohazard) TableName() string { return p.pastureSoilBiohazardDo.TableName() }

func (p pastureSoilBiohazard) Alias() string { return p.pastureSoilBiohazardDo.Alias() }

func (p pastureSoilBiohazard) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureSoilBiohazardDo.Columns(cols...)
}

func (p *pastureSoilBiohazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureSoilBiohazard) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["coliform_bacteria"] = p.ColiformBacteria
	p.fieldMap["total_bacteria"] = p.TotalBacteria
	p.fieldMap["pasture_soil_id"] = p.PastureSoilID
}

func (p pastureSoilBiohazard) clone(db *gorm.DB) pastureSoilBiohazard {
	p.pastureSoilBiohazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureSoilBiohazard) replaceDB(db *gorm.DB) pastureSoilBiohazard {
	p.pastureSoilBiohazardDo.ReplaceDB(db)
	return p
}

type pastureSoilBiohazardDo struct{ gen.DO }

type IPastureSoilBiohazardDo interface {
	gen.SubQuery
	Debug() IPastureSoilBiohazardDo
	WithContext(ctx context.Context) IPastureSoilBiohazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureSoilBiohazardDo
	WriteDB() IPastureSoilBiohazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureSoilBiohazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureSoilBiohazardDo
	Not(conds ...gen.Condition) IPastureSoilBiohazardDo
	Or(conds ...gen.Condition) IPastureSoilBiohazardDo
	Select(conds ...field.Expr) IPastureSoilBiohazardDo
	Where(conds ...gen.Condition) IPastureSoilBiohazardDo
	Order(conds ...field.Expr) IPastureSoilBiohazardDo
	Distinct(cols ...field.Expr) IPastureSoilBiohazardDo
	Omit(cols ...field.Expr) IPastureSoilBiohazardDo
	Join(table schema.Tabler, on ...field.Expr) IPastureSoilBiohazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureSoilBiohazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureSoilBiohazardDo
	Group(cols ...field.Expr) IPastureSoilBiohazardDo
	Having(conds ...gen.Condition) IPastureSoilBiohazardDo
	Limit(limit int) IPastureSoilBiohazardDo
	Offset(offset int) IPastureSoilBiohazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureSoilBiohazardDo
	Unscoped() IPastureSoilBiohazardDo
	Create(values ...*pasture.PastureSoilBiohazard) error
	CreateInBatches(values []*pasture.PastureSoilBiohazard, batchSize int) error
	Save(values ...*pasture.PastureSoilBiohazard) error
	First() (*pasture.PastureSoilBiohazard, error)
	Take() (*pasture.PastureSoilBiohazard, error)
	Last() (*pasture.PastureSoilBiohazard, error)
	Find() ([]*pasture.PastureSoilBiohazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureSoilBiohazard, err error)
	FindInBatches(result *[]*pasture.PastureSoilBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureSoilBiohazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureSoilBiohazardDo
	Assign(attrs ...field.AssignExpr) IPastureSoilBiohazardDo
	Joins(fields ...field.RelationField) IPastureSoilBiohazardDo
	Preload(fields ...field.RelationField) IPastureSoilBiohazardDo
	FirstOrInit() (*pasture.PastureSoilBiohazard, error)
	FirstOrCreate() (*pasture.PastureSoilBiohazard, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureSoilBiohazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureSoilBiohazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureSoilBiohazardDo) Debug() IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureSoilBiohazardDo) WithContext(ctx context.Context) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureSoilBiohazardDo) ReadDB() IPastureSoilBiohazardDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureSoilBiohazardDo) WriteDB() IPastureSoilBiohazardDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureSoilBiohazardDo) Session(config *gorm.Session) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureSoilBiohazardDo) Clauses(conds ...clause.Expression) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureSoilBiohazardDo) Returning(value interface{}, columns ...string) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureSoilBiohazardDo) Not(conds ...gen.Condition) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureSoilBiohazardDo) Or(conds ...gen.Condition) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureSoilBiohazardDo) Select(conds ...field.Expr) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureSoilBiohazardDo) Where(conds ...gen.Condition) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureSoilBiohazardDo) Order(conds ...field.Expr) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureSoilBiohazardDo) Distinct(cols ...field.Expr) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureSoilBiohazardDo) Omit(cols ...field.Expr) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureSoilBiohazardDo) Join(table schema.Tabler, on ...field.Expr) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureSoilBiohazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureSoilBiohazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureSoilBiohazardDo) Group(cols ...field.Expr) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureSoilBiohazardDo) Having(conds ...gen.Condition) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureSoilBiohazardDo) Limit(limit int) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureSoilBiohazardDo) Offset(offset int) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureSoilBiohazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureSoilBiohazardDo) Unscoped() IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureSoilBiohazardDo) Create(values ...*pasture.PastureSoilBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureSoilBiohazardDo) CreateInBatches(values []*pasture.PastureSoilBiohazard, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureSoilBiohazardDo) Save(values ...*pasture.PastureSoilBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureSoilBiohazardDo) First() (*pasture.PastureSoilBiohazard, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoilBiohazard), nil
	}
}

func (p pastureSoilBiohazardDo) Take() (*pasture.PastureSoilBiohazard, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoilBiohazard), nil
	}
}

func (p pastureSoilBiohazardDo) Last() (*pasture.PastureSoilBiohazard, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoilBiohazard), nil
	}
}

func (p pastureSoilBiohazardDo) Find() ([]*pasture.PastureSoilBiohazard, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureSoilBiohazard), err
}

func (p pastureSoilBiohazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureSoilBiohazard, err error) {
	buf := make([]*pasture.PastureSoilBiohazard, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureSoilBiohazardDo) FindInBatches(result *[]*pasture.PastureSoilBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureSoilBiohazardDo) Attrs(attrs ...field.AssignExpr) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureSoilBiohazardDo) Assign(attrs ...field.AssignExpr) IPastureSoilBiohazardDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureSoilBiohazardDo) Joins(fields ...field.RelationField) IPastureSoilBiohazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureSoilBiohazardDo) Preload(fields ...field.RelationField) IPastureSoilBiohazardDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureSoilBiohazardDo) FirstOrInit() (*pasture.PastureSoilBiohazard, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoilBiohazard), nil
	}
}

func (p pastureSoilBiohazardDo) FirstOrCreate() (*pasture.PastureSoilBiohazard, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureSoilBiohazard), nil
	}
}

func (p pastureSoilBiohazardDo) FindByPage(offset int, limit int) (result []*pasture.PastureSoilBiohazard, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureSoilBiohazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureSoilBiohazardDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureSoilBiohazardDo) Delete(models ...*pasture.PastureSoilBiohazard) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureSoilBiohazardDo) withDO(do gen.Dao) *pastureSoilBiohazardDo {
	p.DO = *do.(*gen.DO)
	return p
}
