// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/pasture"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPastureDisinfectionRecord(db *gorm.DB, opts ...gen.DOOption) pastureDisinfectionRecord {
	_pastureDisinfectionRecord := pastureDisinfectionRecord{}

	_pastureDisinfectionRecord.pastureDisinfectionRecordDo.UseDB(db, opts...)
	_pastureDisinfectionRecord.pastureDisinfectionRecordDo.UseModel(&pasture.PastureDisinfectionRecord{})

	tableName := _pastureDisinfectionRecord.pastureDisinfectionRecordDo.TableName()
	_pastureDisinfectionRecord.ALL = field.NewAsterisk(tableName)
	_pastureDisinfectionRecord.ID = field.NewUint(tableName, "id")
	_pastureDisinfectionRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_pastureDisinfectionRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_pastureDisinfectionRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_pastureDisinfectionRecord.TimeRecordAt = field.NewTime(tableName, "time_record_at")
	_pastureDisinfectionRecord.HouseNumber = field.NewString(tableName, "house_number")
	_pastureDisinfectionRecord.FarmDisRecord1 = field.NewString(tableName, "farm_dis_record1")
	_pastureDisinfectionRecord.FarmDisRecord2 = field.NewString(tableName, "farm_dis_record2")
	_pastureDisinfectionRecord.FarmDisRecord3 = field.NewString(tableName, "farm_dis_record3")

	_pastureDisinfectionRecord.fillFieldMap()

	return _pastureDisinfectionRecord
}

type pastureDisinfectionRecord struct {
	pastureDisinfectionRecordDo pastureDisinfectionRecordDo

	ALL            field.Asterisk
	ID             field.Uint
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	TimeRecordAt   field.Time
	HouseNumber    field.String
	FarmDisRecord1 field.String
	FarmDisRecord2 field.String
	FarmDisRecord3 field.String

	fieldMap map[string]field.Expr
}

func (p pastureDisinfectionRecord) Table(newTableName string) *pastureDisinfectionRecord {
	p.pastureDisinfectionRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pastureDisinfectionRecord) As(alias string) *pastureDisinfectionRecord {
	p.pastureDisinfectionRecordDo.DO = *(p.pastureDisinfectionRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pastureDisinfectionRecord) updateTableName(table string) *pastureDisinfectionRecord {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.TimeRecordAt = field.NewTime(table, "time_record_at")
	p.HouseNumber = field.NewString(table, "house_number")
	p.FarmDisRecord1 = field.NewString(table, "farm_dis_record1")
	p.FarmDisRecord2 = field.NewString(table, "farm_dis_record2")
	p.FarmDisRecord3 = field.NewString(table, "farm_dis_record3")

	p.fillFieldMap()

	return p
}

func (p *pastureDisinfectionRecord) WithContext(ctx context.Context) IPastureDisinfectionRecordDo {
	return p.pastureDisinfectionRecordDo.WithContext(ctx)
}

func (p pastureDisinfectionRecord) TableName() string {
	return p.pastureDisinfectionRecordDo.TableName()
}

func (p pastureDisinfectionRecord) Alias() string { return p.pastureDisinfectionRecordDo.Alias() }

func (p pastureDisinfectionRecord) Columns(cols ...field.Expr) gen.Columns {
	return p.pastureDisinfectionRecordDo.Columns(cols...)
}

func (p *pastureDisinfectionRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pastureDisinfectionRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["time_record_at"] = p.TimeRecordAt
	p.fieldMap["house_number"] = p.HouseNumber
	p.fieldMap["farm_dis_record1"] = p.FarmDisRecord1
	p.fieldMap["farm_dis_record2"] = p.FarmDisRecord2
	p.fieldMap["farm_dis_record3"] = p.FarmDisRecord3
}

func (p pastureDisinfectionRecord) clone(db *gorm.DB) pastureDisinfectionRecord {
	p.pastureDisinfectionRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pastureDisinfectionRecord) replaceDB(db *gorm.DB) pastureDisinfectionRecord {
	p.pastureDisinfectionRecordDo.ReplaceDB(db)
	return p
}

type pastureDisinfectionRecordDo struct{ gen.DO }

type IPastureDisinfectionRecordDo interface {
	gen.SubQuery
	Debug() IPastureDisinfectionRecordDo
	WithContext(ctx context.Context) IPastureDisinfectionRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPastureDisinfectionRecordDo
	WriteDB() IPastureDisinfectionRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPastureDisinfectionRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPastureDisinfectionRecordDo
	Not(conds ...gen.Condition) IPastureDisinfectionRecordDo
	Or(conds ...gen.Condition) IPastureDisinfectionRecordDo
	Select(conds ...field.Expr) IPastureDisinfectionRecordDo
	Where(conds ...gen.Condition) IPastureDisinfectionRecordDo
	Order(conds ...field.Expr) IPastureDisinfectionRecordDo
	Distinct(cols ...field.Expr) IPastureDisinfectionRecordDo
	Omit(cols ...field.Expr) IPastureDisinfectionRecordDo
	Join(table schema.Tabler, on ...field.Expr) IPastureDisinfectionRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPastureDisinfectionRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPastureDisinfectionRecordDo
	Group(cols ...field.Expr) IPastureDisinfectionRecordDo
	Having(conds ...gen.Condition) IPastureDisinfectionRecordDo
	Limit(limit int) IPastureDisinfectionRecordDo
	Offset(offset int) IPastureDisinfectionRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureDisinfectionRecordDo
	Unscoped() IPastureDisinfectionRecordDo
	Create(values ...*pasture.PastureDisinfectionRecord) error
	CreateInBatches(values []*pasture.PastureDisinfectionRecord, batchSize int) error
	Save(values ...*pasture.PastureDisinfectionRecord) error
	First() (*pasture.PastureDisinfectionRecord, error)
	Take() (*pasture.PastureDisinfectionRecord, error)
	Last() (*pasture.PastureDisinfectionRecord, error)
	Find() ([]*pasture.PastureDisinfectionRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureDisinfectionRecord, err error)
	FindInBatches(result *[]*pasture.PastureDisinfectionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*pasture.PastureDisinfectionRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPastureDisinfectionRecordDo
	Assign(attrs ...field.AssignExpr) IPastureDisinfectionRecordDo
	Joins(fields ...field.RelationField) IPastureDisinfectionRecordDo
	Preload(fields ...field.RelationField) IPastureDisinfectionRecordDo
	FirstOrInit() (*pasture.PastureDisinfectionRecord, error)
	FirstOrCreate() (*pasture.PastureDisinfectionRecord, error)
	FindByPage(offset int, limit int) (result []*pasture.PastureDisinfectionRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPastureDisinfectionRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pastureDisinfectionRecordDo) Debug() IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p pastureDisinfectionRecordDo) WithContext(ctx context.Context) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pastureDisinfectionRecordDo) ReadDB() IPastureDisinfectionRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p pastureDisinfectionRecordDo) WriteDB() IPastureDisinfectionRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p pastureDisinfectionRecordDo) Session(config *gorm.Session) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p pastureDisinfectionRecordDo) Clauses(conds ...clause.Expression) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pastureDisinfectionRecordDo) Returning(value interface{}, columns ...string) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pastureDisinfectionRecordDo) Not(conds ...gen.Condition) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pastureDisinfectionRecordDo) Or(conds ...gen.Condition) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pastureDisinfectionRecordDo) Select(conds ...field.Expr) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pastureDisinfectionRecordDo) Where(conds ...gen.Condition) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pastureDisinfectionRecordDo) Order(conds ...field.Expr) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pastureDisinfectionRecordDo) Distinct(cols ...field.Expr) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pastureDisinfectionRecordDo) Omit(cols ...field.Expr) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pastureDisinfectionRecordDo) Join(table schema.Tabler, on ...field.Expr) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pastureDisinfectionRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pastureDisinfectionRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pastureDisinfectionRecordDo) Group(cols ...field.Expr) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pastureDisinfectionRecordDo) Having(conds ...gen.Condition) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pastureDisinfectionRecordDo) Limit(limit int) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pastureDisinfectionRecordDo) Offset(offset int) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pastureDisinfectionRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pastureDisinfectionRecordDo) Unscoped() IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pastureDisinfectionRecordDo) Create(values ...*pasture.PastureDisinfectionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pastureDisinfectionRecordDo) CreateInBatches(values []*pasture.PastureDisinfectionRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pastureDisinfectionRecordDo) Save(values ...*pasture.PastureDisinfectionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pastureDisinfectionRecordDo) First() (*pasture.PastureDisinfectionRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureDisinfectionRecord), nil
	}
}

func (p pastureDisinfectionRecordDo) Take() (*pasture.PastureDisinfectionRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureDisinfectionRecord), nil
	}
}

func (p pastureDisinfectionRecordDo) Last() (*pasture.PastureDisinfectionRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureDisinfectionRecord), nil
	}
}

func (p pastureDisinfectionRecordDo) Find() ([]*pasture.PastureDisinfectionRecord, error) {
	result, err := p.DO.Find()
	return result.([]*pasture.PastureDisinfectionRecord), err
}

func (p pastureDisinfectionRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*pasture.PastureDisinfectionRecord, err error) {
	buf := make([]*pasture.PastureDisinfectionRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pastureDisinfectionRecordDo) FindInBatches(result *[]*pasture.PastureDisinfectionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pastureDisinfectionRecordDo) Attrs(attrs ...field.AssignExpr) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pastureDisinfectionRecordDo) Assign(attrs ...field.AssignExpr) IPastureDisinfectionRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pastureDisinfectionRecordDo) Joins(fields ...field.RelationField) IPastureDisinfectionRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pastureDisinfectionRecordDo) Preload(fields ...field.RelationField) IPastureDisinfectionRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pastureDisinfectionRecordDo) FirstOrInit() (*pasture.PastureDisinfectionRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureDisinfectionRecord), nil
	}
}

func (p pastureDisinfectionRecordDo) FirstOrCreate() (*pasture.PastureDisinfectionRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*pasture.PastureDisinfectionRecord), nil
	}
}

func (p pastureDisinfectionRecordDo) FindByPage(offset int, limit int) (result []*pasture.PastureDisinfectionRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pastureDisinfectionRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pastureDisinfectionRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pastureDisinfectionRecordDo) Delete(models ...*pasture.PastureDisinfectionRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pastureDisinfectionRecordDo) withDO(do gen.Dao) *pastureDisinfectionRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
