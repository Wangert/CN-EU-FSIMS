// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/fatten"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFattenWaterBiohazard(db *gorm.DB, opts ...gen.DOOption) fattenWaterBiohazard {
	_fattenWaterBiohazard := fattenWaterBiohazard{}

	_fattenWaterBiohazard.fattenWaterBiohazardDo.UseDB(db, opts...)
	_fattenWaterBiohazard.fattenWaterBiohazardDo.UseModel(&fatten.FattenWaterBiohazard{})

	tableName := _fattenWaterBiohazard.fattenWaterBiohazardDo.TableName()
	_fattenWaterBiohazard.ALL = field.NewAsterisk(tableName)
	_fattenWaterBiohazard.ID = field.NewUint(tableName, "id")
	_fattenWaterBiohazard.CreatedAt = field.NewTime(tableName, "created_at")
	_fattenWaterBiohazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fattenWaterBiohazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_fattenWaterBiohazard.ColiformBacteria = field.NewUint(tableName, "coliform_bacteria")
	_fattenWaterBiohazard.FattenWaterID = field.NewUint(tableName, "fatten_water_id")

	_fattenWaterBiohazard.fillFieldMap()

	return _fattenWaterBiohazard
}

type fattenWaterBiohazard struct {
	fattenWaterBiohazardDo fattenWaterBiohazardDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	ColiformBacteria field.Uint
	FattenWaterID    field.Uint

	fieldMap map[string]field.Expr
}

func (f fattenWaterBiohazard) Table(newTableName string) *fattenWaterBiohazard {
	f.fattenWaterBiohazardDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fattenWaterBiohazard) As(alias string) *fattenWaterBiohazard {
	f.fattenWaterBiohazardDo.DO = *(f.fattenWaterBiohazardDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fattenWaterBiohazard) updateTableName(table string) *fattenWaterBiohazard {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.ColiformBacteria = field.NewUint(table, "coliform_bacteria")
	f.FattenWaterID = field.NewUint(table, "fatten_water_id")

	f.fillFieldMap()

	return f
}

func (f *fattenWaterBiohazard) WithContext(ctx context.Context) IFattenWaterBiohazardDo {
	return f.fattenWaterBiohazardDo.WithContext(ctx)
}

func (f fattenWaterBiohazard) TableName() string { return f.fattenWaterBiohazardDo.TableName() }

func (f fattenWaterBiohazard) Alias() string { return f.fattenWaterBiohazardDo.Alias() }

func (f fattenWaterBiohazard) Columns(cols ...field.Expr) gen.Columns {
	return f.fattenWaterBiohazardDo.Columns(cols...)
}

func (f *fattenWaterBiohazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fattenWaterBiohazard) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["coliform_bacteria"] = f.ColiformBacteria
	f.fieldMap["fatten_water_id"] = f.FattenWaterID
}

func (f fattenWaterBiohazard) clone(db *gorm.DB) fattenWaterBiohazard {
	f.fattenWaterBiohazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fattenWaterBiohazard) replaceDB(db *gorm.DB) fattenWaterBiohazard {
	f.fattenWaterBiohazardDo.ReplaceDB(db)
	return f
}

type fattenWaterBiohazardDo struct{ gen.DO }

type IFattenWaterBiohazardDo interface {
	gen.SubQuery
	Debug() IFattenWaterBiohazardDo
	WithContext(ctx context.Context) IFattenWaterBiohazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFattenWaterBiohazardDo
	WriteDB() IFattenWaterBiohazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFattenWaterBiohazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFattenWaterBiohazardDo
	Not(conds ...gen.Condition) IFattenWaterBiohazardDo
	Or(conds ...gen.Condition) IFattenWaterBiohazardDo
	Select(conds ...field.Expr) IFattenWaterBiohazardDo
	Where(conds ...gen.Condition) IFattenWaterBiohazardDo
	Order(conds ...field.Expr) IFattenWaterBiohazardDo
	Distinct(cols ...field.Expr) IFattenWaterBiohazardDo
	Omit(cols ...field.Expr) IFattenWaterBiohazardDo
	Join(table schema.Tabler, on ...field.Expr) IFattenWaterBiohazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFattenWaterBiohazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFattenWaterBiohazardDo
	Group(cols ...field.Expr) IFattenWaterBiohazardDo
	Having(conds ...gen.Condition) IFattenWaterBiohazardDo
	Limit(limit int) IFattenWaterBiohazardDo
	Offset(offset int) IFattenWaterBiohazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenWaterBiohazardDo
	Unscoped() IFattenWaterBiohazardDo
	Create(values ...*fatten.FattenWaterBiohazard) error
	CreateInBatches(values []*fatten.FattenWaterBiohazard, batchSize int) error
	Save(values ...*fatten.FattenWaterBiohazard) error
	First() (*fatten.FattenWaterBiohazard, error)
	Take() (*fatten.FattenWaterBiohazard, error)
	Last() (*fatten.FattenWaterBiohazard, error)
	Find() ([]*fatten.FattenWaterBiohazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenWaterBiohazard, err error)
	FindInBatches(result *[]*fatten.FattenWaterBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*fatten.FattenWaterBiohazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFattenWaterBiohazardDo
	Assign(attrs ...field.AssignExpr) IFattenWaterBiohazardDo
	Joins(fields ...field.RelationField) IFattenWaterBiohazardDo
	Preload(fields ...field.RelationField) IFattenWaterBiohazardDo
	FirstOrInit() (*fatten.FattenWaterBiohazard, error)
	FirstOrCreate() (*fatten.FattenWaterBiohazard, error)
	FindByPage(offset int, limit int) (result []*fatten.FattenWaterBiohazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFattenWaterBiohazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fattenWaterBiohazardDo) Debug() IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Debug())
}

func (f fattenWaterBiohazardDo) WithContext(ctx context.Context) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fattenWaterBiohazardDo) ReadDB() IFattenWaterBiohazardDo {
	return f.Clauses(dbresolver.Read)
}

func (f fattenWaterBiohazardDo) WriteDB() IFattenWaterBiohazardDo {
	return f.Clauses(dbresolver.Write)
}

func (f fattenWaterBiohazardDo) Session(config *gorm.Session) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Session(config))
}

func (f fattenWaterBiohazardDo) Clauses(conds ...clause.Expression) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fattenWaterBiohazardDo) Returning(value interface{}, columns ...string) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fattenWaterBiohazardDo) Not(conds ...gen.Condition) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fattenWaterBiohazardDo) Or(conds ...gen.Condition) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fattenWaterBiohazardDo) Select(conds ...field.Expr) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fattenWaterBiohazardDo) Where(conds ...gen.Condition) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fattenWaterBiohazardDo) Order(conds ...field.Expr) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fattenWaterBiohazardDo) Distinct(cols ...field.Expr) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fattenWaterBiohazardDo) Omit(cols ...field.Expr) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fattenWaterBiohazardDo) Join(table schema.Tabler, on ...field.Expr) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fattenWaterBiohazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fattenWaterBiohazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fattenWaterBiohazardDo) Group(cols ...field.Expr) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fattenWaterBiohazardDo) Having(conds ...gen.Condition) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fattenWaterBiohazardDo) Limit(limit int) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fattenWaterBiohazardDo) Offset(offset int) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fattenWaterBiohazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fattenWaterBiohazardDo) Unscoped() IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fattenWaterBiohazardDo) Create(values ...*fatten.FattenWaterBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fattenWaterBiohazardDo) CreateInBatches(values []*fatten.FattenWaterBiohazard, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fattenWaterBiohazardDo) Save(values ...*fatten.FattenWaterBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fattenWaterBiohazardDo) First() (*fatten.FattenWaterBiohazard, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterBiohazard), nil
	}
}

func (f fattenWaterBiohazardDo) Take() (*fatten.FattenWaterBiohazard, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterBiohazard), nil
	}
}

func (f fattenWaterBiohazardDo) Last() (*fatten.FattenWaterBiohazard, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterBiohazard), nil
	}
}

func (f fattenWaterBiohazardDo) Find() ([]*fatten.FattenWaterBiohazard, error) {
	result, err := f.DO.Find()
	return result.([]*fatten.FattenWaterBiohazard), err
}

func (f fattenWaterBiohazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenWaterBiohazard, err error) {
	buf := make([]*fatten.FattenWaterBiohazard, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fattenWaterBiohazardDo) FindInBatches(result *[]*fatten.FattenWaterBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fattenWaterBiohazardDo) Attrs(attrs ...field.AssignExpr) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fattenWaterBiohazardDo) Assign(attrs ...field.AssignExpr) IFattenWaterBiohazardDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fattenWaterBiohazardDo) Joins(fields ...field.RelationField) IFattenWaterBiohazardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fattenWaterBiohazardDo) Preload(fields ...field.RelationField) IFattenWaterBiohazardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fattenWaterBiohazardDo) FirstOrInit() (*fatten.FattenWaterBiohazard, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterBiohazard), nil
	}
}

func (f fattenWaterBiohazardDo) FirstOrCreate() (*fatten.FattenWaterBiohazard, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenWaterBiohazard), nil
	}
}

func (f fattenWaterBiohazardDo) FindByPage(offset int, limit int) (result []*fatten.FattenWaterBiohazard, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fattenWaterBiohazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fattenWaterBiohazardDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fattenWaterBiohazardDo) Delete(models ...*fatten.FattenWaterBiohazard) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fattenWaterBiohazardDo) withDO(do gen.Dao) *fattenWaterBiohazardDo {
	f.DO = *do.(*gen.DO)
	return f
}
