// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"CN-EU-FSIMS/internal/app/models/fatten"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newFattenSoilBiohazard(db *gorm.DB, opts ...gen.DOOption) fattenSoilBiohazard {
	_fattenSoilBiohazard := fattenSoilBiohazard{}

	_fattenSoilBiohazard.fattenSoilBiohazardDo.UseDB(db, opts...)
	_fattenSoilBiohazard.fattenSoilBiohazardDo.UseModel(&fatten.FattenSoilBiohazard{})

	tableName := _fattenSoilBiohazard.fattenSoilBiohazardDo.TableName()
	_fattenSoilBiohazard.ALL = field.NewAsterisk(tableName)
	_fattenSoilBiohazard.ID = field.NewUint(tableName, "id")
	_fattenSoilBiohazard.CreatedAt = field.NewTime(tableName, "created_at")
	_fattenSoilBiohazard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_fattenSoilBiohazard.DeletedAt = field.NewField(tableName, "deleted_at")
	_fattenSoilBiohazard.ColiformBacteria = field.NewUint(tableName, "coliform_bacteria")
	_fattenSoilBiohazard.TotalBacteria = field.NewUint(tableName, "total_bacteria")
	_fattenSoilBiohazard.FattenSoilID = field.NewUint(tableName, "fatten_soil_id")

	_fattenSoilBiohazard.fillFieldMap()

	return _fattenSoilBiohazard
}

type fattenSoilBiohazard struct {
	fattenSoilBiohazardDo fattenSoilBiohazardDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	ColiformBacteria field.Uint
	TotalBacteria    field.Uint
	FattenSoilID     field.Uint

	fieldMap map[string]field.Expr
}

func (f fattenSoilBiohazard) Table(newTableName string) *fattenSoilBiohazard {
	f.fattenSoilBiohazardDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fattenSoilBiohazard) As(alias string) *fattenSoilBiohazard {
	f.fattenSoilBiohazardDo.DO = *(f.fattenSoilBiohazardDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fattenSoilBiohazard) updateTableName(table string) *fattenSoilBiohazard {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "id")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")
	f.ColiformBacteria = field.NewUint(table, "coliform_bacteria")
	f.TotalBacteria = field.NewUint(table, "total_bacteria")
	f.FattenSoilID = field.NewUint(table, "fatten_soil_id")

	f.fillFieldMap()

	return f
}

func (f *fattenSoilBiohazard) WithContext(ctx context.Context) IFattenSoilBiohazardDo {
	return f.fattenSoilBiohazardDo.WithContext(ctx)
}

func (f fattenSoilBiohazard) TableName() string { return f.fattenSoilBiohazardDo.TableName() }

func (f fattenSoilBiohazard) Alias() string { return f.fattenSoilBiohazardDo.Alias() }

func (f fattenSoilBiohazard) Columns(cols ...field.Expr) gen.Columns {
	return f.fattenSoilBiohazardDo.Columns(cols...)
}

func (f *fattenSoilBiohazard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fattenSoilBiohazard) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
	f.fieldMap["coliform_bacteria"] = f.ColiformBacteria
	f.fieldMap["total_bacteria"] = f.TotalBacteria
	f.fieldMap["fatten_soil_id"] = f.FattenSoilID
}

func (f fattenSoilBiohazard) clone(db *gorm.DB) fattenSoilBiohazard {
	f.fattenSoilBiohazardDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fattenSoilBiohazard) replaceDB(db *gorm.DB) fattenSoilBiohazard {
	f.fattenSoilBiohazardDo.ReplaceDB(db)
	return f
}

type fattenSoilBiohazardDo struct{ gen.DO }

type IFattenSoilBiohazardDo interface {
	gen.SubQuery
	Debug() IFattenSoilBiohazardDo
	WithContext(ctx context.Context) IFattenSoilBiohazardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFattenSoilBiohazardDo
	WriteDB() IFattenSoilBiohazardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFattenSoilBiohazardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFattenSoilBiohazardDo
	Not(conds ...gen.Condition) IFattenSoilBiohazardDo
	Or(conds ...gen.Condition) IFattenSoilBiohazardDo
	Select(conds ...field.Expr) IFattenSoilBiohazardDo
	Where(conds ...gen.Condition) IFattenSoilBiohazardDo
	Order(conds ...field.Expr) IFattenSoilBiohazardDo
	Distinct(cols ...field.Expr) IFattenSoilBiohazardDo
	Omit(cols ...field.Expr) IFattenSoilBiohazardDo
	Join(table schema.Tabler, on ...field.Expr) IFattenSoilBiohazardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFattenSoilBiohazardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFattenSoilBiohazardDo
	Group(cols ...field.Expr) IFattenSoilBiohazardDo
	Having(conds ...gen.Condition) IFattenSoilBiohazardDo
	Limit(limit int) IFattenSoilBiohazardDo
	Offset(offset int) IFattenSoilBiohazardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenSoilBiohazardDo
	Unscoped() IFattenSoilBiohazardDo
	Create(values ...*fatten.FattenSoilBiohazard) error
	CreateInBatches(values []*fatten.FattenSoilBiohazard, batchSize int) error
	Save(values ...*fatten.FattenSoilBiohazard) error
	First() (*fatten.FattenSoilBiohazard, error)
	Take() (*fatten.FattenSoilBiohazard, error)
	Last() (*fatten.FattenSoilBiohazard, error)
	Find() ([]*fatten.FattenSoilBiohazard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenSoilBiohazard, err error)
	FindInBatches(result *[]*fatten.FattenSoilBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*fatten.FattenSoilBiohazard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFattenSoilBiohazardDo
	Assign(attrs ...field.AssignExpr) IFattenSoilBiohazardDo
	Joins(fields ...field.RelationField) IFattenSoilBiohazardDo
	Preload(fields ...field.RelationField) IFattenSoilBiohazardDo
	FirstOrInit() (*fatten.FattenSoilBiohazard, error)
	FirstOrCreate() (*fatten.FattenSoilBiohazard, error)
	FindByPage(offset int, limit int) (result []*fatten.FattenSoilBiohazard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFattenSoilBiohazardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fattenSoilBiohazardDo) Debug() IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Debug())
}

func (f fattenSoilBiohazardDo) WithContext(ctx context.Context) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fattenSoilBiohazardDo) ReadDB() IFattenSoilBiohazardDo {
	return f.Clauses(dbresolver.Read)
}

func (f fattenSoilBiohazardDo) WriteDB() IFattenSoilBiohazardDo {
	return f.Clauses(dbresolver.Write)
}

func (f fattenSoilBiohazardDo) Session(config *gorm.Session) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Session(config))
}

func (f fattenSoilBiohazardDo) Clauses(conds ...clause.Expression) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fattenSoilBiohazardDo) Returning(value interface{}, columns ...string) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fattenSoilBiohazardDo) Not(conds ...gen.Condition) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fattenSoilBiohazardDo) Or(conds ...gen.Condition) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fattenSoilBiohazardDo) Select(conds ...field.Expr) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fattenSoilBiohazardDo) Where(conds ...gen.Condition) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fattenSoilBiohazardDo) Order(conds ...field.Expr) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fattenSoilBiohazardDo) Distinct(cols ...field.Expr) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fattenSoilBiohazardDo) Omit(cols ...field.Expr) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fattenSoilBiohazardDo) Join(table schema.Tabler, on ...field.Expr) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fattenSoilBiohazardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fattenSoilBiohazardDo) RightJoin(table schema.Tabler, on ...field.Expr) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fattenSoilBiohazardDo) Group(cols ...field.Expr) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fattenSoilBiohazardDo) Having(conds ...gen.Condition) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fattenSoilBiohazardDo) Limit(limit int) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fattenSoilBiohazardDo) Offset(offset int) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fattenSoilBiohazardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fattenSoilBiohazardDo) Unscoped() IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fattenSoilBiohazardDo) Create(values ...*fatten.FattenSoilBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fattenSoilBiohazardDo) CreateInBatches(values []*fatten.FattenSoilBiohazard, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fattenSoilBiohazardDo) Save(values ...*fatten.FattenSoilBiohazard) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fattenSoilBiohazardDo) First() (*fatten.FattenSoilBiohazard, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenSoilBiohazard), nil
	}
}

func (f fattenSoilBiohazardDo) Take() (*fatten.FattenSoilBiohazard, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenSoilBiohazard), nil
	}
}

func (f fattenSoilBiohazardDo) Last() (*fatten.FattenSoilBiohazard, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenSoilBiohazard), nil
	}
}

func (f fattenSoilBiohazardDo) Find() ([]*fatten.FattenSoilBiohazard, error) {
	result, err := f.DO.Find()
	return result.([]*fatten.FattenSoilBiohazard), err
}

func (f fattenSoilBiohazardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*fatten.FattenSoilBiohazard, err error) {
	buf := make([]*fatten.FattenSoilBiohazard, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fattenSoilBiohazardDo) FindInBatches(result *[]*fatten.FattenSoilBiohazard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fattenSoilBiohazardDo) Attrs(attrs ...field.AssignExpr) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fattenSoilBiohazardDo) Assign(attrs ...field.AssignExpr) IFattenSoilBiohazardDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fattenSoilBiohazardDo) Joins(fields ...field.RelationField) IFattenSoilBiohazardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fattenSoilBiohazardDo) Preload(fields ...field.RelationField) IFattenSoilBiohazardDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fattenSoilBiohazardDo) FirstOrInit() (*fatten.FattenSoilBiohazard, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenSoilBiohazard), nil
	}
}

func (f fattenSoilBiohazardDo) FirstOrCreate() (*fatten.FattenSoilBiohazard, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*fatten.FattenSoilBiohazard), nil
	}
}

func (f fattenSoilBiohazardDo) FindByPage(offset int, limit int) (result []*fatten.FattenSoilBiohazard, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fattenSoilBiohazardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fattenSoilBiohazardDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fattenSoilBiohazardDo) Delete(models ...*fatten.FattenSoilBiohazard) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fattenSoilBiohazardDo) withDO(do gen.Dao) *fattenSoilBiohazardDo {
	f.DO = *do.(*gen.DO)
	return f
}
