---
name: fsims-org1
version: 1.0.0
client:
  organization: Org1
  connection:
    timeout:
      peer:
        endorser: '300'
organizations:
  Org1:
    mspid: Org1MSP
    cryptoPath: conf/fabric_organizations/peerOrganizations/org1/users/{userName}@org1/msp
    peers:
    - peer0.org1
    certificateAuthorities:
    - ca.org1
    users:
      Admin:
#        key:
#          path: /usr/local/src/fabric-network-v1/organizations/peerOrganizations/org1/users/Admin@org1/msp/keystore/c021c3289f87c2dc6fbe3e9320102eb395d32807d2792a6bdba8c370b076c360_sk
        cert:
          path: conf/fabric_organizations/peerOrganizations/org1/users/Admin@org1/msp/signcerts/cert.pem

  Org2:
    mspid: Org2MSP
    cryptoPath: conf/fabric_organizations/peerOrganizations/org2/users/{userName}@org2/msp

    peers:
    - peer0.org2
    - peer1.org2
    certificateAuthorities:
    - ca.org2
    users:
      Admin:
#        key:
#          path: /usr/local/src/fabric-network-v1/organizations/peerOrganizations/org2/users/Admin@org2/msp/keystore/b52130a0811453ed847249c8b3c2656bea5aec367a0c739200fe7292f068baca_sk
        cert:
          path: conf/fabric_organizations/peerOrganizations/org2/users/Admin@org2/msp/signcerts/cert.pem

  Orderer:
    mspid: OrdererMSP
    cryptoPath: conf/fabric_organizations/ordererOrganizations/orderer/msp
    users:
      Admin:
        cert:
          path: conf/fabric_organizations/ordererOrganizations/orderer/users/Admin@orderer/msp/signcerts/cert.pem
peers:
  peer0.org1:
    url: grpcs://peer0.org1:7051
    tlsCACerts:
      path: conf/fabric_organizations/peerOrganizations/org1/peers/peer0.org1/tls/ca.crt
          
    grpcOptions:
      ssl-target-name-override: peer0.org1
      hostnameOverride: peer0.org1
  peer0.org2:
    url: grpcs://peer0.org2:7051
    tlsCACerts:
      path: conf/fabric_organizations/peerOrganizations/org2/peers/peer0.org2/tls/ca.crt
          
    grpcOptions:
      ssl-target-name-override: peer0.org2
      hostnameOverride: peer0.org2
certificateAuthorities:
  ca.org1:
    url: grpcs://caOrg1:7053
    caName: ca-org1
    tlsCACerts:
      path: conf/fabric_organizations/peerOrganizations/org1/msp/cacerts/localhost-7053.pem
         
    httpOptions:
      verify: false

channels:
  # name of the channel
  # name of the channel
  fsims-channel:
  # Required. list of orderers designated by the application to use for transactions on this
  # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
  # operational decisions to share loads from applications among the orderers.  The values must
  # be "names" of orgs defined under "organizations/peers"
  # deprecated: not recommended, to override any orderer configuration items, entity matchers should be used.
  # orderers:
  #  - orderer.example.com
  # Required. list of peers from participating orgs
    peers:
      peer0.org1:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        # endorsingPeer:true
        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        # chaincodeQuery:true
        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        # ledgerQuery:true
        # # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # # produce events but the app typically only needs to connect to one to listen to events.
        # # Default: true
        # eventSource:true
        #      peer1.org1.example.com:
        #        endorsingPeer: true
        #        chaincodeQuery: true
        #        ledgerQuery: true
        #        eventSource: true
      
    # policies:
    #   #[Optional] options for retrieving channel configuration blocks
    #   queryChannelConfig:
    #     #[Optional] min number of success responses (from targets/peers)
    #     # minResponses:1
    #     # #[Optional] channel config will be retrieved for these number of random targets
    #     # maxTargets:1
    #     #[Optional] retry options for query config block
    #   retryOpts:
    #   #[Optional] number of retry attempts
    #   # attempts:5
    #   #[Optional] the back off interval for the first retry attempt
    #   initialBackoff: 500ms
    #   #[Optional] the maximum back off interval for any retry attempt
    #   maxBackoff: 5s
    #   #[Optional] he factor by which the initial back off period is exponentially incremented
    #   # backoffFactor:2.0
    #   #[Optional] options for retrieving discovery info
    #   discovery:
    #   #[Optional] discovery info will be retrieved for these number of random targets
    #     maxTargets:2
    #   #[Optional] retry options for retrieving discovery info
    #   retryOpts:
    #   #[Optional] number of retry attempts
    #     attempts:4
    #   #[Optional] the back off interval for the first retry attempt
    #   initialBackoff: 500ms
    #   initialBackoff: 500ms
    #   #[Optional] the maximum back off interval for any retry attempt
    #   maxBackoff: 5s
    #   #[Optional] he factor by which the initial back off period is exponentially incremented
    #   backoffFactor:2.0
    #   #[Optional] options for the event service
    #   eventService:
    #   # [Optional] resolverStrategy specifies the peer resolver strategy to use when connecting to a peer
    #   # Possible values: [PreferOrg (default), MinBlockHeight, Balanced]
    #   #
    #   # PreferOrg:
    #   #   Determines which peers are suitable based on block height lag threshold, although will prefer the peers in the
    #   #   current org (as long as their block height is above a configured threshold). If none of the peers from the current org
    #   #   are suitable then a peer from another org is chosen.
    #   # MinBlockHeight:
    #   #   Chooses the best peer according to a block height lag threshold. The maximum block height of all peers is
    #   #   determined and the peers whose block heights are under the maximum height but above a provided "lag" threshold are load
    #   #   balanced. The other peers are not considered.
    #   # Balanced:
    #   #   Chooses peers using the configured balancer.
    #   resolverStrategy: PreferOrg
    #   # [Optional] balancer is the balancer to use when choosing a peer to connect to
    #   # Possible values: [Random (default), RoundRobin]
    #   balancer: Random
    #   # [Optional] blockHeightLagThreshold sets the block height lag threshold. This value is used for choosing a peer
    #   # to connect to. If a peer is lagging behind the most up-to-date peer by more than the given number of
    #   # blocks then it will be excluded from selection.
    #   # If set to 0 then only the most up-to-date peers are considered.
    #   # If set to -1 then all peers (regardless of block height) are considered for selection.
    #   # Default: 5
    #   blockHeightLagThreshold:5
    #   # [Optional] reconnectBlockHeightLagThreshold - if >0 then the event client will disconnect from the peer if the peer's
    #   # block height falls behind the specified number of blocks and will reconnect to a better performing peer.
    #   # If set to 0 then this feature is disabled.
    #   # Default: 10
    #   # NOTES:
    #   #   - peerMonitorPeriod must be >0 to enable this feature
    #   #   - Setting this value too low may cause the event client to disconnect/reconnect too frequently, thereby
    #   #     affecting performance.
    #   reconnectBlockHeightLagThreshold:10
    #   # [Optional] peerMonitorPeriod is the period in which the connected peer is monitored to see if
    #   # the event client should disconnect from it and reconnect to another peer.
    #   # Default: 0 (disabled)
    #   peerMonitorPeriod: 5s
    #   #
